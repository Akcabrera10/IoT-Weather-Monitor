
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008630  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce8  080087c0  080087c0  000187c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a8  080094a8  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b0  080094b0  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  080094c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb8  200002c8  08009788  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00017000  20000f80  08009788  00020f80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c4e  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004641  00000000  00000000  00040f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000142dc  00000000  00000000  00045587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00059868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001748  00000000  00000000  0005ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e93  00000000  00000000  0005c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022263  00000000  00000000  000860e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3594  00000000  00000000  000a8346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019b8da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004acc  00000000  00000000  0019b92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087a4 	.word	0x080087a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	080087a4 	.word	0x080087a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eb0:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
  float gyroData[3];
  float magData[3];
  float accelData[3];
  uint8_t  MAC_Addr[6] = {0};
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9319      	str	r3, [sp, #100]	; 0x64
 8000eb8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
  uint8_t  IP_Addr[4] = {0};
 8000ebc:	9318      	str	r3, [sp, #96]	; 0x60
  uint8_t TxData[] = "STM32 : Hello!\n";
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <main+0x7c>)
 8000ec0:	ac21      	add	r4, sp, #132	; 0x84
 8000ec2:	f103 0510 	add.w	r5, r3, #16
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	6859      	ldr	r1, [r3, #4]
 8000eca:	4622      	mov	r2, r4
 8000ecc:	c203      	stmia	r2!, {r0, r1}
 8000ece:	3308      	adds	r3, #8
 8000ed0:	42ab      	cmp	r3, r5
 8000ed2:	4614      	mov	r4, r2
 8000ed4:	d1f7      	bne.n	8000ec6 <main+0x1a>
  int32_t Socket = -1;
  uint16_t Datalen;
  int32_t ret;

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f001 ff37 	bl	8002d48 <HAL_Init>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000eda:	2460      	movs	r4, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000edc:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ede:	2200      	movs	r2, #0
 8000ee0:	e9cd 2431 	strd	r2, r4, [sp, #196]	; 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ee4:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ee8:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000eea:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000eee:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ef0:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ef2:	2328      	movs	r3, #40	; 0x28
 8000ef4:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ef6:	2404      	movs	r4, #4
 8000ef8:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efa:	a82a      	add	r0, sp, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efc:	e9cd 3438 	strd	r3, r4, [sp, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f00:	923a      	str	r2, [sp, #232]	; 0xe8
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f02:	f002 fce1 	bl	80038c8 <HAL_RCC_OscConfig>
 8000f06:	b100      	cbz	r0, 8000f0a <main+0x5e>
  {
    /* Initialization Error */
    while(1);
 8000f08:	e7fe      	b.n	8000f08 <main+0x5c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e9cd 1325 	strd	r1, r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f12:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f16:	9029      	str	r0, [sp, #164]	; 0xa4
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f18:	4621      	mov	r1, r4
 8000f1a:	a825      	add	r0, sp, #148	; 0x94
 8000f1c:	f002 ff54 	bl	8003dc8 <HAL_RCC_ClockConfig>
 8000f20:	4604      	mov	r4, r0
 8000f22:	b118      	cbz	r0, 8000f2c <main+0x80>
  {
    /* Initialization Error */
    while(1);
 8000f24:	e7fe      	b.n	8000f24 <main+0x78>
 8000f26:	bf00      	nop
 8000f28:	08008bc9 	.word	0x08008bc9
  BSP_LED_Init(LED2);
 8000f2c:	f001 fa28 	bl	8002380 <BSP_LED_Init>
  hDiscoUart.Instance = DISCOVERY_COM1;
 8000f30:	49b7      	ldr	r1, [pc, #732]	; (8001210 <main+0x364>)
  hDiscoUart.Init.BaudRate = 115200;
 8000f32:	4ab8      	ldr	r2, [pc, #736]	; (8001214 <main+0x368>)
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000f34:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.BaudRate = 115200;
 8000f36:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f3a:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 8000f3e:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000f40:	230c      	movs	r3, #12
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000f42:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4e:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 8000f50:	f001 fa42 	bl	80023d8 <BSP_COM_Init>
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8000f54:	4fb0      	ldr	r7, [pc, #704]	; (8001218 <main+0x36c>)
  int32_t Socket = -1;
 8000f56:	f04f 36ff 	mov.w	r6, #4294967295
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8000f5a:	f001 f909 	bl	8002170 <WIFI_Init>
 8000f5e:	4604      	mov	r4, r0
 8000f60:	2800      	cmp	r0, #0
 8000f62:	f040 814c 	bne.w	80011fe <main+0x352>
    TERMOUT("> WIFI Module Initialized.\n");
 8000f66:	48ad      	ldr	r0, [pc, #692]	; (800121c <main+0x370>)
 8000f68:	f005 f91a 	bl	80061a0 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8000f6c:	2106      	movs	r1, #6
 8000f6e:	a819      	add	r0, sp, #100	; 0x64
 8000f70:	f001 f936 	bl	80021e0 <WIFI_GetMAC_Address>
 8000f74:	2800      	cmp	r0, #0
 8000f76:	f040 812a 	bne.w	80011ce <main+0x322>
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8000f7a:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8000f90:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8000f94:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
 8000f98:	48a1      	ldr	r0, [pc, #644]	; (8001220 <main+0x374>)
 8000f9a:	f005 f87b 	bl	8006094 <iprintf>
    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8000f9e:	49a1      	ldr	r1, [pc, #644]	; (8001224 <main+0x378>)
 8000fa0:	48a1      	ldr	r0, [pc, #644]	; (8001228 <main+0x37c>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	f001 f908 	bl	80021b8 <WIFI_Connect>
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	f040 8126 	bne.w	80011fa <main+0x34e>
      TERMOUT("> es-wifi module connected \n");
 8000fae:	489f      	ldr	r0, [pc, #636]	; (800122c <main+0x380>)
 8000fb0:	f005 f8f6 	bl	80061a0 <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	a818      	add	r0, sp, #96	; 0x60
 8000fb8:	f001 f922 	bl	8002200 <WIFI_GetIP_Address>
 8000fbc:	4605      	mov	r5, r0
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	f040 8113 	bne.w	80011ea <main+0x33e>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8000fc4:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 8000fc8:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8000fcc:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	4897      	ldr	r0, [pc, #604]	; (8001230 <main+0x384>)
 8000fd4:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 8000fd8:	f005 f85c 	bl	8006094 <iprintf>
        TERMOUT("> Trying to connect to TCP server ...\n");
 8000fdc:	4895      	ldr	r0, [pc, #596]	; (8001234 <main+0x388>)
 8000fde:	f005 f8df 	bl	80061a0 <puts>
        if (WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_SERVER", RemoteIP, SERVER_PORT, 0) == WIFI_STATUS_OK)
 8000fe2:	f241 13c1 	movw	r3, #4545	; 0x11c1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	4a93      	ldr	r2, [pc, #588]	; (8001238 <main+0x38c>)
 8000fea:	4b94      	ldr	r3, [pc, #592]	; (800123c <main+0x390>)
 8000fec:	9501      	str	r5, [sp, #4]
 8000fee:	4629      	mov	r1, r5
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	f001 f919 	bl	8002228 <WIFI_OpenClientConnection>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	f040 80ef 	bne.w	80011dc <main+0x330>
        	TERMOUT ("Successfully connected to TCP Server");
 8000ffe:	4890      	ldr	r0, [pc, #576]	; (8001240 <main+0x394>)
 8001000:	f005 f848 	bl	8006094 <iprintf>
        	temp = 1;
 8001004:	2501      	movs	r5, #1
            Socket = 0;
 8001006:	4626      	mov	r6, r4
	        TERMOUT("Gyro data X: %.2f\n", gyroData[0]);
 8001008:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8001288 <main+0x3dc>
	        TERMOUT("Gyro data Y: %.2f\n", gyroData[1]);
 800100c:	f8df a27c 	ldr.w	sl, [pc, #636]	; 800128c <main+0x3e0>
  while(temp == 1)
 8001010:	2d00      	cmp	r5, #0
 8001012:	d0a2      	beq.n	8000f5a <main+0xae>
	    if(Socket != -1)
 8001014:	2e00      	cmp	r6, #0
 8001016:	d1fd      	bne.n	8001014 <main+0x168>
	        float temp_f = Temperature_Test();
 8001018:	f000 f964 	bl	80012e4 <Temperature_Test>
 800101c:	ee10 4a10 	vmov	r4, s0
	        float humid = Humidity_Test();
 8001020:	f000 f959 	bl	80012d6 <Humidity_Test>
 8001024:	ee10 9a10 	vmov	r9, s0
	        float press = Pressure_Test();
 8001028:	f000 f94e 	bl	80012c8 <Pressure_Test>
	        Gyro_Test(gyroData);
 800102c:	a81b      	add	r0, sp, #108	; 0x6c
	        float press = Pressure_Test();
 800102e:	ee10 8a10 	vmov	r8, s0
	        Gyro_Test(gyroData);
 8001032:	f000 f973 	bl	800131c <Gyro_Test>
	        TERMOUT("Gyro data X: %.2f\n", gyroData[0]);
 8001036:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001038:	f7ff fa86 	bl	8000548 <__aeabi_f2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4658      	mov	r0, fp
 8001042:	f005 f827 	bl	8006094 <iprintf>
	        TERMOUT("Gyro data Y: %.2f\n", gyroData[1]);
 8001046:	981c      	ldr	r0, [sp, #112]	; 0x70
 8001048:	f7ff fa7e 	bl	8000548 <__aeabi_f2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4650      	mov	r0, sl
 8001052:	f005 f81f 	bl	8006094 <iprintf>
	        TERMOUT("Gyro data Z: %.2f\n", gyroData[2]);
 8001056:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001058:	f7ff fa76 	bl	8000548 <__aeabi_f2d>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4878      	ldr	r0, [pc, #480]	; (8001244 <main+0x398>)
 8001062:	f005 f817 	bl	8006094 <iprintf>
	        Accelero_Test(accelData);
 8001066:	a825      	add	r0, sp, #148	; 0x94
 8001068:	f000 f944 	bl	80012f4 <Accelero_Test>
	        TERMOUT("Accel data X: %.2f\n", accelData[0]);
 800106c:	9825      	ldr	r0, [sp, #148]	; 0x94
 800106e:	f7ff fa6b 	bl	8000548 <__aeabi_f2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4874      	ldr	r0, [pc, #464]	; (8001248 <main+0x39c>)
 8001078:	f005 f80c 	bl	8006094 <iprintf>
	        TERMOUT("Accel data Y: %.2f\n", accelData[1]);
 800107c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800107e:	f7ff fa63 	bl	8000548 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4871      	ldr	r0, [pc, #452]	; (800124c <main+0x3a0>)
 8001088:	f005 f804 	bl	8006094 <iprintf>
	        TERMOUT("Accel data Z: %.2f\n", accelData[2]);
 800108c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800108e:	f7ff fa5b 	bl	8000548 <__aeabi_f2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	486e      	ldr	r0, [pc, #440]	; (8001250 <main+0x3a4>)
 8001098:	f004 fffc 	bl	8006094 <iprintf>
	        Magneto_Test(magData);
 800109c:	a81e      	add	r0, sp, #120	; 0x78
 800109e:	f000 f953 	bl	8001348 <Magneto_Test>
	        TERMOUT("Magneto data X: %.2f\n", magData[0]);
 80010a2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4869      	ldr	r0, [pc, #420]	; (8001254 <main+0x3a8>)
 80010ae:	f004 fff1 	bl	8006094 <iprintf>
	        TERMOUT("Magneto data Y: %.2f\n", magData[1]);
 80010b2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80010b4:	f7ff fa48 	bl	8000548 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4866      	ldr	r0, [pc, #408]	; (8001258 <main+0x3ac>)
 80010be:	f004 ffe9 	bl	8006094 <iprintf>
	        TERMOUT("Magneto data Z: %.2f\n", magData[2]);
 80010c2:	9820      	ldr	r0, [sp, #128]	; 0x80
 80010c4:	f7ff fa40 	bl	8000548 <__aeabi_f2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4863      	ldr	r0, [pc, #396]	; (800125c <main+0x3b0>)
 80010ce:	f004 ffe1 	bl	8006094 <iprintf>
	        sprintf(temp_str, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,", temp_f, gyroData[0], gyroData[1], gyroData[2], humid, press, accelData[0], accelData[1], accelData[2], magData[0], magData[1], magData[2]);
 80010d2:	4620      	mov	r0, r4
 80010d4:	f7ff fa38 	bl	8000548 <__aeabi_f2d>
 80010d8:	4604      	mov	r4, r0
 80010da:	9820      	ldr	r0, [sp, #128]	; 0x80
 80010dc:	460d      	mov	r5, r1
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80010e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80010e8:	f7ff fa2e 	bl	8000548 <__aeabi_f2d>
 80010ec:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80010f0:	981e      	ldr	r0, [sp, #120]	; 0x78
 80010f2:	f7ff fa29 	bl	8000548 <__aeabi_f2d>
 80010f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80010fa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80010fc:	f7ff fa24 	bl	8000548 <__aeabi_f2d>
 8001100:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001104:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001106:	f7ff fa1f 	bl	8000548 <__aeabi_f2d>
 800110a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800110e:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001110:	f7ff fa1a 	bl	8000548 <__aeabi_f2d>
 8001114:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001118:	4640      	mov	r0, r8
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001122:	4648      	mov	r0, r9
 8001124:	f7ff fa10 	bl	8000548 <__aeabi_f2d>
 8001128:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800112c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800112e:	f7ff fa0b 	bl	8000548 <__aeabi_f2d>
 8001132:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001136:	981c      	ldr	r0, [sp, #112]	; 0x70
 8001138:	f7ff fa06 	bl	8000548 <__aeabi_f2d>
 800113c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001140:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001142:	f7ff fa01 	bl	8000548 <__aeabi_f2d>
 8001146:	4622      	mov	r2, r4
 8001148:	e9cd 0100 	strd	r0, r1, [sp]
 800114c:	462b      	mov	r3, r5
 800114e:	4944      	ldr	r1, [pc, #272]	; (8001260 <main+0x3b4>)
 8001150:	a82a      	add	r0, sp, #168	; 0xa8
 8001152:	f005 f82d 	bl	80061b0 <siprintf>
	        if(WIFI_SendData(Socket, (uint8_t*)temp_str, strlen(temp_str), &Datalen, WIFI_WRITE_TIMEOUT) == WIFI_STATUS_OK)
 8001156:	a82a      	add	r0, sp, #168	; 0xa8
 8001158:	f7ff f83a 	bl	80001d0 <strlen>
 800115c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	b282      	uxth	r2, r0
 8001164:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
 8001168:	a92a      	add	r1, sp, #168	; 0xa8
 800116a:	2000      	movs	r0, #0
 800116c:	f001 f884 	bl	8002278 <WIFI_SendData>
 8001170:	2800      	cmp	r0, #0
 8001172:	d146      	bne.n	8001202 <main+0x356>
	            TERMOUT("Sent temperature: %.2f\n", temp_f);
 8001174:	483b      	ldr	r0, [pc, #236]	; (8001264 <main+0x3b8>)
 8001176:	4622      	mov	r2, r4
 8001178:	462b      	mov	r3, r5
 800117a:	f004 ff8b 	bl	8006094 <iprintf>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 800117e:	f640 35b8 	movw	r5, #3000	; 0xbb8
 8001182:	4939      	ldr	r1, [pc, #228]	; (8001268 <main+0x3bc>)
 8001184:	9500      	str	r5, [sp, #0]
 8001186:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
 800118a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800118e:	2000      	movs	r0, #0
 8001190:	f001 f884 	bl	800229c <WIFI_ReceiveData>
      if(ret == WIFI_STATUS_OK)
 8001194:	4604      	mov	r4, r0
 8001196:	2800      	cmp	r0, #0
 8001198:	d137      	bne.n	800120a <main+0x35e>
        if(Datalen > 0)
 800119a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800119e:	4932      	ldr	r1, [pc, #200]	; (8001268 <main+0x3bc>)
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f43f af37 	beq.w	8001014 <main+0x168>
          RxData[Datalen]=0;
 80011a6:	54c8      	strb	r0, [r1, r3]
          TERMOUT("Received: %s\n",RxData);
 80011a8:	4830      	ldr	r0, [pc, #192]	; (800126c <main+0x3c0>)
 80011aa:	f004 ff73 	bl	8006094 <iprintf>
          ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 80011ae:	9500      	str	r5, [sp, #0]
 80011b0:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
 80011b4:	2210      	movs	r2, #16
 80011b6:	a921      	add	r1, sp, #132	; 0x84
 80011b8:	4620      	mov	r0, r4
 80011ba:	f001 f85d 	bl	8002278 <WIFI_SendData>
          if (ret != WIFI_STATUS_OK)
 80011be:	2800      	cmp	r0, #0
 80011c0:	f43f af28 	beq.w	8001014 <main+0x168>
            TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 80011c4:	482a      	ldr	r0, [pc, #168]	; (8001270 <main+0x3c4>)
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 80011c6:	f004 ffeb 	bl	80061a0 <puts>
            break;
 80011ca:	2600      	movs	r6, #0
 80011cc:	e6c5      	b.n	8000f5a <main+0xae>
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 80011ce:	4829      	ldr	r0, [pc, #164]	; (8001274 <main+0x3c8>)
 80011d0:	f004 ffe6 	bl	80061a0 <puts>
      BSP_LED_On(LED2);
 80011d4:	4620      	mov	r0, r4
 80011d6:	f001 f8f5 	bl	80023c4 <BSP_LED_On>
 80011da:	e6e0      	b.n	8000f9e <main+0xf2>
            TERMOUT("> ERROR : Cannot open Connection\n");
 80011dc:	4826      	ldr	r0, [pc, #152]	; (8001278 <main+0x3cc>)
 80011de:	f004 ffdf 	bl	80061a0 <puts>
            BSP_LED_On(LED2);
 80011e2:	4628      	mov	r0, r5
 80011e4:	f001 f8ee 	bl	80023c4 <BSP_LED_On>
 80011e8:	e70e      	b.n	8001008 <main+0x15c>
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 80011ea:	4824      	ldr	r0, [pc, #144]	; (800127c <main+0x3d0>)
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 80011ec:	f004 ffd8 	bl	80061a0 <puts>
    BSP_LED_On(LED2);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f001 f8e7 	bl	80023c4 <BSP_LED_On>
  int temp = 0;
 80011f6:	2500      	movs	r5, #0
 80011f8:	e706      	b.n	8001008 <main+0x15c>
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 80011fa:	4821      	ldr	r0, [pc, #132]	; (8001280 <main+0x3d4>)
 80011fc:	e7f6      	b.n	80011ec <main+0x340>
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 80011fe:	4638      	mov	r0, r7
 8001200:	e7f4      	b.n	80011ec <main+0x340>
	            TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 8001202:	481b      	ldr	r0, [pc, #108]	; (8001270 <main+0x3c4>)
 8001204:	f004 ffcc 	bl	80061a0 <puts>
 8001208:	e7b9      	b.n	800117e <main+0x2d2>
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 800120a:	481e      	ldr	r0, [pc, #120]	; (8001284 <main+0x3d8>)
 800120c:	e7db      	b.n	80011c6 <main+0x31a>
 800120e:	bf00      	nop
 8001210:	20000ec8 	.word	0x20000ec8
 8001214:	40013800 	.word	0x40013800
 8001218:	08008a1d 	.word	0x08008a1d
 800121c:	08008880 	.word	0x08008880
 8001220:	0800889b 	.word	0x0800889b
 8001224:	080088ee 	.word	0x080088ee
 8001228:	080088fb 	.word	0x080088fb
 800122c:	08008905 	.word	0x08008905
 8001230:	08008921 	.word	0x08008921
 8001234:	08008950 	.word	0x08008950
 8001238:	08008976 	.word	0x08008976
 800123c:	20000000 	.word	0x20000000
 8001240:	08008981 	.word	0x08008981
 8001244:	08008a70 	.word	0x08008a70
 8001248:	08008a83 	.word	0x08008a83
 800124c:	08008a97 	.word	0x08008a97
 8001250:	08008aab 	.word	0x08008aab
 8001254:	08008abf 	.word	0x08008abf
 8001258:	08008ad5 	.word	0x08008ad5
 800125c:	08008aeb 	.word	0x08008aeb
 8001260:	08008b01 	.word	0x08008b01
 8001264:	08008b3e 	.word	0x08008b3e
 8001268:	200002e4 	.word	0x200002e4
 800126c:	08008b87 	.word	0x08008b87
 8001270:	08008b56 	.word	0x08008b56
 8001274:	080088cd 	.word	0x080088cd
 8001278:	080089a6 	.word	0x080089a6
 800127c:	080089c7 	.word	0x080089c7
 8001280:	080089f6 	.word	0x080089f6
 8001284:	08008b95 	.word	0x08008b95
 8001288:	08008a4a 	.word	0x08008a4a
 800128c:	08008a5d 	.word	0x08008a5d

08001290 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001290:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8001292:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8001296:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8001298:	2201      	movs	r2, #1
 800129a:	a901      	add	r1, sp, #4
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <__io_putchar+0x1c>)
 800129e:	f004 f91f 	bl	80054e0 <HAL_UART_Transmit>

  return ch;
}
 80012a2:	9801      	ldr	r0, [sp, #4]
 80012a4:	b003      	add	sp, #12
 80012a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012aa:	bf00      	nop
 80012ac:	20000ec8 	.word	0x20000ec8

080012b0 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 80012b0:	2802      	cmp	r0, #2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 80012b4:	f000 bf52 	b.w	800215c <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 80012b8:	4770      	bx	lr
	...

080012bc <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 80012bc:	4801      	ldr	r0, [pc, #4]	; (80012c4 <SPI3_IRQHandler+0x8>)
 80012be:	f003 be87 	b.w	8004fd0 <HAL_SPI_IRQHandler>
 80012c2:	bf00      	nop
 80012c4:	20000508 	.word	0x20000508

080012c8 <Pressure_Test>:

/**
  * @brief  Test of LPS22HB pressure sensor.
  */
float Pressure_Test(void)
{
 80012c8:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  float press_value = 0;
  
  BSP_PSENSOR_Init();
 80012ca:	f001 f9c1 	bl	8002650 <BSP_PSENSOR_Init>
  press_value = BSP_PSENSOR_ReadPressure();
  return press_value;

}
 80012ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  press_value = BSP_PSENSOR_ReadPressure();
 80012d2:	f001 b9d1 	b.w	8002678 <BSP_PSENSOR_ReadPressure>

080012d6 <Humidity_Test>:

/**
  * @brief  Test of HTS221 humidity sensor.
  */
float Humidity_Test(void)
{
 80012d6:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  float humidity_value = 0;

  BSP_HSENSOR_Init();
 80012d8:	f001 f966 	bl	80025a8 <BSP_HSENSOR_Init>
  humidity_value = BSP_HSENSOR_ReadHumidity();
  return humidity_value;

}
 80012dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  humidity_value = BSP_HSENSOR_ReadHumidity();
 80012e0:	f001 b976 	b.w	80025d0 <BSP_HSENSOR_ReadHumidity>

080012e4 <Temperature_Test>:

/**
  * @brief  Test of HTS221 and LPS22HB temperature sensors.
  */
float Temperature_Test(void)
{
 80012e4:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  float temp_value = 0;

  BSP_TSENSOR_Init();
 80012e6:	f001 f9cf 	bl	8002688 <BSP_TSENSOR_Init>

#endif

   temp_value = BSP_TSENSOR_ReadTemp();
   return temp_value;
}
 80012ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   temp_value = BSP_TSENSOR_ReadTemp();
 80012ee:	f001 b9dd 	b.w	80026ac <BSP_TSENSOR_ReadTemp>
	...

080012f4 <Accelero_Test>:

/**
  * @brief  Test of LSM6DSL accelerometer sensor.
  */
void Accelero_Test(float* accelData)
{
 80012f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t ret = 0;

  BSP_ACCELERO_Init();
  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80012f6:	4d08      	ldr	r5, [pc, #32]	; (8001318 <Accelero_Test+0x24>)
{
 80012f8:	4604      	mov	r4, r0
  BSP_ACCELERO_Init();
 80012fa:	f001 f905 	bl	8002508 <BSP_ACCELERO_Init>
  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80012fe:	4628      	mov	r0, r5
 8001300:	f001 f920 	bl	8002544 <BSP_ACCELERO_AccGetXYZ>
  accelData[0] = pDataXYZ[0];
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	6023      	str	r3, [r4, #0]
  accelData[1] = pDataXYZ[1];
 8001308:	686b      	ldr	r3, [r5, #4]
 800130a:	6063      	str	r3, [r4, #4]
  accelData[2] = pDataXYZ[2];
 800130c:	68ab      	ldr	r3, [r5, #8]
 800130e:	60a3      	str	r3, [r4, #8]
  BSP_ACCELERO_DeInit();

}
 8001310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  BSP_ACCELERO_DeInit();
 8001314:	f001 b90c 	b.w	8002530 <BSP_ACCELERO_DeInit>
 8001318:	200004d8 	.word	0x200004d8

0800131c <Gyro_Test>:

/**
  * @brief  Test of LIS3MDL gyroscope sensor.
  */
void Gyro_Test(float* gyroData)
{
 800131c:	b538      	push	{r3, r4, r5, lr}
      BSP_GYRO_Init();
      BSP_GYRO_GetXYZ(gyroDataXYZ);
 800131e:	4d09      	ldr	r5, [pc, #36]	; (8001344 <Gyro_Test+0x28>)
{
 8001320:	4604      	mov	r4, r0
      BSP_GYRO_Init();
 8001322:	f001 f919 	bl	8002558 <BSP_GYRO_Init>
      BSP_GYRO_GetXYZ(gyroDataXYZ);
 8001326:	f105 000c 	add.w	r0, r5, #12
 800132a:	f001 f933 	bl	8002594 <BSP_GYRO_GetXYZ>
      gyroData[0] = gyroDataXYZ[0];
 800132e:	68eb      	ldr	r3, [r5, #12]
 8001330:	6023      	str	r3, [r4, #0]
      gyroData[1] = gyroDataXYZ[1];
 8001332:	692b      	ldr	r3, [r5, #16]
 8001334:	6063      	str	r3, [r4, #4]
      gyroData[2] = gyroDataXYZ[2];
 8001336:	696b      	ldr	r3, [r5, #20]
 8001338:	60a3      	str	r3, [r4, #8]
      BSP_GYRO_DeInit();
}
 800133a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      BSP_GYRO_DeInit();
 800133e:	f001 b91f 	b.w	8002580 <BSP_GYRO_DeInit>
 8001342:	bf00      	nop
 8001344:	200004d8 	.word	0x200004d8

08001348 <Magneto_Test>:

/**
  * @brief  Test of LIS3MDL magnetometer sensor.
  */
void Magneto_Test(float* magData)
{
 8001348:	b538      	push	{r3, r4, r5, lr}
  uint32_t ret = 0;
  BSP_MAGNETO_Init();
  BSP_MAGNETO_GetXYZ(mDataXYZ);
 800134a:	4d09      	ldr	r5, [pc, #36]	; (8001370 <Magneto_Test+0x28>)
{
 800134c:	4604      	mov	r4, r0
  BSP_MAGNETO_Init();
 800134e:	f001 f947 	bl	80025e0 <BSP_MAGNETO_Init>
  BSP_MAGNETO_GetXYZ(mDataXYZ);
 8001352:	f105 0018 	add.w	r0, r5, #24
 8001356:	f001 f971 	bl	800263c <BSP_MAGNETO_GetXYZ>
  magData[0] = mDataXYZ[0];
 800135a:	69ab      	ldr	r3, [r5, #24]
 800135c:	6023      	str	r3, [r4, #0]
  magData[1] = mDataXYZ[1];
 800135e:	69eb      	ldr	r3, [r5, #28]
 8001360:	6063      	str	r3, [r4, #4]
  magData[2] = mDataXYZ[2];
 8001362:	6a2b      	ldr	r3, [r5, #32]
 8001364:	60a3      	str	r3, [r4, #8]
  BSP_MAGNETO_DeInit();
  
}
 8001366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  BSP_MAGNETO_DeInit();
 800136a:	f001 b95d 	b.w	8002628 <BSP_MAGNETO_DeInit>
 800136e:	bf00      	nop
 8001370:	200004d8 	.word	0x200004d8

08001374 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001374:	4770      	bx	lr

08001376 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler>

08001378 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler>

0800137a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler>

0800137c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler>

0800137e <SVC_Handler>:
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:
 8001382:	4770      	bx	lr

08001384 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8001384:	f001 bcf0 	b.w	8002d68 <HAL_IncTick>

08001388 <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001388:	2002      	movs	r0, #2
 800138a:	f001 be89 	b.w	80030a0 <HAL_GPIO_EXTI_IRQHandler>

0800138e <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 800138e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0;
    uint8_t done_count = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                      /* Check for minus character */
 8001390:	7803      	ldrb	r3, [r0, #0]
 8001392:	2b2d      	cmp	r3, #45	; 0x2d
 8001394:	d115      	bne.n	80013c2 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8001396:	3001      	adds	r0, #1
        minus = 1;
 8001398:	2501      	movs	r5, #1
 800139a:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0;
 800139c:	462a      	mov	r2, r5
 800139e:	2000      	movs	r0, #0
        done_count++;
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 80013a0:	270a      	movs	r7, #10
 80013a2:	e003      	b.n	80013ac <ParseNumber+0x1e>
        ptr++;
        done_count++;
 80013a4:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 80013a6:	fb07 4000 	mla	r0, r7, r0, r4
        done_count++;
 80013aa:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 80013ac:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80013b0:	3c30      	subs	r4, #48	; 0x30
 80013b2:	b2e6      	uxtb	r6, r4
 80013b4:	2e09      	cmp	r6, #9
 80013b6:	d9f5      	bls.n	80013a4 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80013b8:	b101      	cbz	r1, 80013bc <ParseNumber+0x2e>
        *cnt = done_count;
 80013ba:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                            /* Minus detected */
 80013bc:	b105      	cbz	r5, 80013c0 <ParseNumber+0x32>
        return 0 - sum;
 80013be:	4240      	negs	r0, r0
    }
    return sum;                                             /* Return number */
}
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0;
 80013c2:	2500      	movs	r5, #0
 80013c4:	e7e9      	b.n	800139a <ParseNumber+0xc>
	...

080013c8 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80013c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013cc:	4605      	mov	r5, r0
  uint16_t cmd_len = 0;
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80013ce:	4608      	mov	r0, r1
{
 80013d0:	4689      	mov	r9, r1
 80013d2:	4692      	mov	sl, r2
 80013d4:	4698      	mov	r8, r3
  cmd_len = strlen((char*)cmd);
 80013d6:	f7fe fefb 	bl	80001d0 <strlen>

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80013da:	f010 0401 	ands.w	r4, r0, #1
{
 80013de:	9f08      	ldr	r7, [sp, #32]
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80013e0:	d12f      	bne.n	8001442 <AT_RequestSendData+0x7a>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80013e2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80013e6:	b913      	cbnz	r3, 80013ee <AT_RequestSendData+0x26>
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 80013e8:	2004      	movs	r0, #4
}
 80013ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80013ee:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d0f8      	beq.n	80013e8 <AT_RequestSendData+0x20>
  cmd_len = strlen((char*)cmd);
 80013f6:	b286      	uxth	r6, r0
  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80013f8:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 80013fc:	4631      	mov	r1, r6
 80013fe:	4648      	mov	r0, r9
 8001400:	4798      	blx	r3
  if (n == cmd_len)
 8001402:	b280      	uxth	r0, r0
 8001404:	4286      	cmp	r6, r0
 8001406:	d1ef      	bne.n	80013e8 <AT_RequestSendData+0x20>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001408:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800140c:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8001410:	4641      	mov	r1, r8
 8001412:	4650      	mov	r0, sl
 8001414:	4798      	blx	r3
    if (send_len == len)
 8001416:	4540      	cmp	r0, r8
 8001418:	d113      	bne.n	8001442 <AT_RequestSendData+0x7a>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800141a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800141e:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8001422:	4621      	mov	r1, r4
 8001424:	4638      	mov	r0, r7
 8001426:	4798      	blx	r3
      if (recv_len > 0)
 8001428:	2800      	cmp	r0, #0
 800142a:	dd0c      	ble.n	8001446 <AT_RequestSendData+0x7e>
        *(pdata + recv_len) = 0;
 800142c:	543c      	strb	r4, [r7, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800142e:	490a      	ldr	r1, [pc, #40]	; (8001458 <AT_RequestSendData+0x90>)
 8001430:	4638      	mov	r0, r7
 8001432:	f004 fef8 	bl	8006226 <strstr>
 8001436:	b950      	cbnz	r0, 800144e <AT_RequestSendData+0x86>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001438:	4908      	ldr	r1, [pc, #32]	; (800145c <AT_RequestSendData+0x94>)
 800143a:	4638      	mov	r0, r7
 800143c:	f004 fef3 	bl	8006226 <strstr>
 8001440:	b938      	cbnz	r0, 8001452 <AT_RequestSendData+0x8a>
          return ES_WIFI_STATUS_ERROR;
 8001442:	2002      	movs	r0, #2
 8001444:	e7d1      	b.n	80013ea <AT_RequestSendData+0x22>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001446:	3004      	adds	r0, #4
 8001448:	d1fb      	bne.n	8001442 <AT_RequestSendData+0x7a>
        return ES_WIFI_STATUS_MODULE_CRASH;
 800144a:	2006      	movs	r0, #6
 800144c:	e7cd      	b.n	80013ea <AT_RequestSendData+0x22>
          return ES_WIFI_STATUS_OK;
 800144e:	4620      	mov	r0, r4
 8001450:	e7cb      	b.n	80013ea <AT_RequestSendData+0x22>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001452:	2005      	movs	r0, #5
 8001454:	e7c9      	b.n	80013ea <AT_RequestSendData+0x22>
 8001456:	bf00      	nop
 8001458:	08008c0f 	.word	0x08008c0f
 800145c:	08008c18 	.word	0x08008c18

08001460 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8001460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int len;
  uint8_t *p=Obj->CmdData;

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001464:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
{
 8001468:	9e08      	ldr	r6, [sp, #32]
 800146a:	4680      	mov	r8, r0
 800146c:	4689      	mov	r9, r1
 800146e:	4615      	mov	r5, r2
 8001470:	461f      	mov	r7, r3
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001472:	b914      	cbnz	r4, 800147a <AT_RequestReceiveData+0x1a>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001474:	2004      	movs	r0, #4
}
 8001476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 800147a:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f8      	beq.n	8001474 <AT_RequestReceiveData+0x14>
  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 8001482:	4608      	mov	r0, r1
 8001484:	f7fe fea4 	bl	80001d0 <strlen>
 8001488:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 800148c:	b281      	uxth	r1, r0
 800148e:	4648      	mov	r0, r9
 8001490:	47a0      	blx	r4
 8001492:	2800      	cmp	r0, #0
 8001494:	ddee      	ble.n	8001474 <AT_RequestReceiveData+0x14>
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8001496:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 800149a:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 800149e:	2100      	movs	r1, #0
 80014a0:	f508 7094 	add.w	r0, r8, #296	; 0x128
 80014a4:	4798      	blx	r3
    if ((p[0] != '\r') || (p[1] != '\n'))
 80014a6:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 80014aa:	2b0d      	cmp	r3, #13
 80014ac:	d1e2      	bne.n	8001474 <AT_RequestReceiveData+0x14>
 80014ae:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 80014b2:	2b0a      	cmp	r3, #10
 80014b4:	d1de      	bne.n	8001474 <AT_RequestReceiveData+0x14>
    len -= 2;
 80014b6:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 80014b8:	2907      	cmp	r1, #7
 80014ba:	d9db      	bls.n	8001474 <AT_RequestReceiveData+0x14>
    p += 2;
 80014bc:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len - 1] == 0x15)) len--;
 80014c0:	f208 1829 	addw	r8, r8, #297	; 0x129
 80014c4:	b119      	cbz	r1, 80014ce <AT_RequestReceiveData+0x6e>
 80014c6:	f818 3001 	ldrb.w	r3, [r8, r1]
 80014ca:	2b15      	cmp	r3, #21
 80014cc:	d017      	beq.n	80014fe <AT_RequestReceiveData+0x9e>
     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80014ce:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 80014d2:	f04f 0800 	mov.w	r8, #0
 80014d6:	f809 8001 	strb.w	r8, [r9, r1]
     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80014da:	eb09 0004 	add.w	r0, r9, r4
 80014de:	490a      	ldr	r1, [pc, #40]	; (8001508 <AT_RequestReceiveData+0xa8>)
 80014e0:	f004 fea1 	bl	8006226 <strstr>
 80014e4:	b168      	cbz	r0, 8001502 <AT_RequestReceiveData+0xa2>
       if (*ReadData > Reqlen)
 80014e6:	b2a1      	uxth	r1, r4
 80014e8:	42b9      	cmp	r1, r7
 80014ea:	460a      	mov	r2, r1
 80014ec:	bf28      	it	cs
 80014ee:	463a      	movcs	r2, r7
 80014f0:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 80014f2:	4649      	mov	r1, r9
 80014f4:	4628      	mov	r0, r5
 80014f6:	f004 f94d 	bl	8005794 <memcpy>
       return ES_WIFI_STATUS_OK;
 80014fa:	4640      	mov	r0, r8
 80014fc:	e7bb      	b.n	8001476 <AT_RequestReceiveData+0x16>
     while(len && (p[len - 1] == 0x15)) len--;
 80014fe:	3901      	subs	r1, #1
 8001500:	e7e0      	b.n	80014c4 <AT_RequestReceiveData+0x64>
       *ReadData = 0;
 8001502:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001504:	2005      	movs	r0, #5
 8001506:	e7b6      	b.n	8001476 <AT_RequestReceiveData+0x16>
 8001508:	08008c0f 	.word	0x08008c0f

0800150c <ParseIP>:
{
 800150c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800150e:	460e      	mov	r6, r1
  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001510:	4604      	mov	r4, r0
 8001512:	b110      	cbz	r0, 800151a <ParseIP+0xe>
 8001514:	b109      	cbz	r1, 800151a <ParseIP+0xe>
 8001516:	2a03      	cmp	r2, #3
 8001518:	d816      	bhi.n	8001548 <ParseIP+0x3c>
}
 800151a:	b003      	add	sp, #12
 800151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*ptr != '.')
 800151e:	2b2e      	cmp	r3, #46	; 0x2e
    uint8_t done_count = 1;
 8001520:	f88d 7007 	strb.w	r7, [sp, #7]
    if (*ptr != '.')
 8001524:	d007      	beq.n	8001536 <ParseIP+0x2a>
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001526:	f10d 0107 	add.w	r1, sp, #7
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff ff2f 	bl	800138e <ParseNumber>
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	5570      	strb	r0, [r6, r5]
 8001534:	b2dd      	uxtb	r5, r3
    ptr = ptr + done_count;
 8001536:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800153a:	2d04      	cmp	r5, #4
    ptr = ptr + done_count;
 800153c:	441c      	add	r4, r3
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800153e:	d0ec      	beq.n	800151a <ParseIP+0xe>
 8001540:	7823      	ldrb	r3, [r4, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1eb      	bne.n	800151e <ParseIP+0x12>
 8001546:	e7e8      	b.n	800151a <ParseIP+0xe>
  uint8_t hex_8bits_count = 0;
 8001548:	2500      	movs	r5, #0
    uint8_t done_count = 1;
 800154a:	2701      	movs	r7, #1
 800154c:	e7f8      	b.n	8001540 <ParseIP+0x34>
	...

08001550 <AT_ExecuteCommand>:
{
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001552:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
{
 8001556:	4604      	mov	r4, r0
 8001558:	460e      	mov	r6, r1
 800155a:	4615      	mov	r5, r2
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 800155c:	b38f      	cbz	r7, 80015c2 <AT_ExecuteCommand+0x72>
 800155e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8001562:	b373      	cbz	r3, 80015c2 <AT_ExecuteCommand+0x72>
  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001564:	4608      	mov	r0, r1
 8001566:	f7fe fe33 	bl	80001d0 <strlen>
 800156a:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 800156e:	b281      	uxth	r1, r0
 8001570:	4630      	mov	r0, r6
 8001572:	47b8      	blx	r7
  if( ret > 0)
 8001574:	2800      	cmp	r0, #0
 8001576:	dd24      	ble.n	80015c2 <AT_ExecuteCommand+0x72>
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001578:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800157c:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8001580:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001584:	4628      	mov	r0, r5
 8001586:	4798      	blx	r3
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001588:	1e43      	subs	r3, r0, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001590:	d211      	bcs.n	80015b6 <AT_ExecuteCommand+0x66>
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001592:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
        recv_len--;
 8001596:	bf08      	it	eq
 8001598:	b218      	sxtheq	r0, r3
      *(pdata + recv_len) = 0;
 800159a:	2400      	movs	r4, #0
 800159c:	542c      	strb	r4, [r5, r0]
      if (strstr((char *)pdata, AT_OK_STRING))
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <AT_ExecuteCommand+0x78>)
 80015a0:	4628      	mov	r0, r5
 80015a2:	f004 fe40 	bl	8006226 <strstr>
 80015a6:	b950      	cbnz	r0, 80015be <AT_ExecuteCommand+0x6e>
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 80015a8:	4908      	ldr	r1, [pc, #32]	; (80015cc <AT_ExecuteCommand+0x7c>)
 80015aa:	4628      	mov	r0, r5
 80015ac:	f004 fe3b 	bl	8006226 <strstr>
 80015b0:	b138      	cbz	r0, 80015c2 <AT_ExecuteCommand+0x72>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80015b2:	2005      	movs	r0, #5
 80015b4:	e002      	b.n	80015bc <AT_ExecuteCommand+0x6c>
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80015b6:	3004      	adds	r0, #4
 80015b8:	d103      	bne.n	80015c2 <AT_ExecuteCommand+0x72>
      return ES_WIFI_STATUS_MODULE_CRASH;
 80015ba:	2006      	movs	r0, #6
}
 80015bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ES_WIFI_STATUS_OK;
 80015be:	4620      	mov	r0, r4
 80015c0:	e7fc      	b.n	80015bc <AT_ExecuteCommand+0x6c>
  return ES_WIFI_STATUS_IO_ERROR;
 80015c2:	2004      	movs	r0, #4
 80015c4:	e7fa      	b.n	80015bc <AT_ExecuteCommand+0x6c>
 80015c6:	bf00      	nop
 80015c8:	08008c0f 	.word	0x08008c0f
 80015cc:	08008c18 	.word	0x08008c18

080015d0 <ParseMAC>:
{
 80015d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((ptr != NULL) && (Mac != NULL))
 80015d4:	b108      	cbz	r0, 80015da <ParseMAC+0xa>
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d140      	bne.n	800165c <ParseMAC+0x8c>
}
 80015da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*ptr != ':')
 80015de:	2b3a      	cmp	r3, #58	; 0x3a
 80015e0:	d039      	beq.n	8001656 <ParseMAC+0x86>
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80015e2:	3501      	adds	r5, #1
 80015e4:	2600      	movs	r6, #0
 80015e6:	b2ed      	uxtb	r5, r5
    uint8_t sum = 0;
 80015e8:	4634      	mov	r4, r6
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80015ea:	f810 c006 	ldrb.w	ip, [r0, r6]
 80015ee:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	fa5f fe86 	uxtb.w	lr, r6
 80015fa:	d906      	bls.n	800160a <ParseMAC+0x3a>
 80015fc:	f02c 0820 	bic.w	r8, ip, #32
 8001600:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
 8001604:	f1b8 0f05 	cmp.w	r8, #5
 8001608:	d802      	bhi.n	8001610 <ParseMAC+0x40>
 800160a:	2e02      	cmp	r6, #2
 800160c:	d10b      	bne.n	8001626 <ParseMAC+0x56>
 800160e:	46b6      	mov	lr, r6
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001610:	55cc      	strb	r4, [r1, r7]
    ptr = ptr + done_count;
 8001612:	4470      	add	r0, lr
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001614:	42aa      	cmp	r2, r5
 8001616:	462f      	mov	r7, r5
 8001618:	d9df      	bls.n	80015da <ParseMAC+0xa>
 800161a:	2d05      	cmp	r5, #5
 800161c:	d8dd      	bhi.n	80015da <ParseMAC+0xa>
 800161e:	7803      	ldrb	r3, [r0, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1dc      	bne.n	80015de <ParseMAC+0xe>
 8001624:	e7d9      	b.n	80015da <ParseMAC+0xa>
        sum <<= 4;
 8001626:	0124      	lsls	r4, r4, #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001628:	2b09      	cmp	r3, #9
        sum <<= 4;
 800162a:	b2e4      	uxtb	r4, r4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800162c:	d906      	bls.n	800163c <ParseMAC+0x6c>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800162e:	f1ac 0361 	sub.w	r3, ip, #97	; 0x61
 8001632:	2b05      	cmp	r3, #5
 8001634:	d806      	bhi.n	8001644 <ParseMAC+0x74>
        return (a - 'a') + 10;
 8001636:	f1ac 0357 	sub.w	r3, ip, #87	; 0x57
        return (a - 'A') + 10;
 800163a:	b2db      	uxtb	r3, r3
        sum += Hex2Num(*ptr);
 800163c:	441c      	add	r4, r3
 800163e:	b2e4      	uxtb	r4, r4
        done_count++;
 8001640:	3601      	adds	r6, #1
 8001642:	e7d2      	b.n	80015ea <ParseMAC+0x1a>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001644:	f1ac 0341 	sub.w	r3, ip, #65	; 0x41
 8001648:	2b05      	cmp	r3, #5
 800164a:	d802      	bhi.n	8001652 <ParseMAC+0x82>
        return (a - 'A') + 10;
 800164c:	f1ac 0337 	sub.w	r3, ip, #55	; 0x37
 8001650:	e7f3      	b.n	800163a <ParseMAC+0x6a>
    return 0;
 8001652:	2300      	movs	r3, #0
 8001654:	e7f2      	b.n	800163c <ParseMAC+0x6c>
    uint8_t done_count = 1;
 8001656:	f04f 0e01 	mov.w	lr, #1
 800165a:	e7da      	b.n	8001612 <ParseMAC+0x42>
  uint8_t hex_8bits_count = 0;
 800165c:	2500      	movs	r5, #0
 800165e:	e7d9      	b.n	8001614 <ParseMAC+0x44>

08001660 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001664:	f247 5330 	movw	r3, #30000	; 0x7530
 8001668:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 800166c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
{
 8001670:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init != NULL) {
 8001672:	b91b      	cbnz	r3, 800167c <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001674:	2502      	movs	r5, #2
   }
  }

  UNLOCK_WIFI();
  return ret;
}
 8001676:	4628      	mov	r0, r5
 8001678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800167c:	2000      	movs	r0, #0
 800167e:	4798      	blx	r3
 8001680:	2800      	cmp	r0, #0
 8001682:	d1f7      	bne.n	8001674 <ES_WIFI_Init+0x14>
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001684:	4932      	ldr	r1, [pc, #200]	; (8001750 <ES_WIFI_Init+0xf0>)
 8001686:	f504 7294 	add.w	r2, r4, #296	; 0x128
 800168a:	4620      	mov	r0, r4
 800168c:	f7ff ff60 	bl	8001550 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8001690:	4605      	mov	r5, r0
 8001692:	2800      	cmp	r0, #0
 8001694:	d1ef      	bne.n	8001676 <ES_WIFI_Init+0x16>
  ptr = strtok((char *)pdata + 2, ",");
 8001696:	492f      	ldr	r1, [pc, #188]	; (8001754 <ES_WIFI_Init+0xf4>)
      ptr = strtok(ptr, "\r");
 8001698:	4f2f      	ldr	r7, [pc, #188]	; (8001758 <ES_WIFI_Init+0xf8>)
    ptr = strtok(NULL, ",");
 800169a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8001754 <ES_WIFI_Init+0xf4>
  ptr = strtok((char *)pdata + 2, ",");
 800169e:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80016a2:	f004 fdd7 	bl	8006254 <strtok>
  while (ptr != NULL){
 80016a6:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 80016a8:	f104 0868 	add.w	r8, r4, #104	; 0x68
 80016ac:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d0e1      	beq.n	8001676 <ES_WIFI_Init+0x16>
    switch (num++) {
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d80c      	bhi.n	80016d0 <ES_WIFI_Init+0x70>
 80016b6:	e8df f003 	tbb	[pc, r3]
 80016ba:	1104      	.short	0x1104
 80016bc:	392f251b 	.word	0x392f251b
 80016c0:	3f          	.byte	0x3f
 80016c1:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80016c2:	4601      	mov	r1, r0
 80016c4:	221f      	movs	r2, #31
 80016c6:	4620      	mov	r0, r4
 80016c8:	f004 fd9a 	bl	8006200 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80016cc:	2300      	movs	r3, #0
 80016ce:	77e3      	strb	r3, [r4, #31]
    ptr = strtok(NULL, ",");
 80016d0:	4649      	mov	r1, r9
 80016d2:	2000      	movs	r0, #0
 80016d4:	f004 fdbe 	bl	8006254 <strtok>
 80016d8:	3601      	adds	r6, #1
 80016da:	e7e7      	b.n	80016ac <ES_WIFI_Init+0x4c>
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80016dc:	4601      	mov	r1, r0
 80016de:	2217      	movs	r2, #23
 80016e0:	f104 0020 	add.w	r0, r4, #32
 80016e4:	f004 fd8c 	bl	8006200 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80016e8:	2300      	movs	r3, #0
 80016ea:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
      break;
 80016ee:	e7ef      	b.n	80016d0 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80016f0:	4601      	mov	r1, r0
 80016f2:	220f      	movs	r2, #15
 80016f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80016f8:	f004 fd82 	bl	8006200 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80016fc:	2300      	movs	r3, #0
 80016fe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
      break;
 8001702:	e7e5      	b.n	80016d0 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001704:	4601      	mov	r1, r0
 8001706:	220f      	movs	r2, #15
 8001708:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800170c:	f004 fd78 	bl	8006200 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001710:	2300      	movs	r3, #0
 8001712:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
      break;
 8001716:	e7db      	b.n	80016d0 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001718:	4601      	mov	r1, r0
 800171a:	220f      	movs	r2, #15
 800171c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001720:	f004 fd6e 	bl	8006200 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8001724:	2300      	movs	r3, #0
 8001726:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      break;
 800172a:	e7d1      	b.n	80016d0 <ES_WIFI_Init+0x70>
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 800172c:	2100      	movs	r1, #0
 800172e:	f7ff fe2e 	bl	800138e <ParseNumber>
 8001732:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
      break;
 8001736:	e7cb      	b.n	80016d0 <ES_WIFI_Init+0x70>
      ptr = strtok(ptr, "\r");
 8001738:	4639      	mov	r1, r7
 800173a:	f004 fd8b 	bl	8006254 <strtok>
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 800173e:	221f      	movs	r2, #31
      ptr = strtok(ptr, "\r");
 8001740:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001742:	4640      	mov	r0, r8
 8001744:	f004 fd5c 	bl	8006200 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001748:	2300      	movs	r3, #0
 800174a:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
      break;
 800174e:	e7bf      	b.n	80016d0 <ES_WIFI_Init+0x70>
 8001750:	08008c40 	.word	0x08008c40
 8001754:	08008e38 	.word	0x08008e38
 8001758:	08008d0f 	.word	0x08008d0f

0800175c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 800175c:	b530      	push	{r4, r5, lr}
 800175e:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001762:	b158      	cbz	r0, 800177c <ES_WIFI_RegisterBusIO+0x20>
 8001764:	b151      	cbz	r1, 800177c <ES_WIFI_RegisterBusIO+0x20>
 8001766:	b14a      	cbz	r2, 800177c <ES_WIFI_RegisterBusIO+0x20>
 8001768:	b145      	cbz	r5, 800177c <ES_WIFI_RegisterBusIO+0x20>
 800176a:	b13c      	cbz	r4, 800177c <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 800176c:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8001770:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8001774:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001778:	2000      	movs	r0, #0
}
 800177a:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 800177c:	2002      	movs	r0, #2
 800177e:	e7fc      	b.n	800177a <ES_WIFI_RegisterBusIO+0x1e>

08001780 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8001782:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8001786:	4605      	mov	r5, r0
 8001788:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 800178a:	4620      	mov	r0, r4
 800178c:	460a      	mov	r2, r1
 800178e:	4918      	ldr	r1, [pc, #96]	; (80017f0 <ES_WIFI_Connect+0x70>)
{
 8001790:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8001792:	f004 fd0d 	bl	80061b0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001796:	4622      	mov	r2, r4
 8001798:	4621      	mov	r1, r4
 800179a:	4628      	mov	r0, r5
 800179c:	f7ff fed8 	bl	8001550 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80017a0:	bb20      	cbnz	r0, 80017ec <ES_WIFI_Connect+0x6c>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 80017a2:	4914      	ldr	r1, [pc, #80]	; (80017f4 <ES_WIFI_Connect+0x74>)
 80017a4:	463a      	mov	r2, r7
 80017a6:	4620      	mov	r0, r4
 80017a8:	f004 fd02 	bl	80061b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017ac:	4622      	mov	r2, r4
 80017ae:	4621      	mov	r1, r4
 80017b0:	4628      	mov	r0, r5
 80017b2:	f7ff fecd 	bl	8001550 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 80017b6:	b9c8      	cbnz	r0, 80017ec <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 80017b8:	490f      	ldr	r1, [pc, #60]	; (80017f8 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 80017ba:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 80017be:	4632      	mov	r2, r6
 80017c0:	4620      	mov	r0, r4
 80017c2:	f004 fcf5 	bl	80061b0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017c6:	4622      	mov	r2, r4
 80017c8:	4621      	mov	r1, r4
 80017ca:	4628      	mov	r0, r5
 80017cc:	f7ff fec0 	bl	8001550 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 80017d0:	b960      	cbnz	r0, 80017ec <ES_WIFI_Connect+0x6c>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 80017d2:	490a      	ldr	r1, [pc, #40]	; (80017fc <ES_WIFI_Connect+0x7c>)
 80017d4:	4620      	mov	r0, r4
 80017d6:	f004 fd0b 	bl	80061f0 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017da:	4622      	mov	r2, r4
 80017dc:	4621      	mov	r1, r4
 80017de:	4628      	mov	r0, r5
 80017e0:	f7ff feb6 	bl	8001550 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80017e4:	b910      	cbnz	r0, 80017ec <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80017ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08008c56 	.word	0x08008c56
 80017f4:	08008c5d 	.word	0x08008c5d
 80017f8:	08008c64 	.word	0x08008c64
 80017fc:	08008c6b 	.word	0x08008c6b

08001800 <ES_WIFI_IsConnected>:
{
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001800:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8001804:	b510      	push	{r4, lr}
  sprintf((char *)Obj->CmdData, "CS\r");
 8001806:	490b      	ldr	r1, [pc, #44]	; (8001834 <ES_WIFI_IsConnected+0x34>)
{
 8001808:	4604      	mov	r4, r0
  sprintf((char *)Obj->CmdData, "CS\r");
 800180a:	4610      	mov	r0, r2
 800180c:	f004 fcf0 	bl	80061f0 <strcpy>
 8001810:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001812:	4601      	mov	r1, r0
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff fe9b 	bl	8001550 <AT_ExecuteCommand>
  if (ret == ES_WIFI_STATUS_OK)
 800181a:	b938      	cbnz	r0, 800182c <ES_WIFI_IsConnected+0x2c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 800181c:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8001820:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8001824:	4253      	negs	r3, r2
 8001826:	4153      	adcs	r3, r2
 8001828:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
}
 800182c:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8001830:	bd10      	pop	{r4, pc}
 8001832:	bf00      	nop
 8001834:	08008c6f 	.word	0x08008c6f

08001838 <ES_WIFI_GetNetworkSettings>:
{
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001838:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 800183c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char *)Obj->CmdData, "C?\r");
 8001840:	493b      	ldr	r1, [pc, #236]	; (8001930 <ES_WIFI_GetNetworkSettings+0xf8>)
{
 8001842:	4604      	mov	r4, r0
  sprintf((char *)Obj->CmdData, "C?\r");
 8001844:	4610      	mov	r0, r2
 8001846:	f004 fcd3 	bl	80061f0 <strcpy>
 800184a:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800184c:	4601      	mov	r1, r0
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff fe7e 	bl	8001550 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8001854:	4606      	mov	r6, r0
 8001856:	b960      	cbnz	r0, 8001872 <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8001858:	4936      	ldr	r1, [pc, #216]	; (8001934 <ES_WIFI_GetNetworkSettings+0xfc>)
    ptr = strtok(NULL, ",");
 800185a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8001934 <ES_WIFI_GetNetworkSettings+0xfc>
  ptr = strtok(pdata + 2, ",");
 800185e:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8001862:	f004 fcf7 	bl	8006254 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001866:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 800186a:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800186c:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8001870:	b910      	cbnz	r0, 8001878 <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();

  return ret;
}
 8001872:	4630      	mov	r0, r6
 8001874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8001878:	2d0b      	cmp	r5, #11
 800187a:	d80e      	bhi.n	800189a <ES_WIFI_GetNetworkSettings+0x62>
 800187c:	e8df f005 	tbb	[pc, r5]
 8001880:	2a241b06 	.word	0x2a241b06
 8001884:	403c3630 	.word	0x403c3630
 8001888:	514b4844 	.word	0x514b4844
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 800188c:	4601      	mov	r1, r0
 800188e:	2220      	movs	r2, #32
 8001890:	4638      	mov	r0, r7
 8001892:	f004 fcb5 	bl	8006200 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8001896:	f884 60ad 	strb.w	r6, [r4, #173]	; 0xad
    ptr = strtok(NULL, ",");
 800189a:	4649      	mov	r1, r9
 800189c:	2000      	movs	r0, #0
 800189e:	f004 fcd9 	bl	8006254 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d0e5      	beq.n	8001872 <ES_WIFI_GetNetworkSettings+0x3a>
 80018a6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80018aa:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 80018ac:	bf14      	ite	ne
 80018ae:	3501      	addne	r5, #1
      num++;
 80018b0:	3502      	addeq	r5, #2
 80018b2:	b2ed      	uxtb	r5, r5
 80018b4:	e7dc      	b.n	8001870 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80018b6:	4601      	mov	r1, r0
 80018b8:	2220      	movs	r2, #32
 80018ba:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 80018be:	f004 fc9f 	bl	8006200 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80018c2:	f884 60ce 	strb.w	r6, [r4, #206]	; 0xce
      break;
 80018c6:	e7e8      	b.n	800189a <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80018c8:	2100      	movs	r1, #0
 80018ca:	f7ff fd60 	bl	800138e <ParseNumber>
 80018ce:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 80018d2:	e7e2      	b.n	800189a <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 80018d4:	2100      	movs	r1, #0
 80018d6:	f7ff fd5a 	bl	800138e <ParseNumber>
 80018da:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 80018de:	e7dc      	b.n	800189a <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80018e0:	2100      	movs	r1, #0
 80018e2:	f7ff fd54 	bl	800138e <ParseNumber>
 80018e6:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 80018ea:	e7d6      	b.n	800189a <ES_WIFI_GetNetworkSettings+0x62>
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 80018ec:	2204      	movs	r2, #4
 80018ee:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 80018f2:	f7ff fe0b 	bl	800150c <ParseIP>
      break;
 80018f6:	e7d0      	b.n	800189a <ES_WIFI_GetNetworkSettings+0x62>
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 80018f8:	2204      	movs	r2, #4
 80018fa:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 80018fe:	e7f8      	b.n	80018f2 <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001900:	2204      	movs	r2, #4
 8001902:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8001906:	e7f4      	b.n	80018f2 <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8001908:	2204      	movs	r2, #4
 800190a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 800190e:	e7f0      	b.n	80018f2 <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8001910:	2204      	movs	r2, #4
 8001912:	4641      	mov	r1, r8
 8001914:	e7ed      	b.n	80018f2 <ES_WIFI_GetNetworkSettings+0xba>
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8001916:	2100      	movs	r1, #0
 8001918:	f7ff fd39 	bl	800138e <ParseNumber>
 800191c:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8001920:	e7bb      	b.n	800189a <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001922:	2100      	movs	r1, #0
 8001924:	f7ff fd33 	bl	800138e <ParseNumber>
 8001928:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 800192c:	e7b5      	b.n	800189a <ES_WIFI_GetNetworkSettings+0x62>
 800192e:	bf00      	nop
 8001930:	08008c77 	.word	0x08008c77
 8001934:	08008e38 	.word	0x08008e38

08001938 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8001938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193a:	4617      	mov	r7, r2
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 800193c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8001940:	4604      	mov	r4, r0
 8001942:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData, "Z5\r");
 8001944:	4610      	mov	r0, r2
 8001946:	490a      	ldr	r1, [pc, #40]	; (8001970 <ES_WIFI_GetMACAddress+0x38>)
 8001948:	f004 fc52 	bl	80061f0 <strcpy>
 800194c:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800194e:	4601      	mov	r1, r0
 8001950:	4620      	mov	r0, r4
 8001952:	f7ff fdfd 	bl	8001550 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8001956:	4605      	mov	r5, r0
 8001958:	b940      	cbnz	r0, 800196c <ES_WIFI_GetMACAddress+0x34>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800195a:	4906      	ldr	r1, [pc, #24]	; (8001974 <ES_WIFI_GetMACAddress+0x3c>)
 800195c:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8001960:	f004 fc78 	bl	8006254 <strtok>
    ParseMAC(ptr, mac, MacLength);
 8001964:	463a      	mov	r2, r7
 8001966:	4631      	mov	r1, r6
 8001968:	f7ff fe32 	bl	80015d0 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
}
 800196c:	4628      	mov	r0, r5
 800196e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001970:	08008cb9 	.word	0x08008cb9
 8001974:	08008ef7 	.word	0x08008ef7

08001978 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001978:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800197a:	780b      	ldrb	r3, [r1, #0]
{
 800197c:	4605      	mov	r5, r0
 800197e:	460e      	mov	r6, r1
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001980:	b10b      	cbz	r3, 8001986 <ES_WIFI_StartClientConnection+0xe>
 8001982:	2b03      	cmp	r3, #3
 8001984:	d102      	bne.n	800198c <ES_WIFI_StartClientConnection+0x14>
 8001986:	8873      	ldrh	r3, [r6, #2]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d064      	beq.n	8001a56 <ES_WIFI_StartClientConnection+0xde>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800198c:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8001990:	7872      	ldrb	r2, [r6, #1]
 8001992:	4932      	ldr	r1, [pc, #200]	; (8001a5c <ES_WIFI_StartClientConnection+0xe4>)
 8001994:	4620      	mov	r0, r4
 8001996:	f004 fc0b 	bl	80061b0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800199a:	4622      	mov	r2, r4
 800199c:	4621      	mov	r1, r4
 800199e:	4628      	mov	r0, r5
 80019a0:	f7ff fdd6 	bl	8001550 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d146      	bne.n	8001a36 <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80019a8:	7832      	ldrb	r2, [r6, #0]
 80019aa:	492d      	ldr	r1, [pc, #180]	; (8001a60 <ES_WIFI_StartClientConnection+0xe8>)
 80019ac:	4620      	mov	r0, r4
 80019ae:	f004 fbff 	bl	80061b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019b2:	4622      	mov	r2, r4
 80019b4:	4621      	mov	r1, r4
 80019b6:	4628      	mov	r0, r5
 80019b8:	f7ff fdca 	bl	8001550 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80019bc:	2800      	cmp	r0, #0
 80019be:	d13a      	bne.n	8001a36 <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80019c0:	88b2      	ldrh	r2, [r6, #4]
 80019c2:	4928      	ldr	r1, [pc, #160]	; (8001a64 <ES_WIFI_StartClientConnection+0xec>)
 80019c4:	4620      	mov	r0, r4
 80019c6:	f004 fbf3 	bl	80061b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019ca:	4622      	mov	r2, r4
 80019cc:	4621      	mov	r1, r4
 80019ce:	4628      	mov	r0, r5
 80019d0:	f7ff fdbe 	bl	8001550 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80019d4:	bb78      	cbnz	r0, 8001a36 <ES_WIFI_StartClientConnection+0xbe>
 80019d6:	7833      	ldrb	r3, [r6, #0]
 80019d8:	b30b      	cbz	r3, 8001a1e <ES_WIFI_StartClientConnection+0xa6>
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d01f      	beq.n	8001a1e <ES_WIFI_StartClientConnection+0xa6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80019de:	7833      	ldrb	r3, [r6, #0]
 80019e0:	bb5b      	cbnz	r3, 8001a3a <ES_WIFI_StartClientConnection+0xc2>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80019e2:	7a73      	ldrb	r3, [r6, #9]
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	7a33      	ldrb	r3, [r6, #8]
 80019e8:	79b2      	ldrb	r2, [r6, #6]
 80019ea:	491f      	ldr	r1, [pc, #124]	; (8001a68 <ES_WIFI_StartClientConnection+0xf0>)
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4620      	mov	r0, r4
 80019f0:	79f3      	ldrb	r3, [r6, #7]
 80019f2:	f004 fbdd 	bl	80061b0 <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019f6:	4622      	mov	r2, r4
 80019f8:	4621      	mov	r1, r4
 80019fa:	4628      	mov	r0, r5
 80019fc:	f7ff fda8 	bl	8001550 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8001a00:	b9c8      	cbnz	r0, 8001a36 <ES_WIFI_StartClientConnection+0xbe>
 8001a02:	7833      	ldrb	r3, [r6, #0]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d11a      	bne.n	8001a3e <ES_WIFI_StartClientConnection+0xc6>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8001a08:	4918      	ldr	r1, [pc, #96]	; (8001a6c <ES_WIFI_StartClientConnection+0xf4>)
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f004 fbf0 	bl	80061f0 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a10:	4622      	mov	r2, r4
 8001a12:	4621      	mov	r1, r4
 8001a14:	4628      	mov	r0, r5
 8001a16:	f7ff fd9b 	bl	8001550 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001a1a:	b180      	cbz	r0, 8001a3e <ES_WIFI_StartClientConnection+0xc6>
 8001a1c:	e00b      	b.n	8001a36 <ES_WIFI_StartClientConnection+0xbe>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8001a1e:	8872      	ldrh	r2, [r6, #2]
 8001a20:	4913      	ldr	r1, [pc, #76]	; (8001a70 <ES_WIFI_StartClientConnection+0xf8>)
 8001a22:	4620      	mov	r0, r4
 8001a24:	f004 fbc4 	bl	80061b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a28:	4622      	mov	r2, r4
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f7ff fd8f 	bl	8001550 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d0d3      	beq.n	80019de <ES_WIFI_StartClientConnection+0x66>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8001a36:	b002      	add	sp, #8
 8001a38:	bd70      	pop	{r4, r5, r6, pc}
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d0d1      	beq.n	80019e2 <ES_WIFI_StartClientConnection+0x6a>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001a3e:	490d      	ldr	r1, [pc, #52]	; (8001a74 <ES_WIFI_StartClientConnection+0xfc>)
 8001a40:	4620      	mov	r0, r4
 8001a42:	f004 fbd5 	bl	80061f0 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a46:	4622      	mov	r2, r4
 8001a48:	4621      	mov	r1, r4
 8001a4a:	4628      	mov	r0, r5
}
 8001a4c:	b002      	add	sp, #8
 8001a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a52:	f7ff bd7d 	b.w	8001550 <AT_ExecuteCommand>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001a56:	2002      	movs	r0, #2
 8001a58:	e7ed      	b.n	8001a36 <ES_WIFI_StartClientConnection+0xbe>
 8001a5a:	bf00      	nop
 8001a5c:	08008d18 	.word	0x08008d18
 8001a60:	08008d1f 	.word	0x08008d1f
 8001a64:	08008d26 	.word	0x08008d26
 8001a68:	08008d3a 	.word	0x08008d3a
 8001a6c:	08008d4a 	.word	0x08008d4a
 8001a70:	08008d2d 	.word	0x08008d2d
 8001a74:	08008d34 	.word	0x08008d34

08001a78 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8001a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8001a7c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8001a80:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8001a84:	bf28      	it	cs
 8001a86:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
  }

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001a8a:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8001a8e:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 8001a90:	f8a8 3000 	strh.w	r3, [r8]
{
 8001a94:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001a96:	4628      	mov	r0, r5
 8001a98:	460a      	mov	r2, r1
 8001a9a:	492e      	ldr	r1, [pc, #184]	; (8001b54 <ES_WIFI_SendData+0xdc>)
 8001a9c:	461f      	mov	r7, r3
 8001a9e:	f004 fb87 	bl	80061b0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001aa2:	462a      	mov	r2, r5
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	f7ff fd52 	bl	8001550 <AT_ExecuteCommand>
  if (ret == ES_WIFI_STATUS_OK)
 8001aac:	4604      	mov	r4, r0
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d147      	bne.n	8001b42 <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001ab2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001ab4:	4928      	ldr	r1, [pc, #160]	; (8001b58 <ES_WIFI_SendData+0xe0>)
 8001ab6:	2a01      	cmp	r2, #1
 8001ab8:	bf38      	it	cc
 8001aba:	2201      	movcc	r2, #1
 8001abc:	4628      	mov	r0, r5
 8001abe:	f004 fb77 	bl	80061b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ac2:	462a      	mov	r2, r5
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f7ff fd42 	bl	8001550 <AT_ExecuteCommand>

    if (ret == ES_WIFI_STATUS_OK)
 8001acc:	4604      	mov	r4, r0
 8001ace:	bb80      	cbnz	r0, 8001b32 <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8001ad0:	4922      	ldr	r1, [pc, #136]	; (8001b5c <ES_WIFI_SendData+0xe4>)
 8001ad2:	463a      	mov	r2, r7
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	f004 fb6b 	bl	80061b0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001ada:	9500      	str	r5, [sp, #0]
 8001adc:	463b      	mov	r3, r7
 8001ade:	464a      	mov	r2, r9
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	4630      	mov	r0, r6
 8001ae4:	f7ff fc70 	bl	80013c8 <AT_RequestSendData>

      if (ret == ES_WIFI_STATUS_OK)
 8001ae8:	4604      	mov	r4, r0
 8001aea:	b998      	cbnz	r0, 8001b14 <ES_WIFI_SendData+0x9c>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8001aec:	491c      	ldr	r1, [pc, #112]	; (8001b60 <ES_WIFI_SendData+0xe8>)
 8001aee:	4628      	mov	r0, r5
 8001af0:	f004 fb99 	bl	8006226 <strstr>
 8001af4:	b1c8      	cbz	r0, 8001b2a <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001af6:	491b      	ldr	r1, [pc, #108]	; (8001b64 <ES_WIFI_SendData+0xec>)
 8001af8:	481b      	ldr	r0, [pc, #108]	; (8001b68 <ES_WIFI_SendData+0xf0>)
 8001afa:	f640 1201 	movw	r2, #2305	; 0x901
 8001afe:	f004 fac9 	bl	8006094 <iprintf>
 8001b02:	481a      	ldr	r0, [pc, #104]	; (8001b6c <ES_WIFI_SendData+0xf4>)
 8001b04:	4629      	mov	r1, r5
 8001b06:	f004 fac5 	bl	8006094 <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8a8 3000 	strh.w	r3, [r8]
 8001b10:	2402      	movs	r4, #2
 8001b12:	e00a      	b.n	8001b2a <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 8001b14:	4913      	ldr	r1, [pc, #76]	; (8001b64 <ES_WIFI_SendData+0xec>)
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <ES_WIFI_SendData+0xf0>)
 8001b18:	f640 1207 	movw	r2, #2311	; 0x907
 8001b1c:	f004 faba 	bl	8006094 <iprintf>
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 8001b22:	f004 fb3d 	bl	80061a0 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 8001b26:	2c02      	cmp	r4, #2
 8001b28:	d0ef      	beq.n	8001b0a <ES_WIFI_SendData+0x92>
  }

  UNLOCK_WIFI();

  return ret;
}
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	b003      	add	sp, #12
 8001b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 8001b32:	490c      	ldr	r1, [pc, #48]	; (8001b64 <ES_WIFI_SendData+0xec>)
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <ES_WIFI_SendData+0xf0>)
 8001b36:	f640 120c 	movw	r2, #2316	; 0x90c
 8001b3a:	f004 faab 	bl	8006094 <iprintf>
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <ES_WIFI_SendData+0xfc>)
 8001b40:	e7ef      	b.n	8001b22 <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <ES_WIFI_SendData+0xec>)
 8001b44:	4808      	ldr	r0, [pc, #32]	; (8001b68 <ES_WIFI_SendData+0xf0>)
 8001b46:	f640 1211 	movw	r2, #2321	; 0x911
 8001b4a:	f004 faa3 	bl	8006094 <iprintf>
 8001b4e:	480a      	ldr	r0, [pc, #40]	; (8001b78 <ES_WIFI_SendData+0x100>)
 8001b50:	e7e7      	b.n	8001b22 <ES_WIFI_SendData+0xaa>
 8001b52:	bf00      	nop
 8001b54:	08008d18 	.word	0x08008d18
 8001b58:	08008ee4 	.word	0x08008ee4
 8001b5c:	08008eec 	.word	0x08008eec
 8001b60:	08008ef5 	.word	0x08008ef5
 8001b64:	08008d8c 	.word	0x08008d8c
 8001b68:	08008df5 	.word	0x08008df5
 8001b6c:	08008efa 	.word	0x08008efa
 8001b70:	08008f15 	.word	0x08008f15
 8001b74:	08008f2e 	.word	0x08008f2e
 8001b78:	08008f40 	.word	0x08008f40

08001b7c <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8001b7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8001b80:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8001b84:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8001b88:	4606      	mov	r6, r0
 8001b8a:	4690      	mov	r8, r2
 8001b8c:	461f      	mov	r7, r3
  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8001b8e:	d867      	bhi.n	8001c60 <ES_WIFI_ReceiveData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001b90:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8001b94:	460a      	mov	r2, r1
 8001b96:	4628      	mov	r0, r5
 8001b98:	4932      	ldr	r1, [pc, #200]	; (8001c64 <ES_WIFI_ReceiveData+0xe8>)
 8001b9a:	f004 fb09 	bl	80061b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b9e:	462a      	mov	r2, r5
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	f7ff fcd4 	bl	8001550 <AT_ExecuteCommand>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	4682      	mov	sl, r0

    if (ret == ES_WIFI_STATUS_OK)
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d149      	bne.n	8001c44 <ES_WIFI_ReceiveData+0xc8>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001bb0:	492d      	ldr	r1, [pc, #180]	; (8001c68 <ES_WIFI_ReceiveData+0xec>)
 8001bb2:	463a      	mov	r2, r7
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	f004 fafb 	bl	80061b0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001bba:	462a      	mov	r2, r5
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	f7ff fcc6 	bl	8001550 <AT_ExecuteCommand>
      if (ret == ES_WIFI_STATUS_OK)
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	bb88      	cbnz	r0, 8001c2c <ES_WIFI_ReceiveData+0xb0>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001bca:	4928      	ldr	r1, [pc, #160]	; (8001c6c <ES_WIFI_ReceiveData+0xf0>)
 8001bcc:	2a01      	cmp	r2, #1
 8001bce:	bf38      	it	cc
 8001bd0:	2201      	movcc	r2, #1
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f004 faec 	bl	80061b0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001bd8:	462a      	mov	r2, r5
 8001bda:	4629      	mov	r1, r5
 8001bdc:	4630      	mov	r0, r6
 8001bde:	f7ff fcb7 	bl	8001550 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8001be2:	4604      	mov	r4, r0
 8001be4:	b9d0      	cbnz	r0, 8001c1c <ES_WIFI_ReceiveData+0xa0>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001be6:	4922      	ldr	r1, [pc, #136]	; (8001c70 <ES_WIFI_ReceiveData+0xf4>)
 8001be8:	4628      	mov	r0, r5
 8001bea:	f004 fb01 	bl	80061f0 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001bee:	f8cd 9000 	str.w	r9, [sp]
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	4642      	mov	r2, r8
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	f7ff fc31 	bl	8001460 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 8001bfe:	4604      	mov	r4, r0
 8001c00:	b140      	cbz	r0, 8001c14 <ES_WIFI_ReceiveData+0x98>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 8001c02:	491c      	ldr	r1, [pc, #112]	; (8001c74 <ES_WIFI_ReceiveData+0xf8>)
 8001c04:	481c      	ldr	r0, [pc, #112]	; (8001c78 <ES_WIFI_ReceiveData+0xfc>)
 8001c06:	f640 12a9 	movw	r2, #2473	; 0x9a9
 8001c0a:	f004 fa43 	bl	8006094 <iprintf>
 8001c0e:	481b      	ldr	r0, [pc, #108]	; (8001c7c <ES_WIFI_ReceiveData+0x100>)
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8001c10:	f004 fac6 	bl	80061a0 <puts>
  }

  UNLOCK_WIFI();

  return ret;
}
 8001c14:	4620      	mov	r0, r4
 8001c16:	b002      	add	sp, #8
 8001c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("Setting timeout failed\n");
 8001c1c:	4915      	ldr	r1, [pc, #84]	; (8001c74 <ES_WIFI_ReceiveData+0xf8>)
 8001c1e:	4816      	ldr	r0, [pc, #88]	; (8001c78 <ES_WIFI_ReceiveData+0xfc>)
 8001c20:	f640 12ae 	movw	r2, #2478	; 0x9ae
 8001c24:	f004 fa36 	bl	8006094 <iprintf>
 8001c28:	4815      	ldr	r0, [pc, #84]	; (8001c80 <ES_WIFI_ReceiveData+0x104>)
 8001c2a:	e7f1      	b.n	8001c10 <ES_WIFI_ReceiveData+0x94>
        DEBUG("Setting requested len failed\n");
 8001c2c:	4911      	ldr	r1, [pc, #68]	; (8001c74 <ES_WIFI_ReceiveData+0xf8>)
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <ES_WIFI_ReceiveData+0xfc>)
 8001c30:	f640 12b3 	movw	r2, #2483	; 0x9b3
 8001c34:	f004 fa2e 	bl	8006094 <iprintf>
 8001c38:	4812      	ldr	r0, [pc, #72]	; (8001c84 <ES_WIFI_ReceiveData+0x108>)
 8001c3a:	f004 fab1 	bl	80061a0 <puts>
        *Receivedlen = 0;
 8001c3e:	f8a9 a000 	strh.w	sl, [r9]
 8001c42:	e7e7      	b.n	8001c14 <ES_WIFI_ReceiveData+0x98>
      DEBUG("Setting socket for read failed\n");
 8001c44:	f640 12b9 	movw	r2, #2489	; 0x9b9
 8001c48:	490a      	ldr	r1, [pc, #40]	; (8001c74 <ES_WIFI_ReceiveData+0xf8>)
 8001c4a:	480b      	ldr	r0, [pc, #44]	; (8001c78 <ES_WIFI_ReceiveData+0xfc>)
 8001c4c:	f004 fa22 	bl	8006094 <iprintf>
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <ES_WIFI_ReceiveData+0x10c>)
 8001c52:	f004 faa5 	bl	80061a0 <puts>
      issue15++;
 8001c56:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <ES_WIFI_ReceiveData+0x110>)
 8001c58:	6813      	ldr	r3, [r2, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e7d9      	b.n	8001c14 <ES_WIFI_ReceiveData+0x98>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001c60:	2402      	movs	r4, #2
 8001c62:	e7d7      	b.n	8001c14 <ES_WIFI_ReceiveData+0x98>
 8001c64:	08008d18 	.word	0x08008d18
 8001c68:	08008f62 	.word	0x08008f62
 8001c6c:	08008f69 	.word	0x08008f69
 8001c70:	08008f71 	.word	0x08008f71
 8001c74:	08008d8c 	.word	0x08008d8c
 8001c78:	08008df5 	.word	0x08008df5
 8001c7c:	08008f75 	.word	0x08008f75
 8001c80:	08008f92 	.word	0x08008f92
 8001c84:	08008fa9 	.word	0x08008fa9
 8001c88:	08008fc6 	.word	0x08008fc6
 8001c8c:	200004fc 	.word	0x200004fc

08001c90 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8001c92:	4c16      	ldr	r4, [pc, #88]	; (8001cec <SPI_WIFI_DelayUs+0x5c>)
 8001c94:	4f16      	ldr	r7, [pc, #88]	; (8001cf0 <SPI_WIFI_DelayUs+0x60>)
  volatile        uint32_t ct = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0)
 8001c9a:	6823      	ldr	r3, [r4, #0]
{
 8001c9c:	4606      	mov	r6, r0
  if (cycle_per_loop == 0)
 8001c9e:	b98b      	cbnz	r3, 8001cc4 <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca6:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 8001caa:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 8001cac:	f001 f868 	bl	8002d80 <HAL_GetTick>
 8001cb0:	4605      	mov	r5, r0
     while(ct) ct--;
 8001cb2:	9b01      	ldr	r3, [sp, #4]
 8001cb4:	b99b      	cbnz	r3, 8001cde <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick() - t;
 8001cb6:	f001 f863 	bl	8002d80 <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001cba:	1b40      	subs	r0, r0, r5
 8001cbc:	bf0a      	itet	eq
 8001cbe:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick() - t;
 8001cc0:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001cc2:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <SPI_WIFI_DelayUs+0x64>)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ccc:	6820      	ldr	r0, [r4, #0]
 8001cce:	fbb3 f3f0 	udiv	r3, r3, r0
  ct = n * loop_per_us;
 8001cd2:	4373      	muls	r3, r6
  while(ct) ct--;
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	9b01      	ldr	r3, [sp, #4]
 8001cd8:	b92b      	cbnz	r3, 8001ce6 <SPI_WIFI_DelayUs+0x56>
  return;
}
 8001cda:	b003      	add	sp, #12
 8001cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	e7e5      	b.n	8001cb2 <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 8001ce6:	9b01      	ldr	r3, [sp, #4]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	e7f3      	b.n	8001cd4 <SPI_WIFI_DelayUs+0x44>
 8001cec:	20000500 	.word	0x20000500
 8001cf0:	200000ec 	.word	0x200000ec
 8001cf4:	000f4240 	.word	0x000f4240

08001cf8 <wait_spi_tx_event.isra.0>:
static int wait_spi_tx_event(int timeout)
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 8001cfc:	f001 f840 	bl	8002d80 <HAL_GetTick>
  while (spi_tx_event == 1)
 8001d00:	4e05      	ldr	r6, [pc, #20]	; (8001d18 <wait_spi_tx_event.isra.0+0x20>)
  int tickstart = HAL_GetTick();
 8001d02:	4604      	mov	r4, r0
  while (spi_tx_event == 1)
 8001d04:	6873      	ldr	r3, [r6, #4]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d104      	bne.n	8001d14 <wait_spi_tx_event.isra.0+0x1c>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001d0a:	f001 f839 	bl	8002d80 <HAL_GetTick>
 8001d0e:	1b00      	subs	r0, r0, r4
 8001d10:	42a8      	cmp	r0, r5
 8001d12:	d9f7      	bls.n	8001d04 <wait_spi_tx_event.isra.0+0xc>
}
 8001d14:	bd70      	pop	{r4, r5, r6, pc}
 8001d16:	bf00      	nop
 8001d18:	20000500 	.word	0x20000500

08001d1c <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001d1e:	4840      	ldr	r0, [pc, #256]	; (8001e20 <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001d20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001d22:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d28:	659a      	str	r2, [r3, #88]	; 0x58
 8001d2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001d2c:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001d2e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001d32:	9201      	str	r2, [sp, #4]
 8001d34:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d38:	f042 0202 	orr.w	r2, r2, #2
 8001d3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d40:	f002 0202 	and.w	r2, r2, #2
 8001d44:	9202      	str	r2, [sp, #8]
 8001d46:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d4a:	f042 0204 	orr.w	r2, r2, #4
 8001d4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d52:	f002 0204 	and.w	r2, r2, #4
 8001d56:	9203      	str	r2, [sp, #12]
 8001d58:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d5c:	f042 0210 	orr.w	r2, r2, #16
 8001d60:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001d68:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001d70:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001d72:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d74:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001d76:	f001 f98d 	bl	8003094 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001d7e:	a905      	add	r1, sp, #20
 8001d80:	4827      	ldr	r0, [pc, #156]	; (8001e20 <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001d82:	2602      	movs	r6, #2
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001d84:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001d88:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001d8c:	f001 f89e 	bl	8002ecc <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001d90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001d94:	a905      	add	r1, sp, #20
 8001d96:	4823      	ldr	r0, [pc, #140]	; (8001e24 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001d98:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001d9c:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001da0:	f001 f894 	bl	8002ecc <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001da4:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001da8:	a905      	add	r1, sp, #20
 8001daa:	481e      	ldr	r0, [pc, #120]	; (8001e24 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = 0;
 8001dac:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001dae:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001db2:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001db6:	f001 f889 	bl	8002ecc <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001dba:	4622      	mov	r2, r4
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	4819      	ldr	r0, [pc, #100]	; (8001e24 <SPI_WIFI_MspInit+0x108>)
 8001dc0:	f001 f968 	bl	8003094 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001dc4:	a905      	add	r1, sp, #20
 8001dc6:	4817      	ldr	r0, [pc, #92]	; (8001e24 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001dc8:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001dca:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001dce:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001dd2:	f001 f87b 	bl	8002ecc <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001dda:	a905      	add	r1, sp, #20
 8001ddc:	4812      	ldr	r0, [pc, #72]	; (8001e28 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001dde:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001de0:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001de4:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001de8:	f001 f870 	bl	8002ecc <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001df0:	a905      	add	r1, sp, #20
 8001df2:	480d      	ldr	r0, [pc, #52]	; (8001e28 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001df4:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001df6:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001dfa:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001dfe:	f001 f865 	bl	8002ecc <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001e06:	4808      	ldr	r0, [pc, #32]	; (8001e28 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001e08:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001e0a:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001e0c:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001e10:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001e14:	f001 f85a 	bl	8002ecc <HAL_GPIO_Init>
}
 8001e18:	b00b      	add	sp, #44	; 0x2c
 8001e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	48001000 	.word	0x48001000
 8001e28:	48000800 	.word	0x48000800

08001e2c <SPI_WIFI_ResetModule>:
{
 8001e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8001e2e:	f000 ffa7 	bl	8002d80 <HAL_GetTick>
  WIFI_RESET_MODULE();
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 8001e38:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 8001e3a:	482e      	ldr	r0, [pc, #184]	; (8001ef4 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001e3c:	4f2e      	ldr	r7, [pc, #184]	; (8001ef8 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 8001e3e:	f001 f929 	bl	8003094 <HAL_GPIO_WritePin>
 8001e42:	200a      	movs	r0, #10
 8001e44:	f000 ffa2 	bl	8002d8c <HAL_Delay>
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e4e:	4829      	ldr	r0, [pc, #164]	; (8001ef4 <SPI_WIFI_ResetModule+0xc8>)
 8001e50:	f001 f920 	bl	8003094 <HAL_GPIO_WritePin>
 8001e54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e58:	f000 ff98 	bl	8002d8c <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001e5c:	4825      	ldr	r0, [pc, #148]	; (8001ef4 <SPI_WIFI_ResetModule+0xc8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2101      	movs	r1, #1
 8001e62:	f001 f917 	bl	8003094 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001e66:	200f      	movs	r0, #15
 8001e68:	f7ff ff12 	bl	8001c90 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8001e6c:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8001e6e:	4821      	ldr	r0, [pc, #132]	; (8001ef4 <SPI_WIFI_ResetModule+0xc8>)
 8001e70:	2102      	movs	r1, #2
 8001e72:	f001 f909 	bl	8003088 <HAL_GPIO_ReadPin>
 8001e76:	2801      	cmp	r0, #1
 8001e78:	4602      	mov	r2, r0
 8001e7a:	d020      	beq.n	8001ebe <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	481d      	ldr	r0, [pc, #116]	; (8001ef4 <SPI_WIFI_ResetModule+0xc8>)
 8001e80:	4611      	mov	r1, r2
 8001e82:	f001 f907 	bl	8003094 <HAL_GPIO_WritePin>
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001e86:	f89d 3000 	ldrb.w	r3, [sp]
 8001e8a:	2b15      	cmp	r3, #21
 8001e8c:	d12e      	bne.n	8001eec <SPI_WIFI_ResetModule+0xc0>
 8001e8e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001e92:	2b15      	cmp	r3, #21
 8001e94:	d12a      	bne.n	8001eec <SPI_WIFI_ResetModule+0xc0>
 8001e96:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001e9a:	2b0d      	cmp	r3, #13
 8001e9c:	d126      	bne.n	8001eec <SPI_WIFI_ResetModule+0xc0>
 8001e9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001ea2:	2b0a      	cmp	r3, #10
 8001ea4:	d122      	bne.n	8001eec <SPI_WIFI_ResetModule+0xc0>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001ea6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001eaa:	2b3e      	cmp	r3, #62	; 0x3e
 8001eac:	d11e      	bne.n	8001eec <SPI_WIFI_ResetModule+0xc0>
 8001eae:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001eb2:	3820      	subs	r0, #32
 8001eb4:	bf18      	it	ne
 8001eb6:	f04f 30ff 	movne.w	r0, #4294967295
}
 8001eba:	b003      	add	sp, #12
 8001ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001ebe:	eb0d 0104 	add.w	r1, sp, r4
 8001ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	f002 fbda 	bl	8004680 <HAL_SPI_Receive>
 8001ecc:	4606      	mov	r6, r0
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001ece:	f000 ff57 	bl	8002d80 <HAL_GetTick>
 8001ed2:	1b40      	subs	r0, r0, r5
    count += 2;
 8001ed4:	3402      	adds	r4, #2
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001ed6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8001eda:	b2e4      	uxtb	r4, r4
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001edc:	d201      	bcs.n	8001ee2 <SPI_WIFI_ResetModule+0xb6>
 8001ede:	2e00      	cmp	r6, #0
 8001ee0:	d0c5      	beq.n	8001e6e <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <SPI_WIFI_ResetModule+0xc8>)
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	f001 f8d4 	bl	8003094 <HAL_GPIO_WritePin>
    return -1;
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	e7e3      	b.n	8001eba <SPI_WIFI_ResetModule+0x8e>
 8001ef2:	bf00      	nop
 8001ef4:	48001000 	.word	0x48001000
 8001ef8:	20000508 	.word	0x20000508

08001efc <SPI_WIFI_Init>:
{
 8001efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8001efe:	4605      	mov	r5, r0
 8001f00:	bb88      	cbnz	r0, 8001f66 <SPI_WIFI_Init+0x6a>
    hspi.Instance               = SPI3;
 8001f02:	4c1d      	ldr	r4, [pc, #116]	; (8001f78 <SPI_WIFI_Init+0x7c>)
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <SPI_WIFI_Init+0x80>)
 8001f06:	4620      	mov	r0, r4
 8001f08:	f840 3f08 	str.w	r3, [r0, #8]!
    SPI_WIFI_MspInit(&hspi);
 8001f0c:	f7ff ff06 	bl	8001d1c <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001f10:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001f14:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001f18:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001f20:	e9c4 3505 	strd	r3, r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001f24:	f104 0008 	add.w	r0, r4, #8
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001f28:	2310      	movs	r3, #16
 8001f2a:	e9c4 2308 	strd	r2, r3, [r4, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001f2e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001f32:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001f36:	61e5      	str	r5, [r4, #28]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001f38:	f002 f941 	bl	80041be <HAL_SPI_Init>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	b9b8      	cbnz	r0, 8001f70 <SPI_WIFI_Init+0x74>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001f40:	4601      	mov	r1, r0
 8001f42:	9001      	str	r0, [sp, #4]
 8001f44:	2007      	movs	r0, #7
 8001f46:	f000 ff47 	bl	8002dd8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001f4a:	2007      	movs	r0, #7
 8001f4c:	f000 ff76 	bl	8002e3c <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001f50:	9a01      	ldr	r2, [sp, #4]
 8001f52:	2033      	movs	r0, #51	; 0x33
 8001f54:	4611      	mov	r1, r2
 8001f56:	f000 ff3f 	bl	8002dd8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001f5a:	2033      	movs	r0, #51	; 0x33
 8001f5c:	f000 ff6e 	bl	8002e3c <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8001f60:	200a      	movs	r0, #10
 8001f62:	f7ff fe95 	bl	8001c90 <SPI_WIFI_DelayUs>
}
 8001f66:	b003      	add	sp, #12
 8001f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc = SPI_WIFI_ResetModule();
 8001f6c:	f7ff bf5e 	b.w	8001e2c <SPI_WIFI_ResetModule>
}
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	b003      	add	sp, #12
 8001f76:	bd30      	pop	{r4, r5, pc}
 8001f78:	20000500 	.word	0x20000500
 8001f7c:	40003c00 	.word	0x40003c00

08001f80 <SPI_WIFI_DeInit>:
{
 8001f80:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8001f82:	4802      	ldr	r0, [pc, #8]	; (8001f8c <SPI_WIFI_DeInit+0xc>)
 8001f84:	f002 f9a0 	bl	80042c8 <HAL_SPI_DeInit>
}
 8001f88:	2000      	movs	r0, #0
 8001f8a:	bd08      	pop	{r3, pc}
 8001f8c:	20000508 	.word	0x20000508

08001f90 <SPI_WIFI_ReceiveData>:
{
 8001f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f94:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 8001f96:	2201      	movs	r2, #1
{
 8001f98:	4604      	mov	r4, r0
 8001f9a:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 8001f9c:	4836      	ldr	r0, [pc, #216]	; (8002078 <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event == 1)
 8001f9e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800207c <SPI_WIFI_ReceiveData+0xec>
  WIFI_DISABLE_NSS();
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	f001 f876 	bl	8003094 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f7ff fe71 	bl	8001c90 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8001fae:	f000 fee7 	bl	8002d80 <HAL_GetTick>
 8001fb2:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event == 1)
 8001fb4:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d01a      	beq.n	8001ff2 <SPI_WIFI_ReceiveData+0x62>
  WIFI_ENABLE_NSS();
 8001fbc:	482e      	ldr	r0, [pc, #184]	; (8002078 <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 8001fbe:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8002078 <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001fc2:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002080 <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2101      	movs	r1, #1
 8001fca:	f001 f863 	bl	8003094 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001fce:	200f      	movs	r0, #15
 8001fd0:	f7ff fe5e 	bl	8001c90 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001fd4:	3402      	adds	r4, #2
 8001fd6:	2500      	movs	r5, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4658      	mov	r0, fp
 8001fdc:	f001 f854 	bl	8003088 <HAL_GPIO_ReadPin>
 8001fe0:	2801      	cmp	r0, #1
 8001fe2:	b22e      	sxth	r6, r5
 8001fe4:	d00d      	beq.n	8002002 <SPI_WIFI_ReceiveData+0x72>
  WIFI_DISABLE_NSS();
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4823      	ldr	r0, [pc, #140]	; (8002078 <SPI_WIFI_ReceiveData+0xe8>)
 8001fea:	4611      	mov	r1, r2
 8001fec:	f001 f852 	bl	8003094 <HAL_GPIO_WritePin>
  return length;
 8001ff0:	e01a      	b.n	8002028 <SPI_WIFI_ReceiveData+0x98>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001ff2:	f000 fec5 	bl	8002d80 <HAL_GetTick>
 8001ff6:	1b40      	subs	r0, r0, r5
 8001ff8:	4580      	cmp	r8, r0
 8001ffa:	d2db      	bcs.n	8001fb4 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001ffc:	f06f 0602 	mvn.w	r6, #2
 8002000:	e012      	b.n	8002028 <SPI_WIFI_ReceiveData+0x98>
    if ((length < len) || (!len))
 8002002:	42af      	cmp	r7, r5
 8002004:	dc01      	bgt.n	800200a <SPI_WIFI_ReceiveData+0x7a>
 8002006:	2f00      	cmp	r7, #0
 8002008:	d1ed      	bne.n	8001fe6 <SPI_WIFI_ReceiveData+0x56>
      spi_rx_event = 1;
 800200a:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800200c:	a901      	add	r1, sp, #4
 800200e:	4650      	mov	r0, sl
      spi_rx_event = 1;
 8002010:	f8c9 2070 	str.w	r2, [r9, #112]	; 0x70
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8002014:	f002 fd32 	bl	8004a7c <HAL_SPI_Receive_IT>
 8002018:	2201      	movs	r2, #1
 800201a:	b148      	cbz	r0, 8002030 <SPI_WIFI_ReceiveData+0xa0>
        WIFI_DISABLE_NSS();
 800201c:	4816      	ldr	r0, [pc, #88]	; (8002078 <SPI_WIFI_ReceiveData+0xe8>)
 800201e:	4611      	mov	r1, r2
 8002020:	f001 f838 	bl	8003094 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8002024:	f04f 36ff 	mov.w	r6, #4294967295
}
 8002028:	4630      	mov	r0, r6
 800202a:	b003      	add	sp, #12
 800202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8002030:	f000 fea6 	bl	8002d80 <HAL_GetTick>
 8002034:	4606      	mov	r6, r0
  while (spi_rx_event == 1)
 8002036:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800203a:	2b01      	cmp	r3, #1
 800203c:	d104      	bne.n	8002048 <SPI_WIFI_ReceiveData+0xb8>
    if((HAL_GetTick() - tickstart ) > timeout)
 800203e:	f000 fe9f 	bl	8002d80 <HAL_GetTick>
 8002042:	1b80      	subs	r0, r0, r6
 8002044:	4580      	cmp	r8, r0
 8002046:	d2f6      	bcs.n	8002036 <SPI_WIFI_ReceiveData+0xa6>
      pData[0] = tmp[0];
 8002048:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800204c:	f804 3c02 	strb.w	r3, [r4, #-2]
      if (length >= ES_WIFI_DATA_SIZE) {
 8002050:	3502      	adds	r5, #2
      pData[1] = tmp[1];
 8002052:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002056:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 800205a:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 800205e:	f104 0402 	add.w	r4, r4, #2
 8002062:	d1b9      	bne.n	8001fd8 <SPI_WIFI_ReceiveData+0x48>
        WIFI_DISABLE_NSS();
 8002064:	2201      	movs	r2, #1
 8002066:	4804      	ldr	r0, [pc, #16]	; (8002078 <SPI_WIFI_ReceiveData+0xe8>)
 8002068:	4611      	mov	r1, r2
 800206a:	f001 f813 	bl	8003094 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800206e:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 8002072:	f7ff fedb 	bl	8001e2c <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002076:	e7d7      	b.n	8002028 <SPI_WIFI_ReceiveData+0x98>
 8002078:	48001000 	.word	0x48001000
 800207c:	20000500 	.word	0x20000500
 8002080:	20000508 	.word	0x20000508

08002084 <SPI_WIFI_SendData>:
{
 8002084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002088:	4605      	mov	r5, r0
 800208a:	460c      	mov	r4, r1
 800208c:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 800208e:	f000 fe77 	bl	8002d80 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002092:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800212c <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 8002096:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002098:	2102      	movs	r1, #2
 800209a:	4648      	mov	r0, r9
 800209c:	f000 fff4 	bl	8003088 <HAL_GPIO_ReadPin>
 80020a0:	2801      	cmp	r0, #1
 80020a2:	4606      	mov	r6, r0
 80020a4:	d11c      	bne.n	80020e0 <SPI_WIFI_SendData+0x5c>
  cmddata_rdy_rising_event = 1;
 80020a6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002134 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 80020aa:	4601      	mov	r1, r0
  cmddata_rdy_rising_event = 1;
 80020ac:	f8c8 006c 	str.w	r0, [r8, #108]	; 0x6c
  WIFI_ENABLE_NSS();
 80020b0:	2200      	movs	r2, #0
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <SPI_WIFI_SendData+0xa8>)
 80020b4:	f000 ffee 	bl	8003094 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80020b8:	200f      	movs	r0, #15
 80020ba:	f7ff fde9 	bl	8001c90 <SPI_WIFI_DelayUs>
  if (len > 1)
 80020be:	2c01      	cmp	r4, #1
 80020c0:	d91a      	bls.n	80020f8 <SPI_WIFI_SendData+0x74>
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80020c2:	0862      	lsrs	r2, r4, #1
 80020c4:	4629      	mov	r1, r5
 80020c6:	f108 0008 	add.w	r0, r8, #8
    spi_tx_event = 1;
 80020ca:	f8c8 6004 	str.w	r6, [r8, #4]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80020ce:	f002 fbfb 	bl	80048c8 <HAL_SPI_Transmit_IT>
 80020d2:	b170      	cbz	r0, 80020f2 <SPI_WIFI_SendData+0x6e>
      WIFI_DISABLE_NSS();
 80020d4:	2201      	movs	r2, #1
 80020d6:	4815      	ldr	r0, [pc, #84]	; (800212c <SPI_WIFI_SendData+0xa8>)
 80020d8:	4611      	mov	r1, r2
 80020da:	f000 ffdb 	bl	8003094 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 80020de:	e005      	b.n	80020ec <SPI_WIFI_SendData+0x68>
    if((HAL_GetTick() - tickstart ) > timeout)
 80020e0:	f000 fe4e 	bl	8002d80 <HAL_GetTick>
 80020e4:	eba0 0008 	sub.w	r0, r0, r8
 80020e8:	4287      	cmp	r7, r0
 80020ea:	d2d5      	bcs.n	8002098 <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	e019      	b.n	8002126 <SPI_WIFI_SendData+0xa2>
    wait_spi_tx_event(timeout);
 80020f2:	4638      	mov	r0, r7
 80020f4:	f7ff fe00 	bl	8001cf8 <wait_spi_tx_event.isra.0>
  if (len & 1)
 80020f8:	07e3      	lsls	r3, r4, #31
 80020fa:	d513      	bpl.n	8002124 <SPI_WIFI_SendData+0xa0>
    Padding[0] = pdata[len - 1];
 80020fc:	4425      	add	r5, r4
    spi_tx_event=1;
 80020fe:	2201      	movs	r2, #1
    Padding[0] = pdata[len - 1];
 8002100:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002104:	f88d 3004 	strb.w	r3, [sp, #4]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002108:	4809      	ldr	r0, [pc, #36]	; (8002130 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 800210a:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 800210e:	230a      	movs	r3, #10
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002110:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8002112:	f88d 3005 	strb.w	r3, [sp, #5]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002116:	f002 fbd7 	bl	80048c8 <HAL_SPI_Transmit_IT>
 800211a:	2800      	cmp	r0, #0
 800211c:	d1da      	bne.n	80020d4 <SPI_WIFI_SendData+0x50>
    wait_spi_tx_event(timeout);
 800211e:	4638      	mov	r0, r7
 8002120:	f7ff fdea 	bl	8001cf8 <wait_spi_tx_event.isra.0>
  return len;
 8002124:	b220      	sxth	r0, r4
}
 8002126:	b003      	add	sp, #12
 8002128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800212c:	48001000 	.word	0x48001000
 8002130:	20000508 	.word	0x20000508
 8002134:	20000500 	.word	0x20000500

08002138 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8002138:	f000 be28 	b.w	8002d8c <HAL_Delay>

0800213c <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_SPI_RxCpltCallback+0xc>)
 800213e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002140:	b10a      	cbz	r2, 8002146 <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002142:	2200      	movs	r2, #0
 8002144:	671a      	str	r2, [r3, #112]	; 0x70
  }
}
 8002146:	4770      	bx	lr
 8002148:	20000500 	.word	0x20000500

0800214c <HAL_SPI_TxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_SPI_TxCpltCallback+0xc>)
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	b10a      	cbz	r2, 8002156 <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
  }
}
 8002156:	4770      	bx	lr
 8002158:	20000500 	.word	0x20000500

0800215c <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event == 1)
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <SPI_WIFI_ISR+0x10>)
 800215e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002160:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002162:	bf04      	itt	eq
 8002164:	2200      	moveq	r2, #0
 8002166:	66da      	streq	r2, [r3, #108]	; 0x6c
   }
}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000500 	.word	0x20000500

08002170 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002170:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <WIFI_Init+0x30>)
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <WIFI_Init+0x34>)
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <WIFI_Init+0x38>)
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <WIFI_Init+0x3c>)
 800217e:	490c      	ldr	r1, [pc, #48]	; (80021b0 <WIFI_Init+0x40>)
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <WIFI_Init+0x44>)
 8002182:	f7ff faeb 	bl	800175c <ES_WIFI_RegisterBusIO>
 8002186:	b940      	cbnz	r0, 800219a <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002188:	480a      	ldr	r0, [pc, #40]	; (80021b4 <WIFI_Init+0x44>)
 800218a:	f7ff fa69 	bl	8001660 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800218e:	3800      	subs	r0, #0
 8002190:	bf18      	it	ne
 8002192:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8002194:	b003      	add	sp, #12
 8002196:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800219a:	2001      	movs	r0, #1
 800219c:	e7fa      	b.n	8002194 <WIFI_Init+0x24>
 800219e:	bf00      	nop
 80021a0:	08001f91 	.word	0x08001f91
 80021a4:	08002085 	.word	0x08002085
 80021a8:	08001f81 	.word	0x08001f81
 80021ac:	08002139 	.word	0x08002139
 80021b0:	08001efd 	.word	0x08001efd
 80021b4:	20000574 	.word	0x20000574

080021b8 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 80021b8:	b508      	push	{r3, lr}
 80021ba:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80021bc:	460a      	mov	r2, r1
 80021be:	4601      	mov	r1, r0
 80021c0:	4806      	ldr	r0, [pc, #24]	; (80021dc <WIFI_Connect+0x24>)
 80021c2:	f7ff fadd 	bl	8001780 <ES_WIFI_Connect>
 80021c6:	b930      	cbnz	r0, 80021d6 <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <WIFI_Connect+0x24>)
 80021ca:	f7ff fb35 	bl	8001838 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80021ce:	3800      	subs	r0, #0
 80021d0:	bf18      	it	ne
 80021d2:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80021d4:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80021d6:	2001      	movs	r0, #1
 80021d8:	e7fc      	b.n	80021d4 <WIFI_Connect+0x1c>
 80021da:	bf00      	nop
 80021dc:	20000574 	.word	0x20000574

080021e0 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 80021e0:	b508      	push	{r3, lr}
 80021e2:	460a      	mov	r2, r1
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if ((mac != NULL) && (0 < MacLength))
 80021e4:	b140      	cbz	r0, 80021f8 <WIFI_GetMAC_Address+0x18>
 80021e6:	b139      	cbz	r1, 80021f8 <WIFI_GetMAC_Address+0x18>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80021e8:	4601      	mov	r1, r0
 80021ea:	4804      	ldr	r0, [pc, #16]	; (80021fc <WIFI_GetMAC_Address+0x1c>)
 80021ec:	f7ff fba4 	bl	8001938 <ES_WIFI_GetMACAddress>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80021f0:	3800      	subs	r0, #0
 80021f2:	bf18      	it	ne
 80021f4:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80021f6:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80021f8:	2001      	movs	r0, #1
 80021fa:	e7fc      	b.n	80021f6 <WIFI_GetMAC_Address+0x16>
 80021fc:	20000574 	.word	0x20000574

08002200 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002200:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002202:	4604      	mov	r4, r0
 8002204:	b908      	cbnz	r0, 800220a <WIFI_GetIP_Address+0xa>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002206:	2001      	movs	r0, #1
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8002208:	bd38      	pop	{r3, r4, r5, pc}
  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 800220a:	2903      	cmp	r1, #3
 800220c:	d9fb      	bls.n	8002206 <WIFI_GetIP_Address+0x6>
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800220e:	4d05      	ldr	r5, [pc, #20]	; (8002224 <WIFI_GetIP_Address+0x24>)
 8002210:	4628      	mov	r0, r5
 8002212:	f7ff faf5 	bl	8001800 <ES_WIFI_IsConnected>
 8002216:	2801      	cmp	r0, #1
 8002218:	d1f5      	bne.n	8002206 <WIFI_GetIP_Address+0x6>
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800221a:	f8d5 30d5 	ldr.w	r3, [r5, #213]	; 0xd5
 800221e:	6023      	str	r3, [r4, #0]
      ret = WIFI_STATUS_OK;
 8002220:	2000      	movs	r0, #0
 8002222:	e7f1      	b.n	8002208 <WIFI_GetIP_Address+0x8>
 8002224:	20000574 	.word	0x20000574

08002228 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8002228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
  conn.RemotePort = port;
 800222a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800222e:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8002232:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8002236:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800223a:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002242:	bf18      	it	ne
 8002244:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8002246:	785a      	ldrb	r2, [r3, #1]
  conn.Number = (uint8_t)socket;
 8002248:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800224c:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8002250:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002254:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 8002256:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002258:	4806      	ldr	r0, [pc, #24]	; (8002274 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 800225a:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 800225c:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 8002260:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002264:	f7ff fb88 	bl	8001978 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8002268:	3800      	subs	r0, #0
 800226a:	bf18      	it	ne
 800226c:	2001      	movne	r0, #1
 800226e:	b007      	add	sp, #28
 8002270:	f85d fb04 	ldr.w	pc, [sp], #4
 8002274:	20000574 	.word	0x20000574

08002278 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8002278:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800227a:	9c04      	ldr	r4, [sp, #16]
 800227c:	e9cd 3400 	strd	r3, r4, [sp]
 8002280:	4613      	mov	r3, r2
 8002282:	460a      	mov	r2, r1
 8002284:	b2c1      	uxtb	r1, r0
 8002286:	4804      	ldr	r0, [pc, #16]	; (8002298 <WIFI_SendData+0x20>)
 8002288:	f7ff fbf6 	bl	8001a78 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 800228c:	3800      	subs	r0, #0
 800228e:	bf18      	it	ne
 8002290:	2001      	movne	r0, #1
 8002292:	b002      	add	sp, #8
 8002294:	bd10      	pop	{r4, pc}
 8002296:	bf00      	nop
 8002298:	20000574 	.word	0x20000574

0800229c <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 800229c:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800229e:	9c04      	ldr	r4, [sp, #16]
 80022a0:	e9cd 3400 	strd	r3, r4, [sp]
 80022a4:	4613      	mov	r3, r2
 80022a6:	460a      	mov	r2, r1
 80022a8:	b2c1      	uxtb	r1, r0
 80022aa:	4804      	ldr	r0, [pc, #16]	; (80022bc <WIFI_ReceiveData+0x20>)
 80022ac:	f7ff fc66 	bl	8001b7c <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 80022b0:	3800      	subs	r0, #0
 80022b2:	bf18      	it	ne
 80022b4:	2001      	movne	r0, #1
 80022b6:	b002      	add	sp, #8
 80022b8:	bd10      	pop	{r4, pc}
 80022ba:	bf00      	nop
 80022bc:	20000574 	.word	0x20000574

080022c0 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 80022c0:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022c2:	4a2a      	ldr	r2, [pc, #168]	; (800236c <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80022c4:	4c2a      	ldr	r4, [pc, #168]	; (8002370 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022c8:	4d2b      	ldr	r5, [pc, #172]	; (8002378 <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022ca:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022cc:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022d0:	2201      	movs	r2, #1
 80022d2:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 80022d6:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022da:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022de:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80022e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 80022e8:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80022f2:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022f4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80022f8:	2312      	movs	r3, #18
 80022fa:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80022fe:	2003      	movs	r0, #3
 8002300:	2304      	movs	r3, #4
 8002302:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002306:	a903      	add	r1, sp, #12
 8002308:	481c      	ldr	r0, [pc, #112]	; (800237c <I2Cx_Init.constprop.0+0xbc>)
 800230a:	f000 fddf 	bl	8002ecc <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800230e:	a903      	add	r1, sp, #12
 8002310:	481a      	ldr	r0, [pc, #104]	; (800237c <I2Cx_Init.constprop.0+0xbc>)
 8002312:	f000 fddb 	bl	8002ecc <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002316:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800231c:	65ab      	str	r3, [r5, #88]	; 0x58
 800231e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8002328:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800232a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800232e:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002330:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002332:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002336:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002338:	4632      	mov	r2, r6
 800233a:	210f      	movs	r1, #15
 800233c:	2021      	movs	r0, #33	; 0x21
 800233e:	f000 fd4b 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002342:	2021      	movs	r0, #33	; 0x21
 8002344:	f000 fd7a 	bl	8002e3c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002348:	4632      	mov	r2, r6
 800234a:	210f      	movs	r1, #15
 800234c:	2022      	movs	r0, #34	; 0x22
 800234e:	f000 fd43 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002352:	2022      	movs	r0, #34	; 0x22
 8002354:	f000 fd72 	bl	8002e3c <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8002358:	4620      	mov	r0, r4
 800235a:	f000 ffd3 	bl	8003304 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800235e:	4631      	mov	r1, r6
 8002360:	4620      	mov	r0, r4
}
 8002362:	b008      	add	sp, #32
 8002364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002368:	f001 b9f0 	b.w	800374c <HAL_I2CEx_ConfigAnalogFilter>
 800236c:	40005800 	.word	0x40005800
 8002370:	20000e74 	.word	0x20000e74
 8002374:	00702681 	.word	0x00702681
 8002378:	40021000 	.word	0x40021000
 800237c:	48000400 	.word	0x48000400

08002380 <BSP_LED_Init>:
{
 8002380:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002382:	b948      	cbnz	r0, 8002398 <BSP_LED_Init+0x18>
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <BSP_LED_Init+0x3c>)
 8002386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002388:	f042 0202 	orr.w	r2, r2, #2
 800238c:	64da      	str	r2, [r3, #76]	; 0x4c
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002398:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800239c:	2301      	movs	r3, #1
 800239e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a2:	2100      	movs	r1, #0
 80023a4:	2302      	movs	r3, #2
 80023a6:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <BSP_LED_Init+0x40>)
 80023ac:	a901      	add	r1, sp, #4
 80023ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80023b2:	f000 fd8b 	bl	8002ecc <HAL_GPIO_Init>
}
 80023b6:	b007      	add	sp, #28
 80023b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80023bc:	40021000 	.word	0x40021000
 80023c0:	20000004 	.word	0x20000004

080023c4 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <BSP_LED_On+0x10>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80023cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023d0:	f000 be60 	b.w	8003094 <HAL_GPIO_WritePin>
 80023d4:	20000004 	.word	0x20000004

080023d8 <BSP_COM_Init>:
{
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	460d      	mov	r5, r1
 80023dc:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80023de:	b9d8      	cbnz	r0, 8002418 <BSP_COM_Init+0x40>
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <BSP_COM_Init+0x80>)
 80023e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023e4:	f042 0202 	orr.w	r2, r2, #2
 80023e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80023ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023ec:	f002 0202 	and.w	r2, r2, #2
 80023f0:	9200      	str	r2, [sp, #0]
 80023f2:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80023f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f6:	f042 0202 	orr.w	r2, r2, #2
 80023fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80023fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023fe:	f002 0202 	and.w	r2, r2, #2
 8002402:	9201      	str	r2, [sp, #4]
 8002404:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002406:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240c:	661a      	str	r2, [r3, #96]	; 0x60
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002414:	9302      	str	r3, [sp, #8]
 8002416:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002418:	4c10      	ldr	r4, [pc, #64]	; (800245c <BSP_COM_Init+0x84>)
 800241a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800241e:	2602      	movs	r6, #2
 8002420:	2340      	movs	r3, #64	; 0x40
 8002422:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002426:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002428:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800242c:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800242e:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002430:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002432:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002434:	f000 fd4a 	bl	8002ecc <HAL_GPIO_Init>
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002438:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800243a:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800243c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800243e:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002440:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002444:	f000 fd42 	bl	8002ecc <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8002448:	6923      	ldr	r3, [r4, #16]
 800244a:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 800244c:	4628      	mov	r0, r5
 800244e:	f003 f8d4 	bl	80055fa <HAL_UART_Init>
}
 8002452:	b009      	add	sp, #36	; 0x24
 8002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	20000004 	.word	0x20000004

08002460 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8002460:	f7ff bf2e 	b.w	80022c0 <I2Cx_Init.constprop.0>

08002464 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002466:	2301      	movs	r3, #1
{
 8002468:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800246c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002470:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002474:	f10d 0217 	add.w	r2, sp, #23
 8002478:	9200      	str	r2, [sp, #0]
 800247a:	460a      	mov	r2, r1
 800247c:	4601      	mov	r1, r0
 800247e:	4806      	ldr	r0, [pc, #24]	; (8002498 <SENSOR_IO_Write+0x34>)
 8002480:	f000 ffac 	bl	80033dc <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8002484:	b120      	cbz	r0, 8002490 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8002486:	4804      	ldr	r0, [pc, #16]	; (8002498 <SENSOR_IO_Write+0x34>)
 8002488:	f000 ff8e 	bl	80033a8 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 800248c:	f7ff ff18 	bl	80022c0 <I2Cx_Init.constprop.0>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8002490:	b007      	add	sp, #28
 8002492:	f85d fb04 	ldr.w	pc, [sp], #4
 8002496:	bf00      	nop
 8002498:	20000e74 	.word	0x20000e74

0800249c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800249c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 800249e:	2300      	movs	r3, #0
{
 80024a0:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80024a2:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024aa:	2301      	movs	r3, #1
 80024ac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80024b0:	f10d 0117 	add.w	r1, sp, #23
 80024b4:	9100      	str	r1, [sp, #0]
 80024b6:	4601      	mov	r1, r0
 80024b8:	4806      	ldr	r0, [pc, #24]	; (80024d4 <SENSOR_IO_Read+0x38>)
 80024ba:	f001 f869 	bl	8003590 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80024be:	b120      	cbz	r0, 80024ca <SENSOR_IO_Read+0x2e>
  HAL_I2C_DeInit(i2c_handler);
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <SENSOR_IO_Read+0x38>)
 80024c2:	f000 ff71 	bl	80033a8 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80024c6:	f7ff fefb 	bl	80022c0 <I2Cx_Init.constprop.0>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 80024ca:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80024ce:	b007      	add	sp, #28
 80024d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80024d4:	20000e74 	.word	0x20000e74

080024d8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80024d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024da:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80024de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80024e2:	9200      	str	r2, [sp, #0]
 80024e4:	2301      	movs	r3, #1
 80024e6:	460a      	mov	r2, r1
 80024e8:	4601      	mov	r1, r0
 80024ea:	4806      	ldr	r0, [pc, #24]	; (8002504 <SENSOR_IO_ReadMultiple+0x2c>)
 80024ec:	f001 f850 	bl	8003590 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80024f0:	4604      	mov	r4, r0
 80024f2:	b120      	cbz	r0, 80024fe <SENSOR_IO_ReadMultiple+0x26>
  HAL_I2C_DeInit(i2c_handler);
 80024f4:	4803      	ldr	r0, [pc, #12]	; (8002504 <SENSOR_IO_ReadMultiple+0x2c>)
 80024f6:	f000 ff57 	bl	80033a8 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80024fa:	f7ff fee1 	bl	80022c0 <I2Cx_Init.constprop.0>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80024fe:	b2a0      	uxth	r0, r4
 8002500:	b004      	add	sp, #16
 8002502:	bd10      	pop	{r4, pc}
 8002504:	20000e74 	.word	0x20000e74

08002508 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002508:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800250a:	4c07      	ldr	r4, [pc, #28]	; (8002528 <BSP_ACCELERO_Init+0x20>)
 800250c:	68a3      	ldr	r3, [r4, #8]
 800250e:	4798      	blx	r3
 8002510:	286a      	cmp	r0, #106	; 0x6a
 8002512:	d107      	bne.n	8002524 <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002516:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 800251a:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002520:	2000      	movs	r0, #0
  }  

  return ret;
}
 8002522:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8002524:	2001      	movs	r0, #1
 8002526:	e7fc      	b.n	8002522 <BSP_ACCELERO_Init+0x1a>
 8002528:	200000b8 	.word	0x200000b8
 800252c:	20000f4c 	.word	0x20000f4c

08002530 <BSP_ACCELERO_DeInit>:
  * @retval None.
  */
void BSP_ACCELERO_DeInit(void)
{
  /* DeInitialize the accelerometer IO interfaces */
  if(AccelerometerDrv != NULL)
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <BSP_ACCELERO_DeInit+0x10>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b113      	cbz	r3, 800253c <BSP_ACCELERO_DeInit+0xc>
  {
    if(AccelerometerDrv->DeInit != NULL)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	b103      	cbz	r3, 800253c <BSP_ACCELERO_DeInit+0xc>
    {
      AccelerometerDrv->DeInit();
 800253a:	4718      	bx	r3
    }
  }
}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000f4c 	.word	0x20000f4c

08002544 <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <BSP_ACCELERO_AccGetXYZ+0x10>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	b113      	cbz	r3, 8002550 <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	b103      	cbz	r3, 8002550 <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800254e:	4718      	bx	r3
    }
  }
}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000f4c 	.word	0x20000f4c

08002558 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002558:	b510      	push	{r4, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800255a:	4c07      	ldr	r4, [pc, #28]	; (8002578 <BSP_GYRO_Init+0x20>)
 800255c:	68a3      	ldr	r3, [r4, #8]
 800255e:	4798      	blx	r3
 8002560:	286a      	cmp	r0, #106	; 0x6a
 8002562:	d107      	bne.n	8002574 <BSP_GYRO_Init+0x1c>
    ret = GYRO_ERROR;
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <BSP_GYRO_Init+0x24>)

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002566:	f244 403c 	movw	r0, #17468	; 0x443c
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800256a:	601c      	str	r4, [r3, #0]
    GyroscopeDrv->Init(ctrl);
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002570:	2000      	movs	r0, #0
  }
  
  return ret;
}
 8002572:	bd10      	pop	{r4, pc}
    ret = GYRO_ERROR;
 8002574:	2001      	movs	r0, #1
 8002576:	e7fc      	b.n	8002572 <BSP_GYRO_Init+0x1a>
 8002578:	20000084 	.word	0x20000084
 800257c:	20000f50 	.word	0x20000f50

08002580 <BSP_GYRO_DeInit>:
  * @brief  DeInitialize Gyroscope.
  */
void BSP_GYRO_DeInit(void)
{
  /* DeInitialize the Gyroscope IO interfaces */
  if(GyroscopeDrv != NULL)
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <BSP_GYRO_DeInit+0x10>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b113      	cbz	r3, 800258c <BSP_GYRO_DeInit+0xc>
  {
    if(GyroscopeDrv->DeInit!= NULL)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	b103      	cbz	r3, 800258c <BSP_GYRO_DeInit+0xc>
    {
      GyroscopeDrv->DeInit();
 800258a:	4718      	bx	r3
    }
  }
}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000f50 	.word	0x20000f50

08002594 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv != NULL)
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <BSP_GYRO_GetXYZ+0x10>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b113      	cbz	r3, 80025a0 <BSP_GYRO_GetXYZ+0xc>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	b103      	cbz	r3, 80025a0 <BSP_GYRO_GetXYZ+0xc>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800259e:	4718      	bx	r3
    }
  }
}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000f50 	.word	0x20000f50

080025a8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80025a8:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80025aa:	4c07      	ldr	r4, [pc, #28]	; (80025c8 <BSP_HSENSOR_Init+0x20>)
 80025ac:	20be      	movs	r0, #190	; 0xbe
 80025ae:	6863      	ldr	r3, [r4, #4]
 80025b0:	4798      	blx	r3
 80025b2:	28bc      	cmp	r0, #188	; 0xbc
 80025b4:	d106      	bne.n	80025c4 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80025b8:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 80025ba:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	4798      	blx	r3
    ret = HSENSOR_OK;
 80025c0:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80025c2:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 80025c4:	2001      	movs	r0, #1
  return ret;
 80025c6:	e7fc      	b.n	80025c2 <BSP_HSENSOR_Init+0x1a>
 80025c8:	20000028 	.word	0x20000028
 80025cc:	20000f54 	.word	0x20000f54

080025d0 <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80025d0:	4b02      	ldr	r3, [pc, #8]	; (80025dc <BSP_HSENSOR_ReadHumidity+0xc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	20be      	movs	r0, #190	; 0xbe
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4718      	bx	r3
 80025da:	bf00      	nop
 80025dc:	20000f54 	.word	0x20000f54

080025e0 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80025e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80025e2:	4d0f      	ldr	r5, [pc, #60]	; (8002620 <BSP_MAGNETO_Init+0x40>)
 80025e4:	68ab      	ldr	r3, [r5, #8]
 80025e6:	4798      	blx	r3
 80025e8:	283d      	cmp	r0, #61	; 0x3d
 80025ea:	d117      	bne.n	800261c <BSP_MAGNETO_Init+0x3c>
    ret = MAGNETO_ERROR;
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <BSP_MAGNETO_Init+0x44>)
 80025ee:	601d      	str	r5, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80025f0:	2358      	movs	r3, #88	; 0x58
 80025f2:	f88d 3000 	strb.w	r3, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80025f6:	2308      	movs	r3, #8
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80025f8:	2400      	movs	r4, #0
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80025fa:	f88d 3003 	strb.w	r3, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80025fe:	2340      	movs	r3, #64	; 0x40
 8002600:	f88d 3004 	strb.w	r3, [sp, #4]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002604:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002608:	f88d 4002 	strb.w	r4, [sp, #2]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800260c:	aa02      	add	r2, sp, #8
 800260e:	e912 0003 	ldmdb	r2, {r0, r1}
 8002612:	682b      	ldr	r3, [r5, #0]
 8002614:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002616:	4620      	mov	r0, r4
  } 

  return ret;  
}
 8002618:	b003      	add	sp, #12
 800261a:	bd30      	pop	{r4, r5, pc}
    ret = MAGNETO_ERROR;
 800261c:	2001      	movs	r0, #1
 800261e:	e7fb      	b.n	8002618 <BSP_MAGNETO_Init+0x38>
 8002620:	20000034 	.word	0x20000034
 8002624:	20000f58 	.word	0x20000f58

08002628 <BSP_MAGNETO_DeInit>:
  * @brief  DeInitialize the MAGNETO.
  */
void BSP_MAGNETO_DeInit(void)
{
  /* DeInitialize the  magnetometer IO interfaces */
  if(MagnetoDrv != NULL)
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <BSP_MAGNETO_DeInit+0x10>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b113      	cbz	r3, 8002634 <BSP_MAGNETO_DeInit+0xc>
  {
    if(MagnetoDrv->DeInit != NULL)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	b103      	cbz	r3, 8002634 <BSP_MAGNETO_DeInit+0xc>
    {
      MagnetoDrv->DeInit();
 8002632:	4718      	bx	r3
    }
  }
}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000f58 	.word	0x20000f58

0800263c <BSP_MAGNETO_GetXYZ>:
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
  if(MagnetoDrv != NULL)
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <BSP_MAGNETO_GetXYZ+0x10>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b113      	cbz	r3, 8002648 <BSP_MAGNETO_GetXYZ+0xc>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	b103      	cbz	r3, 8002648 <BSP_MAGNETO_GetXYZ+0xc>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002646:	4718      	bx	r3
    }
  }
}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000f58 	.word	0x20000f58

08002650 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002650:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002652:	4c07      	ldr	r4, [pc, #28]	; (8002670 <BSP_PSENSOR_Init+0x20>)
 8002654:	20ba      	movs	r0, #186	; 0xba
 8002656:	6863      	ldr	r3, [r4, #4]
 8002658:	4798      	blx	r3
 800265a:	28b1      	cmp	r0, #177	; 0xb1
 800265c:	d106      	bne.n	800266c <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002660:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 8002662:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002668:	2000      	movs	r0, #0
  }
  
  return ret;
}
 800266a:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 800266c:	2001      	movs	r0, #1
  return ret;
 800266e:	e7fc      	b.n	800266a <BSP_PSENSOR_Init+0x1a>
 8002670:	20000078 	.word	0x20000078
 8002674:	20000f5c 	.word	0x20000f5c

08002678 <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002678:	4b02      	ldr	r3, [pc, #8]	; (8002684 <BSP_PSENSOR_ReadPressure+0xc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	20ba      	movs	r0, #186	; 0xba
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4718      	bx	r3
 8002682:	bf00      	nop
 8002684:	20000f5c 	.word	0x20000f5c

08002688 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002688:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800268a:	4c06      	ldr	r4, [pc, #24]	; (80026a4 <BSP_TSENSOR_Init+0x1c>)
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <BSP_TSENSOR_Init+0x20>)
 800268e:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002690:	f7ff fee6 	bl	8002460 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	2100      	movs	r1, #0
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	20be      	movs	r0, #190	; 0xbe
 800269c:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 800269e:	2000      	movs	r0, #0
 80026a0:	bd10      	pop	{r4, pc}
 80026a2:	bf00      	nop
 80026a4:	20000f60 	.word	0x20000f60
 80026a8:	20000018 	.word	0x20000018

080026ac <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <BSP_TSENSOR_ReadTemp+0xc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	20be      	movs	r0, #190	; 0xbe
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4718      	bx	r3
 80026b6:	bf00      	nop
 80026b8:	20000f60 	.word	0x20000f60

080026bc <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80026bc:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80026be:	b2c4      	uxtb	r4, r0
 80026c0:	2120      	movs	r1, #32
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff feea 	bl	800249c <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80026c8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80026cc:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 80026d0:	2120      	movs	r1, #32
 80026d2:	4620      	mov	r0, r4
}
 80026d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80026d8:	f7ff bec4 	b.w	8002464 <SENSOR_IO_Write>

080026dc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80026dc:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80026de:	b2c4      	uxtb	r4, r0
 80026e0:	2120      	movs	r1, #32
 80026e2:	4620      	mov	r0, r4
 80026e4:	f7ff feda 	bl	800249c <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80026e8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80026ec:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 80026f0:	2120      	movs	r1, #32
 80026f2:	4620      	mov	r0, r4
}
 80026f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80026f8:	f7ff beb4 	b.w	8002464 <SENSOR_IO_Write>

080026fc <HTS221_H_ReadID>:
{  
 80026fc:	b510      	push	{r4, lr}
 80026fe:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8002700:	f7ff feae 	bl	8002460 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002704:	b2e0      	uxtb	r0, r4
 8002706:	210f      	movs	r1, #15
}
 8002708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800270c:	f7ff bec6 	b.w	800249c <SENSOR_IO_Read>

08002710 <HTS221_H_ReadHumidity>:
{
 8002710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002714:	b2c6      	uxtb	r6, r0
 8002716:	2302      	movs	r3, #2
 8002718:	aa01      	add	r2, sp, #4
 800271a:	21b0      	movs	r1, #176	; 0xb0
 800271c:	4630      	mov	r0, r6
 800271e:	f7ff fedb 	bl	80024d8 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002722:	2302      	movs	r3, #2
 8002724:	aa01      	add	r2, sp, #4
 8002726:	21b6      	movs	r1, #182	; 0xb6
 8002728:	4630      	mov	r0, r6
  H0_rh = buffer[0] >> 1;
 800272a:	f89d 5004 	ldrb.w	r5, [sp, #4]
  H1_rh = buffer[1] >> 1;
 800272e:	f89d 4005 	ldrb.w	r4, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002732:	f7ff fed1 	bl	80024d8 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002736:	2302      	movs	r3, #2
 8002738:	aa01      	add	r2, sp, #4
 800273a:	21ba      	movs	r1, #186	; 0xba
 800273c:	4630      	mov	r0, r6
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800273e:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002742:	f7ff fec9 	bl	80024d8 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002746:	2302      	movs	r3, #2
 8002748:	aa01      	add	r2, sp, #4
 800274a:	21a8      	movs	r1, #168	; 0xa8
 800274c:	4630      	mov	r0, r6
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800274e:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002752:	f7ff fec1 	bl	80024d8 <SENSOR_IO_ReadMultiple>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002756:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800275a:	eba3 0308 	sub.w	r3, r3, r8
 800275e:	ee07 3a10 	vmov	s14, r3
  H0_rh = buffer[0] >> 1;
 8002762:	086d      	lsrs	r5, r5, #1
  H1_rh = buffer[1] >> 1;
 8002764:	0864      	lsrs	r4, r4, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002766:	1b63      	subs	r3, r4, r5
 8002768:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800276c:	ee07 3a10 	vmov	s14, r3
 8002770:	eba7 0708 	sub.w	r7, r7, r8
 8002774:	ee07 7a90 	vmov	s15, r7
 8002778:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800277c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002780:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002788:	ee07 5a10 	vmov	s14, r5
 800278c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
        : ( tmp_f <    0.0f ) ?    0.0f
 8002790:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80027c8 <HTS221_H_ReadHumidity+0xb8>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002794:	ee77 7a80 	vadd.f32	s15, s15, s0
  tmp_f *= 10.0f;
 8002798:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800279c:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 80027a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	dc07      	bgt.n	80027ba <HTS221_H_ReadHumidity+0xaa>
        : tmp_f;
 80027aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b2:	d504      	bpl.n	80027be <HTS221_H_ReadHumidity+0xae>
 80027b4:	eddf 7a05 	vldr	s15, [pc, #20]	; 80027cc <HTS221_H_ReadHumidity+0xbc>
 80027b8:	e001      	b.n	80027be <HTS221_H_ReadHumidity+0xae>
        : ( tmp_f <    0.0f ) ?    0.0f
 80027ba:	eef0 7a47 	vmov.f32	s15, s14
}
 80027be:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80027c2:	b002      	add	sp, #8
 80027c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027c8:	447a0000 	.word	0x447a0000
 80027cc:	00000000 	.word	0x00000000

080027d0 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80027d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80027d4:	b2c6      	uxtb	r6, r0
 80027d6:	aa01      	add	r2, sp, #4
 80027d8:	2302      	movs	r3, #2
 80027da:	21b2      	movs	r1, #178	; 0xb2
 80027dc:	4630      	mov	r0, r6
 80027de:	f7ff fe7b 	bl	80024d8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80027e2:	2135      	movs	r1, #53	; 0x35
 80027e4:	4630      	mov	r0, r6
 80027e6:	f7ff fe59 	bl	800249c <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80027ea:	0205      	lsls	r5, r0, #8
 80027ec:	f405 7340 	and.w	r3, r5, #768	; 0x300
 80027f0:	f89d 5004 	ldrb.w	r5, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80027f4:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80027f8:	0180      	lsls	r0, r0, #6
  T0_degC = T0_degC_x8_u16 >> 3;
 80027fa:	431d      	orrs	r5, r3
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80027fc:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T1_degC = T1_degC_x8_u16 >> 3;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002800:	2304      	movs	r3, #4
 8002802:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8002806:	4304      	orrs	r4, r0
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002808:	21bc      	movs	r1, #188	; 0xbc
 800280a:	4630      	mov	r0, r6
 800280c:	f7ff fe64 	bl	80024d8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002810:	2302      	movs	r3, #2
 8002812:	aa01      	add	r2, sp, #4
 8002814:	21aa      	movs	r1, #170	; 0xaa
 8002816:	4630      	mov	r0, r6
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002818:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800281c:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002820:	f7ff fe5a 	bl	80024d8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002824:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8002828:	eba3 0308 	sub.w	r3, r3, r8
 800282c:	ee07 3a90 	vmov	s15, r3
  T0_degC = T0_degC_x8_u16 >> 3;
 8002830:	08ed      	lsrs	r5, r5, #3
  T1_degC = T1_degC_x8_u16 >> 3;
 8002832:	08e4      	lsrs	r4, r4, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002834:	1b64      	subs	r4, r4, r5
 8002836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800283a:	ee07 4a90 	vmov	s15, r4
 800283e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002842:	eba7 0708 	sub.w	r7, r7, r8
 8002846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284a:	ee07 7a10 	vmov	s14, r7
 800284e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002852:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002856:	ee07 5a90 	vmov	s15, r5
 800285a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 800285e:	ee36 0a80 	vadd.f32	s0, s13, s0
 8002862:	b002      	add	sp, #8
 8002864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002868 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002868:	b507      	push	{r0, r1, r2, lr}
 800286a:	ab02      	add	r3, sp, #8
 800286c:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002870:	2120      	movs	r1, #32
 8002872:	f89d 2000 	ldrb.w	r2, [sp]
 8002876:	203c      	movs	r0, #60	; 0x3c
 8002878:	f7ff fdf4 	bl	8002464 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800287c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002880:	2121      	movs	r1, #33	; 0x21
 8002882:	203c      	movs	r0, #60	; 0x3c
 8002884:	f7ff fdee 	bl	8002464 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002888:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800288c:	2122      	movs	r1, #34	; 0x22
 800288e:	203c      	movs	r0, #60	; 0x3c
 8002890:	f7ff fde8 	bl	8002464 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002894:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002898:	2123      	movs	r1, #35	; 0x23
 800289a:	203c      	movs	r0, #60	; 0x3c
 800289c:	f7ff fde2 	bl	8002464 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80028a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80028a4:	2124      	movs	r1, #36	; 0x24
 80028a6:	203c      	movs	r0, #60	; 0x3c
}
 80028a8:	b003      	add	sp, #12
 80028aa:	f85d eb04 	ldr.w	lr, [sp], #4
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80028ae:	f7ff bdd9 	b.w	8002464 <SENSOR_IO_Write>

080028b2 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80028b2:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80028b4:	2122      	movs	r1, #34	; 0x22
 80028b6:	203c      	movs	r0, #60	; 0x3c
 80028b8:	f7ff fdf0 	bl	800249c <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80028bc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80028c0:	f040 0203 	orr.w	r2, r0, #3
}
 80028c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80028c8:	2122      	movs	r1, #34	; 0x22
 80028ca:	203c      	movs	r0, #60	; 0x3c
 80028cc:	f7ff bdca 	b.w	8002464 <SENSOR_IO_Write>

080028d0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80028d0:	b510      	push	{r4, lr}
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80028d2:	2122      	movs	r1, #34	; 0x22
{  
 80028d4:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80028d6:	203c      	movs	r0, #60	; 0x3c
 80028d8:	f7ff fde0 	bl	800249c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80028dc:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 80028e0:	b10c      	cbz	r4, 80028e6 <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80028e2:	f042 0220 	orr.w	r2, r2, #32
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
}
 80028e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80028ea:	2122      	movs	r1, #34	; 0x22
 80028ec:	203c      	movs	r0, #60	; 0x3c
 80028ee:	f7ff bdb9 	b.w	8002464 <SENSOR_IO_Write>

080028f2 <LIS3MDL_MagReadID>:
{
 80028f2:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 80028f4:	f7ff fdb4 	bl	8002460 <SENSOR_IO_Init>
}
 80028f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80028fc:	210f      	movs	r1, #15
 80028fe:	203c      	movs	r0, #60	; 0x3c
 8002900:	f7ff bdcc 	b.w	800249c <SENSOR_IO_Read>

08002904 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002904:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002906:	2121      	movs	r1, #33	; 0x21
{
 8002908:	b085      	sub	sp, #20
 800290a:	4605      	mov	r5, r0
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800290c:	203c      	movs	r0, #60	; 0x3c
 800290e:	f7ff fdc5 	bl	800249c <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002912:	2306      	movs	r3, #6
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002914:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002916:	aa02      	add	r2, sp, #8
 8002918:	21a8      	movs	r1, #168	; 0xa8
 800291a:	203c      	movs	r0, #60	; 0x3c
 800291c:	f7ff fddc 	bl	80024d8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002920:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002924:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002928:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800292c:	f8ad 3000 	strh.w	r3, [sp]
 8002930:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002934:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002938:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800293c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002940:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002944:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002948:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800294c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002950:	2c40      	cmp	r4, #64	; 0x40
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002952:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlm & 0x60)
 8002956:	d024      	beq.n	80029a2 <LIS3MDL_MagReadXYZ+0x9e>
 8002958:	d81d      	bhi.n	8002996 <LIS3MDL_MagReadXYZ+0x92>
 800295a:	b32c      	cbz	r4, 80029a8 <LIS3MDL_MagReadXYZ+0xa4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
    break;
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800295c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80029b0 <LIS3MDL_MagReadXYZ+0xac>
 8002960:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80029b4 <LIS3MDL_MagReadXYZ+0xb0>
 8002964:	2c20      	cmp	r4, #32
    break;
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
    break;
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002966:	bf08      	it	eq
 8002968:	eef0 7a47 	vmoveq.f32	s15, s14
    break;    
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800296c:	1eab      	subs	r3, r5, #2
 800296e:	466a      	mov	r2, sp
 8002970:	3504      	adds	r5, #4
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002972:	f932 1b02 	ldrsh.w	r1, [r2], #2
 8002976:	ee07 1a10 	vmov	s14, r1
 800297a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800297e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002982:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002986:	ee17 1a10 	vmov	r1, s14
 800298a:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 800298e:	429d      	cmp	r5, r3
 8002990:	d1ef      	bne.n	8002972 <LIS3MDL_MagReadXYZ+0x6e>
  }
}
 8002992:	b005      	add	sp, #20
 8002994:	bd30      	pop	{r4, r5, pc}
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002996:	eddf 7a06 	vldr	s15, [pc, #24]	; 80029b0 <LIS3MDL_MagReadXYZ+0xac>
 800299a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029b8 <LIS3MDL_MagReadXYZ+0xb4>
 800299e:	2c60      	cmp	r4, #96	; 0x60
 80029a0:	e7e1      	b.n	8002966 <LIS3MDL_MagReadXYZ+0x62>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80029a2:	eddf 7a06 	vldr	s15, [pc, #24]	; 80029bc <LIS3MDL_MagReadXYZ+0xb8>
 80029a6:	e7e1      	b.n	800296c <LIS3MDL_MagReadXYZ+0x68>
  switch(ctrlm & 0x60)
 80029a8:	eddf 7a05 	vldr	s15, [pc, #20]	; 80029c0 <LIS3MDL_MagReadXYZ+0xbc>
 80029ac:	e7de      	b.n	800296c <LIS3MDL_MagReadXYZ+0x68>
 80029ae:	bf00      	nop
 80029b0:	00000000 	.word	0x00000000
 80029b4:	3e947ae1 	.word	0x3e947ae1
 80029b8:	3f147ae1 	.word	0x3f147ae1
 80029bc:	3edc28f6 	.word	0x3edc28f6
 80029c0:	3e0f5c29 	.word	0x3e0f5c29

080029c4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80029c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80029c6:	b2c4      	uxtb	r4, r0
 80029c8:	2128      	movs	r1, #40	; 0x28
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff fd66 	bl	800249c <SENSOR_IO_Read>
 80029d0:	2129      	movs	r1, #41	; 0x29
 80029d2:	4605      	mov	r5, r0
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fd61 	bl	800249c <SENSOR_IO_Read>
 80029da:	212a      	movs	r1, #42	; 0x2a
 80029dc:	4606      	mov	r6, r0
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff fd5c 	bl	800249c <SENSOR_IO_Read>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80029e4:	0402      	lsls	r2, r0, #16
 80029e6:	ea42 2306 	orr.w	r3, r2, r6, lsl #8
 80029ea:	ea43 0005 	orr.w	r0, r3, r5

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80029ee:	0203      	lsls	r3, r0, #8
    tmp |= 0xFF000000;
 80029f0:	bf48      	it	mi
 80029f2:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 80029f6:	2364      	movs	r3, #100	; 0x64
 80029f8:	4358      	muls	r0, r3
 80029fa:	bf48      	it	mi
 80029fc:	f600 70ff 	addwmi	r0, r0, #4095	; 0xfff
 8002a00:	1300      	asrs	r0, r0, #12

  return (float)((float)raw_press / 100.0f);
 8002a02:	ee07 0a90 	vmov	s15, r0
}
 8002a06:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8002a14 <LPS22HB_P_ReadPressure+0x50>
  return (float)((float)raw_press / 100.0f);
 8002a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002a0e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	42c80000 	.word	0x42c80000

08002a18 <LPS22HB_T_ReadTemp>:
  * @brief  Read temperature value of LPS22HB
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float LPS22HB_T_ReadTemp(uint16_t DeviceAddr)
{
 8002a18:	b538      	push	{r3, r4, r5, lr}
  uint16_t tmp;
  uint8_t i;

  for(i = 0; i < 2; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_TEMP_OUT_L_REG + i));
 8002a1a:	b2c5      	uxtb	r5, r0
 8002a1c:	212b      	movs	r1, #43	; 0x2b
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f7ff fd3c 	bl	800249c <SENSOR_IO_Read>
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	4604      	mov	r4, r0
 8002a28:	4628      	mov	r0, r5
 8002a2a:	f7ff fd37 	bl	800249c <SENSOR_IO_Read>
  }

  /* Build the raw tmp */
  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 8002a2e:	eb04 2400 	add.w	r4, r4, r0, lsl #8

  raw_data = (tmp * 10) / 100;
 8002a32:	b2a4      	uxth	r4, r4
 8002a34:	200a      	movs	r0, #10
 8002a36:	fbb4 f4f0 	udiv	r4, r4, r0
  
  return ((float)(raw_data / 10.0f));
 8002a3a:	b224      	sxth	r4, r4
 8002a3c:	ee07 4a90 	vmov	s15, r4
 8002a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002a44:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002a48:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002a4c:	bd38      	pop	{r3, r4, r5, pc}

08002a4e <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002a4e:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002a50:	b2c4      	uxtb	r4, r0
 8002a52:	211a      	movs	r1, #26
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7ff fd21 	bl	800249c <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8002a5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002a5e:	f040 0201 	orr.w	r2, r0, #1
 8002a62:	211a      	movs	r1, #26
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff fcfd 	bl	8002464 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002a6a:	2110      	movs	r1, #16
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f7ff fd15 	bl	800249c <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002a72:	f000 008d 	and.w	r0, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002a76:	f040 0232 	orr.w	r2, r0, #50	; 0x32
 8002a7a:	2110      	movs	r1, #16
 8002a7c:	4620      	mov	r0, r4
}  
 8002a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002a82:	f7ff bcef 	b.w	8002464 <SENSOR_IO_Write>

08002a86 <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 8002a86:	f7ff bfe2 	b.w	8002a4e <LPS22HB_Init>

08002a8a <LPS22HB_T_Init>:
  LPS22HB_Init(DeviceAddr);
 8002a8a:	f7ff bfe0 	b.w	8002a4e <LPS22HB_Init>

08002a8e <LPS22HB_P_ReadID>:
{  
 8002a8e:	b510      	push	{r4, lr}
 8002a90:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 8002a92:	f7ff fce5 	bl	8002460 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002a96:	b2e0      	uxtb	r0, r4
 8002a98:	210f      	movs	r1, #15
}
 8002a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002a9e:	f7ff bcfd 	b.w	800249c <SENSOR_IO_Read>

08002aa2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002aa2:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002aa4:	2110      	movs	r1, #16
{  
 8002aa6:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002aa8:	20d4      	movs	r0, #212	; 0xd4
 8002aaa:	f7ff fcf7 	bl	800249c <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8002aae:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8002ab2:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	2110      	movs	r1, #16
 8002ab8:	20d4      	movs	r0, #212	; 0xd4
 8002aba:	f7ff fcd3 	bl	8002464 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002abe:	2112      	movs	r1, #18
 8002ac0:	20d4      	movs	r0, #212	; 0xd4
 8002ac2:	f7ff fceb 	bl	800249c <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8002ac6:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002aca:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 8002ace:	2112      	movs	r1, #18
}
 8002ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002ad4:	20d4      	movs	r0, #212	; 0xd4
 8002ad6:	f7ff bcc5 	b.w	8002464 <SENSOR_IO_Write>

08002ada <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002ada:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002adc:	2110      	movs	r1, #16
 8002ade:	20d4      	movs	r0, #212	; 0xd4
 8002ae0:	f7ff fcdc 	bl	800249c <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
}
 8002ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002ae8:	f000 020f 	and.w	r2, r0, #15
 8002aec:	2110      	movs	r1, #16
 8002aee:	20d4      	movs	r0, #212	; 0xd4
 8002af0:	f7ff bcb8 	b.w	8002464 <SENSOR_IO_Write>

08002af4 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002af4:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002af6:	2115      	movs	r1, #21
{
 8002af8:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002afa:	20d4      	movs	r0, #212	; 0xd4
 8002afc:	f7ff fcce 	bl	800249c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002b00:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8002b04:	b10c      	cbz	r4, 8002b0a <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002b06:	f042 0210 	orr.w	r2, r2, #16
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
}
 8002b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002b0e:	2115      	movs	r1, #21
 8002b10:	20d4      	movs	r0, #212	; 0xd4
 8002b12:	f7ff bca7 	b.w	8002464 <SENSOR_IO_Write>

08002b16 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002b16:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002b18:	2111      	movs	r1, #17
{  
 8002b1a:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002b1c:	20d4      	movs	r0, #212	; 0xd4
 8002b1e:	f7ff fcbd 	bl	800249c <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8002b22:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8002b26:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	2111      	movs	r1, #17
 8002b2c:	20d4      	movs	r0, #212	; 0xd4
 8002b2e:	f7ff fc99 	bl	8002464 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002b32:	2112      	movs	r1, #18
 8002b34:	20d4      	movs	r0, #212	; 0xd4
 8002b36:	f7ff fcb1 	bl	800249c <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8002b3a:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002b3e:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 8002b42:	2112      	movs	r1, #18
}
 8002b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002b48:	20d4      	movs	r0, #212	; 0xd4
 8002b4a:	f7ff bc8b 	b.w	8002464 <SENSOR_IO_Write>

08002b4e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002b4e:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002b50:	2111      	movs	r1, #17
 8002b52:	20d4      	movs	r0, #212	; 0xd4
 8002b54:	f7ff fca2 	bl	800249c <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
}
 8002b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002b5c:	f000 020f 	and.w	r2, r0, #15
 8002b60:	2111      	movs	r1, #17
 8002b62:	20d4      	movs	r0, #212	; 0xd4
 8002b64:	f7ff bc7e 	b.w	8002464 <SENSOR_IO_Write>

08002b68 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002b68:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002b6a:	2116      	movs	r1, #22
{  
 8002b6c:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002b6e:	20d4      	movs	r0, #212	; 0xd4
 8002b70:	f7ff fc94 	bl	800249c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002b74:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 8002b78:	b10c      	cbz	r4, 8002b7e <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
}
 8002b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002b82:	2116      	movs	r1, #22
 8002b84:	20d4      	movs	r0, #212	; 0xd4
 8002b86:	f7ff bc6d 	b.w	8002464 <SENSOR_IO_Write>

08002b8a <LSM6DSL_AccReadID>:
{  
 8002b8a:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 8002b8c:	f7ff fc68 	bl	8002460 <SENSOR_IO_Init>
}
 8002b90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002b94:	210f      	movs	r1, #15
 8002b96:	20d4      	movs	r0, #212	; 0xd4
 8002b98:	f7ff bc80 	b.w	800249c <SENSOR_IO_Read>

08002b9c <LSM6DSL_GyroReadID>:
 8002b9c:	f7ff bff5 	b.w	8002b8a <LSM6DSL_AccReadID>

08002ba0 <LSM6DSL_AccReadXYZ>:
{
 8002ba0:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002ba2:	2110      	movs	r1, #16
{
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002ba8:	20d4      	movs	r0, #212	; 0xd4
 8002baa:	f7ff fc77 	bl	800249c <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002bae:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002bb0:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002bb2:	aa02      	add	r2, sp, #8
 8002bb4:	2128      	movs	r1, #40	; 0x28
 8002bb6:	20d4      	movs	r0, #212	; 0xd4
 8002bb8:	f7ff fc8e 	bl	80024d8 <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002bbc:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002bc0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002bc4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bc8:	f8ad 3000 	strh.w	r3, [sp]
 8002bcc:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002bd0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002bd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bd8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002bdc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002be0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002be4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002be8:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlx & 0x0C)
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <LSM6DSL_AccReadXYZ+0x84>)
 8002bee:	f005 050c 	and.w	r5, r5, #12
 8002bf2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8002bf6:	ed95 7a00 	vldr	s14, [r5]
  for(i=0; i<3; i++)
 8002bfa:	1ea3      	subs	r3, r4, #2
 8002bfc:	466a      	mov	r2, sp
 8002bfe:	3404      	adds	r4, #4
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002c00:	f932 1b02 	ldrsh.w	r1, [r2], #2
 8002c04:	ee07 1a90 	vmov	s15, r1
 8002c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c14:	ee17 1a90 	vmov	r1, s15
 8002c18:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	d1ef      	bne.n	8002c00 <LSM6DSL_AccReadXYZ+0x60>
}
 8002c20:	b005      	add	sp, #20
 8002c22:	bd30      	pop	{r4, r5, pc}
 8002c24:	080087c0 	.word	0x080087c0

08002c28 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c2a:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002c2c:	2111      	movs	r1, #17
 8002c2e:	20d4      	movs	r0, #212	; 0xd4
 8002c30:	f7ff fc34 	bl	800249c <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002c34:	466a      	mov	r2, sp
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002c36:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002c38:	2306      	movs	r3, #6
 8002c3a:	2122      	movs	r1, #34	; 0x22
 8002c3c:	20d4      	movs	r0, #212	; 0xd4
 8002c3e:	f7ff fc4b 	bl	80024d8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002c42:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002c46:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002c4a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002c54:	ee07 3a10 	vmov	s14, r3
 8002c58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	ee07 3a90 	vmov	s15, r3
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <LSM6DSL_GyroReadXYZAngRate+0x88>)
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002c68:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002c6c:	f005 050c 	and.w	r5, r5, #12
 8002c70:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8002c74:	f89d 3000 	ldrb.w	r3, [sp]
 8002c78:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8002c7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	ee06 3a90 	vmov	s13, r3
 8002c86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c8a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c92:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002c96:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002c9a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c9e:	edc4 6a00 	vstr	s13, [r4]
 8002ca2:	ed84 7a01 	vstr	s14, [r4, #4]
 8002ca6:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 8002caa:	b003      	add	sp, #12
 8002cac:	bd30      	pop	{r4, r5, pc}
 8002cae:	bf00      	nop
 8002cb0:	080087c0 	.word	0x080087c0

08002cb4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	490f      	ldr	r1, [pc, #60]	; (8002cf4 <SystemInit+0x40>)
 8002cb6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002cba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <SystemInit+0x44>)
 8002cc4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cc6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002cce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002cd6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002cda:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ce0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002cea:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cf0:	608b      	str	r3, [r1, #8]
#endif
}
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d00:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d02:	4e0f      	ldr	r6, [pc, #60]	; (8002d40 <HAL_InitTick+0x40>)
{
 8002d04:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8002d06:	7830      	ldrb	r0, [r6, #0]
 8002d08:	b908      	cbnz	r0, 8002d0e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d0a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <HAL_InitTick+0x44>)
 8002d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d14:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d18:	6810      	ldr	r0, [r2, #0]
 8002d1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d1e:	f000 f89b 	bl	8002e58 <HAL_SYSTICK_Config>
 8002d22:	4604      	mov	r4, r0
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d1f0      	bne.n	8002d0a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d28:	2d0f      	cmp	r5, #15
 8002d2a:	d8ee      	bhi.n	8002d0a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4629      	mov	r1, r5
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f000 f850 	bl	8002dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d38:	6075      	str	r5, [r6, #4]
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	e7e6      	b.n	8002d0c <HAL_InitTick+0xc>
 8002d3e:	bf00      	nop
 8002d40:	200000f0 	.word	0x200000f0
 8002d44:	200000ec 	.word	0x200000ec

08002d48 <HAL_Init>:
{
 8002d48:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	f000 f832 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d50:	200f      	movs	r0, #15
 8002d52:	f7ff ffd5 	bl	8002d00 <HAL_InitTick>
 8002d56:	4604      	mov	r4, r0
 8002d58:	b918      	cbnz	r0, 8002d62 <HAL_Init+0x1a>
    HAL_MspInit();
 8002d5a:	f7ff ffcf 	bl	8002cfc <HAL_MspInit>
}
 8002d5e:	4620      	mov	r0, r4
 8002d60:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002d62:	2401      	movs	r4, #1
 8002d64:	e7fb      	b.n	8002d5e <HAL_Init+0x16>
	...

08002d68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002d68:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <HAL_IncTick+0x10>)
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <HAL_IncTick+0x14>)
 8002d6c:	6811      	ldr	r1, [r2, #0]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	440b      	add	r3, r1
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000f64 	.word	0x20000f64
 8002d7c:	200000f0 	.word	0x200000f0

08002d80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <HAL_GetTick+0x8>)
 8002d82:	6818      	ldr	r0, [r3, #0]
}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000f64 	.word	0x20000f64

08002d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d8c:	b538      	push	{r3, r4, r5, lr}
 8002d8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff fff6 	bl	8002d80 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d94:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8002d96:	bf1c      	itt	ne
 8002d98:	4b05      	ldrne	r3, [pc, #20]	; (8002db0 <HAL_Delay+0x24>)
 8002d9a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8002d9e:	bf18      	it	ne
 8002da0:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002da2:	f7ff ffed 	bl	8002d80 <HAL_GetTick>
 8002da6:	1b43      	subs	r3, r0, r5
 8002da8:	42a3      	cmp	r3, r4
 8002daa:	d3fa      	bcc.n	8002da2 <HAL_Delay+0x16>
  {
  }
}
 8002dac:	bd38      	pop	{r3, r4, r5, pc}
 8002dae:	bf00      	nop
 8002db0:	200000f0 	.word	0x200000f0

08002db4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002db6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002dd0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dda:	b530      	push	{r4, r5, lr}
 8002ddc:	68dc      	ldr	r4, [r3, #12]
 8002dde:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	2d04      	cmp	r5, #4
 8002dea:	bf28      	it	cs
 8002dec:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dee:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df4:	bf8c      	ite	hi
 8002df6:	3c03      	subhi	r4, #3
 8002df8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfa:	fa03 f505 	lsl.w	r5, r3, r5
 8002dfe:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e02:	40a3      	lsls	r3, r4
 8002e04:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	bfac      	ite	ge
 8002e12:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	4a08      	ldrlt	r2, [pc, #32]	; (8002e38 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	bfb8      	it	lt
 8002e1e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	bfaa      	itet	ge
 8002e26:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002e30:	bd30      	pop	{r4, r5, pc}
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00
 8002e38:	e000ed14 	.word	0xe000ed14

08002e3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	db08      	blt.n	8002e52 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e40:	2301      	movs	r3, #1
 8002e42:	0942      	lsrs	r2, r0, #5
 8002e44:	f000 001f 	and.w	r0, r0, #31
 8002e48:	fa03 f000 	lsl.w	r0, r3, r0
 8002e4c:	4b01      	ldr	r3, [pc, #4]	; (8002e54 <HAL_NVIC_EnableIRQ+0x18>)
 8002e4e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e52:	4770      	bx	lr
 8002e54:	e000e100 	.word	0xe000e100

08002e58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	3801      	subs	r0, #1
 8002e5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002e5e:	d20b      	bcs.n	8002e78 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e64:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e66:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	21f0      	movs	r1, #240	; 0xf0
 8002e6a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e6e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e70:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e72:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e74:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002e78:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e80:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e82:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002e86:	2a02      	cmp	r2, #2
 8002e88:	d003      	beq.n	8002e92 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8002e8e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8002e90:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e92:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8002e94:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e96:	6811      	ldr	r1, [r2, #0]
 8002e98:	f021 010e 	bic.w	r1, r1, #14
 8002e9c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e9e:	6811      	ldr	r1, [r2, #0]
 8002ea0:	f021 0101 	bic.w	r1, r1, #1
 8002ea4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ea6:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8002eaa:	2101      	movs	r1, #1
 8002eac:	f002 021c 	and.w	r2, r2, #28
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002eb6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002eb8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002ebc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8002ec0:	b113      	cbz	r3, 8002ec8 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8002ec2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	e7e3      	b.n	8002e90 <HAL_DMA_Abort_IT+0x10>
 8002ec8:	4618      	mov	r0, r3
 8002eca:	e7e1      	b.n	8002e90 <HAL_DMA_Abort_IT+0x10>

08002ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed0:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8003084 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ed4:	4c69      	ldr	r4, [pc, #420]	; (800307c <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8002ed6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed8:	680a      	ldr	r2, [r1, #0]
 8002eda:	fa32 f503 	lsrs.w	r5, r2, r3
 8002ede:	d102      	bne.n	8002ee6 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002ee0:	b003      	add	sp, #12
 8002ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ee6:	f04f 0e01 	mov.w	lr, #1
 8002eea:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8002eee:	ea1e 0202 	ands.w	r2, lr, r2
 8002ef2:	f000 8090 	beq.w	8003016 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef6:	684d      	ldr	r5, [r1, #4]
 8002ef8:	f005 0603 	and.w	r6, r5, #3
 8002efc:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f00:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f04:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f06:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f0a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f0c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f10:	f200 8083 	bhi.w	800301a <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8002f14:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f16:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f1a:	68cf      	ldr	r7, [r1, #12]
 8002f1c:	fa07 f708 	lsl.w	r7, r7, r8
 8002f20:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002f24:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002f26:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f28:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002f30:	409f      	lsls	r7, r3
 8002f32:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002f36:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002f38:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f3a:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f3e:	688f      	ldr	r7, [r1, #8]
 8002f40:	fa07 f708 	lsl.w	r7, r7, r8
 8002f44:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f48:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8002f4a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4c:	d071      	beq.n	8003032 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8002f4e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f50:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f54:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f58:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f5a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002f5e:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f60:	d059      	beq.n	8003016 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f62:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8002f66:	f046 0601 	orr.w	r6, r6, #1
 8002f6a:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8002f6e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8002f72:	f023 0703 	bic.w	r7, r3, #3
 8002f76:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002f7a:	f006 0601 	and.w	r6, r6, #1
 8002f7e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002f82:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f84:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f88:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f8a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f8c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002f90:	f04f 0c0f 	mov.w	ip, #15
 8002f94:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f98:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f9c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fa0:	d05f      	beq.n	8003062 <HAL_GPIO_Init+0x196>
 8002fa2:	4e37      	ldr	r6, [pc, #220]	; (8003080 <HAL_GPIO_Init+0x1b4>)
 8002fa4:	42b0      	cmp	r0, r6
 8002fa6:	d05e      	beq.n	8003066 <HAL_GPIO_Init+0x19a>
 8002fa8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fac:	42b0      	cmp	r0, r6
 8002fae:	d05c      	beq.n	800306a <HAL_GPIO_Init+0x19e>
 8002fb0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fb4:	42b0      	cmp	r0, r6
 8002fb6:	d05a      	beq.n	800306e <HAL_GPIO_Init+0x1a2>
 8002fb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fbc:	42b0      	cmp	r0, r6
 8002fbe:	d058      	beq.n	8003072 <HAL_GPIO_Init+0x1a6>
 8002fc0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fc4:	42b0      	cmp	r0, r6
 8002fc6:	d056      	beq.n	8003076 <HAL_GPIO_Init+0x1aa>
 8002fc8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fcc:	42b0      	cmp	r0, r6
 8002fce:	bf0c      	ite	eq
 8002fd0:	2606      	moveq	r6, #6
 8002fd2:	2607      	movne	r6, #7
 8002fd4:	fa06 f60e 	lsl.w	r6, r6, lr
 8002fd8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fdc:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8002fde:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8002fe0:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fe2:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002fe6:	bf0c      	ite	eq
 8002fe8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002fea:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8002fec:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8002fee:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ff0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8002ff4:	bf0c      	ite	eq
 8002ff6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002ff8:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8002ffa:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8002ffc:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ffe:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003002:	bf0c      	ite	eq
 8003004:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003006:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8003008:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 800300a:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800300c:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 800300e:	bf54      	ite	pl
 8003010:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8003012:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8003014:	6026      	str	r6, [r4, #0]
    position++;
 8003016:	3301      	adds	r3, #1
 8003018:	e75e      	b.n	8002ed8 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800301a:	2e03      	cmp	r6, #3
 800301c:	d18c      	bne.n	8002f38 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 800301e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003020:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003024:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8003028:	409f      	lsls	r7, r3
 800302a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 800302e:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003030:	e78d      	b.n	8002f4e <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8003032:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003036:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800303a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800303e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003042:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003046:	f04f 0e0f 	mov.w	lr, #15
 800304a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800304e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003052:	690f      	ldr	r7, [r1, #16]
 8003054:	fa07 f70b 	lsl.w	r7, r7, fp
 8003058:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 800305c:	f8ca 7020 	str.w	r7, [sl, #32]
 8003060:	e775      	b.n	8002f4e <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003062:	2600      	movs	r6, #0
 8003064:	e7b6      	b.n	8002fd4 <HAL_GPIO_Init+0x108>
 8003066:	2601      	movs	r6, #1
 8003068:	e7b4      	b.n	8002fd4 <HAL_GPIO_Init+0x108>
 800306a:	2602      	movs	r6, #2
 800306c:	e7b2      	b.n	8002fd4 <HAL_GPIO_Init+0x108>
 800306e:	2603      	movs	r6, #3
 8003070:	e7b0      	b.n	8002fd4 <HAL_GPIO_Init+0x108>
 8003072:	2604      	movs	r6, #4
 8003074:	e7ae      	b.n	8002fd4 <HAL_GPIO_Init+0x108>
 8003076:	2605      	movs	r6, #5
 8003078:	e7ac      	b.n	8002fd4 <HAL_GPIO_Init+0x108>
 800307a:	bf00      	nop
 800307c:	40010400 	.word	0x40010400
 8003080:	48000400 	.word	0x48000400
 8003084:	40021000 	.word	0x40021000

08003088 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003088:	6903      	ldr	r3, [r0, #16]
 800308a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800308c:	bf14      	ite	ne
 800308e:	2001      	movne	r0, #1
 8003090:	2000      	moveq	r0, #0
 8003092:	4770      	bx	lr

08003094 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003094:	b10a      	cbz	r2, 800309a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003096:	6181      	str	r1, [r0, #24]
 8003098:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800309a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80030a2:	6951      	ldr	r1, [r2, #20]
 80030a4:	4201      	tst	r1, r0
{
 80030a6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030a8:	d002      	beq.n	80030b0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030aa:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030ac:	f7fe f900 	bl	80012b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80030b0:	bd08      	pop	{r3, pc}
 80030b2:	bf00      	nop
 80030b4:	40010400 	.word	0x40010400

080030b8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030b8:	6803      	ldr	r3, [r0, #0]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80030be:	bf44      	itt	mi
 80030c0:	2200      	movmi	r2, #0
 80030c2:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030c8:	bf5e      	ittt	pl
 80030ca:	699a      	ldrpl	r2, [r3, #24]
 80030cc:	f042 0201 	orrpl.w	r2, r2, #1
 80030d0:	619a      	strpl	r2, [r3, #24]
  }
}
 80030d2:	4770      	bx	lr

080030d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030d4:	b530      	push	{r4, r5, lr}
 80030d6:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030d8:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030da:	432b      	orrs	r3, r5
 80030dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80030e0:	4a06      	ldr	r2, [pc, #24]	; (80030fc <I2C_TransferConfig+0x28>)
 80030e2:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030e4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80030e8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80030ea:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80030f2:	ea20 0002 	bic.w	r0, r0, r2
 80030f6:	4303      	orrs	r3, r0
 80030f8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030fa:	bd30      	pop	{r4, r5, pc}
 80030fc:	03ff63ff 	.word	0x03ff63ff

08003100 <I2C_IsErrorOccurred>:
{
 8003100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8003104:	6803      	ldr	r3, [r0, #0]
 8003106:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003108:	f014 0410 	ands.w	r4, r4, #16
{
 800310c:	4605      	mov	r5, r0
 800310e:	4688      	mov	r8, r1
 8003110:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003112:	d079      	beq.n	8003208 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	2210      	movs	r2, #16
 8003116:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003118:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 800311a:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800311e:	682b      	ldr	r3, [r5, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	0694      	lsls	r4, r2, #26
 8003124:	d436      	bmi.n	8003194 <I2C_IsErrorOccurred+0x94>
 8003126:	b10e      	cbz	r6, 800312c <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8003128:	2404      	movs	r4, #4
 800312a:	e039      	b.n	80031a0 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 800312c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003130:	d0f6      	beq.n	8003120 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7ff fe25 	bl	8002d80 <HAL_GetTick>
 8003136:	1bc0      	subs	r0, r0, r7
 8003138:	4540      	cmp	r0, r8
 800313a:	d802      	bhi.n	8003142 <I2C_IsErrorOccurred+0x42>
 800313c:	f1b8 0f00 	cmp.w	r8, #0
 8003140:	d1ed      	bne.n	800311e <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8003146:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800314a:	6998      	ldr	r0, [r3, #24]
 800314c:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 800314e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003150:	d50a      	bpl.n	8003168 <I2C_IsErrorOccurred+0x68>
 8003152:	0449      	lsls	r1, r1, #17
 8003154:	d408      	bmi.n	8003168 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8003156:	2a20      	cmp	r2, #32
 8003158:	d006      	beq.n	8003168 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003160:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003162:	f7ff fe0d 	bl	8002d80 <HAL_GetTick>
 8003166:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	699c      	ldr	r4, [r3, #24]
 800316c:	f014 0420 	ands.w	r4, r4, #32
 8003170:	d1d5      	bne.n	800311e <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003172:	f7ff fe05 	bl	8002d80 <HAL_GetTick>
 8003176:	1bc0      	subs	r0, r0, r7
 8003178:	2819      	cmp	r0, #25
 800317a:	d9f5      	bls.n	8003168 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 800317e:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	f043 0320 	orr.w	r3, r3, #32
 8003186:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8003188:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 800318a:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800318e:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8003192:	e7e9      	b.n	8003168 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8003194:	2e00      	cmp	r6, #0
 8003196:	d1c7      	bne.n	8003128 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003198:	2220      	movs	r2, #32
 800319a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800319c:	2404      	movs	r4, #4
    status = HAL_ERROR;
 800319e:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 80031a0:	682b      	ldr	r3, [r5, #0]
 80031a2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031a4:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031a6:	bf41      	itttt	mi
 80031a8:	f44f 7180 	movmi.w	r1, #256	; 0x100
 80031ac:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80031ae:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 80031b2:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031b4:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031b6:	bf41      	itttt	mi
 80031b8:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80031bc:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031c0:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 80031c2:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031c4:	0592      	lsls	r2, r2, #22
 80031c6:	d521      	bpl.n	800320c <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80031cc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031d0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80031d2:	4628      	mov	r0, r5
 80031d4:	f7ff ff70 	bl	80030b8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80031d8:	682a      	ldr	r2, [r5, #0]
 80031da:	6853      	ldr	r3, [r2, #4]
 80031dc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80031e0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80031e4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80031ee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80031f0:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80031f4:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003200:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8003204:	2601      	movs	r6, #1
 8003206:	e003      	b.n	8003210 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	4626      	mov	r6, r4
 800320a:	e7c9      	b.n	80031a0 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 800320c:	2e00      	cmp	r6, #0
 800320e:	d1e0      	bne.n	80031d2 <I2C_IsErrorOccurred+0xd2>
}
 8003210:	4630      	mov	r0, r6
 8003212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003216 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003216:	b570      	push	{r4, r5, r6, lr}
 8003218:	4604      	mov	r4, r0
 800321a:	460d      	mov	r5, r1
 800321c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	079b      	lsls	r3, r3, #30
 8003224:	d501      	bpl.n	800322a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003226:	2000      	movs	r0, #0
}
 8003228:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800322a:	4632      	mov	r2, r6
 800322c:	4629      	mov	r1, r5
 800322e:	4620      	mov	r0, r4
 8003230:	f7ff ff66 	bl	8003100 <I2C_IsErrorOccurred>
 8003234:	b9a0      	cbnz	r0, 8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8003236:	1c6a      	adds	r2, r5, #1
 8003238:	d0f1      	beq.n	800321e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7ff fda1 	bl	8002d80 <HAL_GetTick>
 800323e:	1b80      	subs	r0, r0, r6
 8003240:	42a8      	cmp	r0, r5
 8003242:	d801      	bhi.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003244:	2d00      	cmp	r5, #0
 8003246:	d1ea      	bne.n	800321e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003248:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800324a:	f043 0320 	orr.w	r3, r3, #32
 800324e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003250:	2320      	movs	r3, #32
 8003252:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	2300      	movs	r3, #0
 8003258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800325c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003260:	2001      	movs	r0, #1
 8003262:	e7e1      	b.n	8003228 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08003264 <I2C_WaitOnFlagUntilTimeout>:
{
 8003264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003268:	9f06      	ldr	r7, [sp, #24]
 800326a:	4604      	mov	r4, r0
 800326c:	4688      	mov	r8, r1
 800326e:	4616      	mov	r6, r2
 8003270:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	6993      	ldr	r3, [r2, #24]
 8003276:	ea38 0303 	bics.w	r3, r8, r3
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	42b3      	cmp	r3, r6
 8003282:	d001      	beq.n	8003288 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8003284:	2000      	movs	r0, #0
 8003286:	e015      	b.n	80032b4 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003288:	1c6b      	adds	r3, r5, #1
 800328a:	d0f3      	beq.n	8003274 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328c:	f7ff fd78 	bl	8002d80 <HAL_GetTick>
 8003290:	1bc0      	subs	r0, r0, r7
 8003292:	42a8      	cmp	r0, r5
 8003294:	d801      	bhi.n	800329a <I2C_WaitOnFlagUntilTimeout+0x36>
 8003296:	2d00      	cmp	r5, #0
 8003298:	d1eb      	bne.n	8003272 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800329a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800329c:	f043 0320 	orr.w	r3, r3, #32
 80032a0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	2320      	movs	r3, #32
 80032a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80032ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80032b2:	2001      	movs	r0, #1
}
 80032b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4604      	mov	r4, r0
 80032bc:	460d      	mov	r5, r1
 80032be:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	069b      	lsls	r3, r3, #26
 80032c6:	d501      	bpl.n	80032cc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80032c8:	2000      	movs	r0, #0
}
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032cc:	4632      	mov	r2, r6
 80032ce:	4629      	mov	r1, r5
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff ff15 	bl	8003100 <I2C_IsErrorOccurred>
 80032d6:	b990      	cbnz	r0, 80032fe <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d8:	f7ff fd52 	bl	8002d80 <HAL_GetTick>
 80032dc:	1b80      	subs	r0, r0, r6
 80032de:	42a8      	cmp	r0, r5
 80032e0:	d801      	bhi.n	80032e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80032e2:	2d00      	cmp	r5, #0
 80032e4:	d1ec      	bne.n	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032e8:	f043 0320 	orr.w	r3, r3, #32
 80032ec:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	2320      	movs	r3, #32
 80032f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80032fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80032fe:	2001      	movs	r0, #1
 8003300:	e7e3      	b.n	80032ca <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08003302 <HAL_I2C_MspInit>:
}
 8003302:	4770      	bx	lr

08003304 <HAL_I2C_Init>:
{
 8003304:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003306:	4604      	mov	r4, r0
 8003308:	2800      	cmp	r0, #0
 800330a:	d04a      	beq.n	80033a2 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800330c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003310:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003314:	b91b      	cbnz	r3, 800331e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8003316:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800331a:	f7ff fff2 	bl	8003302 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800331e:	2324      	movs	r3, #36	; 0x24
 8003320:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800332e:	6862      	ldr	r2, [r4, #4]
 8003330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003334:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800333c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800333e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003342:	2901      	cmp	r1, #1
 8003344:	d124      	bne.n	8003390 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800334a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003356:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800335e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003360:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003364:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003366:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003368:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800336c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800336e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003380:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003382:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003384:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003388:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800338e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003390:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003394:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003396:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003398:	bf04      	itt	eq
 800339a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800339e:	605a      	streq	r2, [r3, #4]
 80033a0:	e7d4      	b.n	800334c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80033a2:	2001      	movs	r0, #1
 80033a4:	e7f3      	b.n	800338e <HAL_I2C_Init+0x8a>

080033a6 <HAL_I2C_MspDeInit>:
 80033a6:	4770      	bx	lr

080033a8 <HAL_I2C_DeInit>:
{
 80033a8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80033aa:	4604      	mov	r4, r0
 80033ac:	b198      	cbz	r0, 80033d6 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80033ae:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b0:	2324      	movs	r3, #36	; 0x24
 80033b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80033b6:	6813      	ldr	r3, [r2, #0]
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80033be:	f7ff fff2 	bl	80033a6 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c2:	2000      	movs	r0, #0
 80033c4:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80033c6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80033ca:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80033d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033d6:	2001      	movs	r0, #1
 80033d8:	e7fc      	b.n	80033d4 <HAL_I2C_DeInit+0x2c>
	...

080033dc <HAL_I2C_Mem_Write>:
{
 80033dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80033e6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80033ea:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ee:	2b20      	cmp	r3, #32
{
 80033f0:	4604      	mov	r4, r0
 80033f2:	460f      	mov	r7, r1
 80033f4:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f6:	f040 80c6 	bne.w	8003586 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 80033fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033fc:	b113      	cbz	r3, 8003404 <HAL_I2C_Mem_Write+0x28>
 80033fe:	f1ba 0f00 	cmp.w	sl, #0
 8003402:	d106      	bne.n	8003412 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003408:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800340a:	2001      	movs	r0, #1
}
 800340c:	b003      	add	sp, #12
 800340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003412:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003416:	2b01      	cmp	r3, #1
 8003418:	f000 80b5 	beq.w	8003586 <HAL_I2C_Mem_Write+0x1aa>
 800341c:	f04f 0b01 	mov.w	fp, #1
 8003420:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003424:	f7ff fcac 	bl	8002d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003428:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800342a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800342c:	9000      	str	r0, [sp, #0]
 800342e:	465a      	mov	r2, fp
 8003430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003434:	4620      	mov	r0, r4
 8003436:	f7ff ff15 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 800343a:	2800      	cmp	r0, #0
 800343c:	d1e5      	bne.n	800340a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800343e:	2321      	movs	r3, #33	; 0x21
 8003440:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003444:	2340      	movs	r3, #64	; 0x40
 8003446:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800344a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800344c:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800344e:	4b4f      	ldr	r3, [pc, #316]	; (800358c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003450:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8003452:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	fa5f f289 	uxtb.w	r2, r9
 800345a:	4639      	mov	r1, r7
 800345c:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 800345e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003462:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003466:	f7ff fe35 	bl	80030d4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	462a      	mov	r2, r5
 800346c:	4641      	mov	r1, r8
 800346e:	4620      	mov	r0, r4
 8003470:	f7ff fed1 	bl	8003216 <I2C_WaitOnTXISFlagUntilTimeout>
 8003474:	bb18      	cbnz	r0, 80034be <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003476:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800347a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800347c:	d115      	bne.n	80034aa <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800347e:	b2f6      	uxtb	r6, r6
 8003480:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003482:	2200      	movs	r2, #0
 8003484:	9500      	str	r5, [sp, #0]
 8003486:	4643      	mov	r3, r8
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	4620      	mov	r0, r4
 800348c:	f7ff feea 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8003490:	b9a8      	cbnz	r0, 80034be <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003492:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2bff      	cmp	r3, #255	; 0xff
 8003498:	d815      	bhi.n	80034c6 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800349a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800349c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800349e:	b292      	uxth	r2, r2
 80034a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	e012      	b.n	80034d0 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034aa:	0a32      	lsrs	r2, r6, #8
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ae:	4641      	mov	r1, r8
 80034b0:	462a      	mov	r2, r5
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7ff feaf 	bl	8003216 <I2C_WaitOnTXISFlagUntilTimeout>
 80034b8:	b908      	cbnz	r0, 80034be <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	e7df      	b.n	800347e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80034be:	2300      	movs	r3, #0
 80034c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80034c4:	e7a1      	b.n	800340a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034c6:	22ff      	movs	r2, #255	; 0xff
 80034c8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034ca:	9000      	str	r0, [sp, #0]
 80034cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034d0:	4639      	mov	r1, r7
 80034d2:	4620      	mov	r0, r4
 80034d4:	f7ff fdfe 	bl	80030d4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d8:	462a      	mov	r2, r5
 80034da:	4641      	mov	r1, r8
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff fe9a 	bl	8003216 <I2C_WaitOnTXISFlagUntilTimeout>
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d191      	bne.n	800340a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	f813 1b01 	ldrb.w	r1, [r3], #1
 80034ee:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80034f0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80034f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80034f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80034fe:	3a01      	subs	r2, #1
 8003500:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003502:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003504:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003506:	b1b3      	cbz	r3, 8003536 <HAL_I2C_Mem_Write+0x15a>
 8003508:	b9aa      	cbnz	r2, 8003536 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800350a:	9500      	str	r5, [sp, #0]
 800350c:	4643      	mov	r3, r8
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	4620      	mov	r0, r4
 8003512:	f7ff fea7 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8003516:	2800      	cmp	r0, #0
 8003518:	f47f af77 	bne.w	800340a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800351c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	2bff      	cmp	r3, #255	; 0xff
 8003522:	d928      	bls.n	8003576 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003524:	22ff      	movs	r2, #255	; 0xff
 8003526:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003528:	9000      	str	r0, [sp, #0]
 800352a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800352e:	4639      	mov	r1, r7
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff fdcf 	bl	80030d4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003536:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1cc      	bne.n	80034d8 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353e:	462a      	mov	r2, r5
 8003540:	4641      	mov	r1, r8
 8003542:	4620      	mov	r0, r4
 8003544:	f7ff feb8 	bl	80032b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003548:	2800      	cmp	r0, #0
 800354a:	f47f af5e 	bne.w	800340a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	2120      	movs	r1, #32
 8003552:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800355a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800355e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003568:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800356c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003570:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003574:	e74a      	b.n	800340c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8003576:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003578:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800357a:	b292      	uxth	r2, r2
 800357c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800357e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	e7d3      	b.n	800352e <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8003586:	2002      	movs	r0, #2
 8003588:	e740      	b.n	800340c <HAL_I2C_Mem_Write+0x30>
 800358a:	bf00      	nop
 800358c:	80002000 	.word	0x80002000

08003590 <HAL_I2C_Mem_Read>:
{
 8003590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003594:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003596:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800359a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800359e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a2:	2b20      	cmp	r3, #32
{
 80035a4:	4604      	mov	r4, r0
 80035a6:	460f      	mov	r7, r1
 80035a8:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035aa:	f040 80c9 	bne.w	8003740 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80035ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035b0:	b113      	cbz	r3, 80035b8 <HAL_I2C_Mem_Read+0x28>
 80035b2:	f1ba 0f00 	cmp.w	sl, #0
 80035b6:	d106      	bne.n	80035c6 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035bc:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80035be:	2001      	movs	r0, #1
}
 80035c0:	b003      	add	sp, #12
 80035c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80035c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f000 80b8 	beq.w	8003740 <HAL_I2C_Mem_Read+0x1b0>
 80035d0:	f04f 0b01 	mov.w	fp, #1
 80035d4:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80035d8:	f7ff fbd2 	bl	8002d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035dc:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80035de:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035e0:	9000      	str	r0, [sp, #0]
 80035e2:	465a      	mov	r2, fp
 80035e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035e8:	4620      	mov	r0, r4
 80035ea:	f7ff fe3b 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d1e5      	bne.n	80035be <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035f2:	2322      	movs	r3, #34	; 0x22
 80035f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f8:	2340      	movs	r3, #64	; 0x40
 80035fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80035fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003600:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003602:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8003606:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	fa5f f289 	uxtb.w	r2, r9
 800360e:	4603      	mov	r3, r0
 8003610:	4639      	mov	r1, r7
 8003612:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 8003614:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003618:	f7ff fd5c 	bl	80030d4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361c:	462a      	mov	r2, r5
 800361e:	4641      	mov	r1, r8
 8003620:	4620      	mov	r0, r4
 8003622:	f7ff fdf8 	bl	8003216 <I2C_WaitOnTXISFlagUntilTimeout>
 8003626:	bb20      	cbnz	r0, 8003672 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003628:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800362c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800362e:	d116      	bne.n	800365e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003630:	b2f6      	uxtb	r6, r6
 8003632:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003634:	2200      	movs	r2, #0
 8003636:	9500      	str	r5, [sp, #0]
 8003638:	4643      	mov	r3, r8
 800363a:	2140      	movs	r1, #64	; 0x40
 800363c:	4620      	mov	r0, r4
 800363e:	f7ff fe11 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8003642:	b9b0      	cbnz	r0, 8003672 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003644:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	2bff      	cmp	r3, #255	; 0xff
 800364a:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <HAL_I2C_Mem_Read+0x1b8>)
 800364c:	d815      	bhi.n	800367a <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800364e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003650:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003652:	b292      	uxth	r2, r2
 8003654:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	e012      	b.n	8003684 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800365e:	0a32      	lsrs	r2, r6, #8
 8003660:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003662:	4641      	mov	r1, r8
 8003664:	462a      	mov	r2, r5
 8003666:	4620      	mov	r0, r4
 8003668:	f7ff fdd5 	bl	8003216 <I2C_WaitOnTXISFlagUntilTimeout>
 800366c:	b908      	cbnz	r0, 8003672 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	e7de      	b.n	8003630 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8003672:	2300      	movs	r3, #0
 8003674:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003678:	e7a1      	b.n	80035be <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800367a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800367c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800367e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003684:	4639      	mov	r1, r7
 8003686:	4620      	mov	r0, r4
 8003688:	f7ff fd24 	bl	80030d4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800368c:	9500      	str	r5, [sp, #0]
 800368e:	4643      	mov	r3, r8
 8003690:	2200      	movs	r2, #0
 8003692:	2104      	movs	r1, #4
 8003694:	4620      	mov	r0, r4
 8003696:	f7ff fde5 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 800369a:	2800      	cmp	r0, #0
 800369c:	d18f      	bne.n	80035be <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036a4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80036a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80036a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80036aa:	3301      	adds	r3, #1
 80036ac:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80036ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80036b8:	3a01      	subs	r2, #1
 80036ba:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036bc:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80036be:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036c0:	b1b3      	cbz	r3, 80036f0 <HAL_I2C_Mem_Read+0x160>
 80036c2:	b9aa      	cbnz	r2, 80036f0 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036c4:	9500      	str	r5, [sp, #0]
 80036c6:	4643      	mov	r3, r8
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7ff fdca 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	f47f af74 	bne.w	80035be <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2bff      	cmp	r3, #255	; 0xff
 80036dc:	d928      	bls.n	8003730 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80036e2:	9000      	str	r0, [sp, #0]
 80036e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036e8:	4639      	mov	r1, r7
 80036ea:	4620      	mov	r0, r4
 80036ec:	f7ff fcf2 	bl	80030d4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80036f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1c9      	bne.n	800368c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f8:	462a      	mov	r2, r5
 80036fa:	4641      	mov	r1, r8
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7ff fddb 	bl	80032b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003702:	2800      	cmp	r0, #0
 8003704:	f47f af5b 	bne.w	80035be <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	2120      	movs	r1, #32
 800370c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003714:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003718:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003722:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003726:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800372a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800372e:	e747      	b.n	80035c0 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8003730:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003732:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003734:	b292      	uxth	r2, r2
 8003736:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003738:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	e7d3      	b.n	80036e8 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8003740:	2002      	movs	r0, #2
 8003742:	e73d      	b.n	80035c0 <HAL_I2C_Mem_Read+0x30>
 8003744:	80002000 	.word	0x80002000
 8003748:	80002400 	.word	0x80002400

0800374c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800374c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003752:	2b20      	cmp	r3, #32
 8003754:	b2dc      	uxtb	r4, r3
 8003756:	d11d      	bne.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003758:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800375c:	2b01      	cmp	r3, #1
 800375e:	d019      	beq.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003760:	2324      	movs	r3, #36	; 0x24
 8003762:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003766:	6803      	ldr	r3, [r0, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003776:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	4311      	orrs	r1, r2
 800377c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800378c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003790:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003792:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003794:	2002      	movs	r0, #2
 8003796:	e7fc      	b.n	8003792 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08003798 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003798:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <HAL_PWREx_GetVoltageRange+0xc>)
 800379a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800379c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40007000 	.word	0x40007000

080037a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037aa:	4d1e      	ldr	r5, [pc, #120]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80037ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80037ae:	00da      	lsls	r2, r3, #3
{
 80037b0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037b2:	d518      	bpl.n	80037e6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037b4:	f7ff fff0 	bl	8003798 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80037bc:	d123      	bne.n	8003806 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037be:	2c80      	cmp	r4, #128	; 0x80
 80037c0:	d929      	bls.n	8003816 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037c2:	2ca0      	cmp	r4, #160	; 0xa0
 80037c4:	bf8c      	ite	hi
 80037c6:	2002      	movhi	r0, #2
 80037c8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80037cc:	6813      	ldr	r3, [r2, #0]
 80037ce:	f023 0307 	bic.w	r3, r3, #7
 80037d2:	4303      	orrs	r3, r0
 80037d4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80037dc:	1a18      	subs	r0, r3, r0
 80037de:	bf18      	it	ne
 80037e0:	2001      	movne	r0, #1
 80037e2:	b003      	add	sp, #12
 80037e4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ec:	65ab      	str	r3, [r5, #88]	; 0x58
 80037ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80037f8:	f7ff ffce 	bl	8003798 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80037fc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003802:	65ab      	str	r3, [r5, #88]	; 0x58
 8003804:	e7d8      	b.n	80037b8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003806:	2c80      	cmp	r4, #128	; 0x80
 8003808:	d807      	bhi.n	800381a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800380a:	d008      	beq.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800380c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003810:	4258      	negs	r0, r3
 8003812:	4158      	adcs	r0, r3
 8003814:	e7d9      	b.n	80037ca <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003816:	2000      	movs	r0, #0
 8003818:	e7d7      	b.n	80037ca <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800381a:	2003      	movs	r0, #3
 800381c:	e7d5      	b.n	80037ca <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800381e:	2002      	movs	r0, #2
 8003820:	e7d3      	b.n	80037ca <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
 8003828:	40022000 	.word	0x40022000

0800382c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382c:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x8c>)
 800382e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003830:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003832:	f012 020c 	ands.w	r2, r2, #12
 8003836:	d005      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x18>
 8003838:	2a0c      	cmp	r2, #12
 800383a:	d115      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800383c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003840:	2901      	cmp	r1, #1
 8003842:	d118      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003844:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003846:	481d      	ldr	r0, [pc, #116]	; (80038bc <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003848:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800384a:	bf55      	itete	pl
 800384c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003850:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003852:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003856:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800385a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800385e:	b34a      	cbz	r2, 80038b4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003860:	2a0c      	cmp	r2, #12
 8003862:	d009      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x4c>
 8003864:	2000      	movs	r0, #0
  return sysclockfreq;
 8003866:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003868:	2a04      	cmp	r2, #4
 800386a:	d022      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800386c:	2a08      	cmp	r2, #8
 800386e:	4814      	ldr	r0, [pc, #80]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003870:	bf18      	it	ne
 8003872:	2000      	movne	r0, #0
 8003874:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003876:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800387e:	2a02      	cmp	r2, #2
 8003880:	d015      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x82>
 8003882:	490f      	ldr	r1, [pc, #60]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003884:	2a03      	cmp	r2, #3
 8003886:	bf08      	it	eq
 8003888:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800388a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003892:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003894:	68d8      	ldr	r0, [r3, #12]
 8003896:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800389a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800389e:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038a0:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038a2:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038a4:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80038a8:	fbb2 f0f0 	udiv	r0, r2, r0
 80038ac:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80038ae:	4805      	ldr	r0, [pc, #20]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80038b0:	e7eb      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80038b2:	4804      	ldr	r0, [pc, #16]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08008828 	.word	0x08008828
 80038c0:	007a1200 	.word	0x007a1200
 80038c4:	00f42400 	.word	0x00f42400

080038c8 <HAL_RCC_OscConfig>:
{
 80038c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80038cc:	4605      	mov	r5, r0
 80038ce:	b918      	cbnz	r0, 80038d8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80038d0:	2001      	movs	r0, #1
}
 80038d2:	b003      	add	sp, #12
 80038d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d8:	4c92      	ldr	r4, [pc, #584]	; (8003b24 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038da:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038dc:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038de:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038e0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e2:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038ea:	d53d      	bpl.n	8003968 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ec:	b11e      	cbz	r6, 80038f6 <HAL_RCC_OscConfig+0x2e>
 80038ee:	2e0c      	cmp	r6, #12
 80038f0:	d166      	bne.n	80039c0 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038f2:	2f01      	cmp	r7, #1
 80038f4:	d164      	bne.n	80039c0 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	0798      	lsls	r0, r3, #30
 80038fa:	d502      	bpl.n	8003902 <HAL_RCC_OscConfig+0x3a>
 80038fc:	69ab      	ldr	r3, [r5, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0e6      	beq.n	80038d0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	6a28      	ldr	r0, [r5, #32]
 8003906:	0719      	lsls	r1, r3, #28
 8003908:	bf56      	itet	pl
 800390a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800390e:	6823      	ldrmi	r3, [r4, #0]
 8003910:	091b      	lsrpl	r3, r3, #4
 8003912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003916:	4298      	cmp	r0, r3
 8003918:	d93b      	bls.n	8003992 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800391a:	f7ff ff45 	bl	80037a8 <RCC_SetFlashLatencyFromMSIRange>
 800391e:	2800      	cmp	r0, #0
 8003920:	d1d6      	bne.n	80038d0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	6a2a      	ldr	r2, [r5, #32]
 800392e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003932:	4313      	orrs	r3, r2
 8003934:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	69ea      	ldr	r2, [r5, #28]
 800393a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800393e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003942:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003944:	f7ff ff72 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8003948:	68a3      	ldr	r3, [r4, #8]
 800394a:	4a77      	ldr	r2, [pc, #476]	; (8003b28 <HAL_RCC_OscConfig+0x260>)
 800394c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003950:	5cd3      	ldrb	r3, [r2, r3]
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	40d8      	lsrs	r0, r3
 8003958:	4b74      	ldr	r3, [pc, #464]	; (8003b2c <HAL_RCC_OscConfig+0x264>)
 800395a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800395c:	4b74      	ldr	r3, [pc, #464]	; (8003b30 <HAL_RCC_OscConfig+0x268>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	f7ff f9ce 	bl	8002d00 <HAL_InitTick>
        if(status != HAL_OK)
 8003964:	2800      	cmp	r0, #0
 8003966:	d1b4      	bne.n	80038d2 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	07d8      	lsls	r0, r3, #31
 800396c:	d45f      	bmi.n	8003a2e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	682b      	ldr	r3, [r5, #0]
 8003970:	0799      	lsls	r1, r3, #30
 8003972:	f100 809e 	bmi.w	8003ab2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003976:	682b      	ldr	r3, [r5, #0]
 8003978:	0718      	lsls	r0, r3, #28
 800397a:	f100 80db 	bmi.w	8003b34 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397e:	682b      	ldr	r3, [r5, #0]
 8003980:	0759      	lsls	r1, r3, #29
 8003982:	f100 8101 	bmi.w	8003b88 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003986:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	f040 816a 	bne.w	8003c62 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800398e:	2000      	movs	r0, #0
 8003990:	e79f      	b.n	80038d2 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	f043 0308 	orr.w	r3, r3, #8
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a0:	4303      	orrs	r3, r0
 80039a2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	69ea      	ldr	r2, [r5, #28]
 80039a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80039b0:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b2:	2e00      	cmp	r6, #0
 80039b4:	d1c6      	bne.n	8003944 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039b6:	f7ff fef7 	bl	80037a8 <RCC_SetFlashLatencyFromMSIRange>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d0c2      	beq.n	8003944 <HAL_RCC_OscConfig+0x7c>
 80039be:	e787      	b.n	80038d0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039c0:	69ab      	ldr	r3, [r5, #24]
 80039c2:	b31b      	cbz	r3, 8003a0c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80039cc:	f7ff f9d8 	bl	8002d80 <HAL_GetTick>
 80039d0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	079a      	lsls	r2, r3, #30
 80039d6:	d511      	bpl.n	80039fc <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	f043 0308 	orr.w	r3, r3, #8
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	6a2a      	ldr	r2, [r5, #32]
 80039e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e8:	4313      	orrs	r3, r2
 80039ea:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	69ea      	ldr	r2, [r5, #28]
 80039f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80039f8:	6063      	str	r3, [r4, #4]
 80039fa:	e7b5      	b.n	8003968 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039fc:	f7ff f9c0 	bl	8002d80 <HAL_GetTick>
 8003a00:	eba0 0008 	sub.w	r0, r0, r8
 8003a04:	2802      	cmp	r0, #2
 8003a06:	d9e4      	bls.n	80039d2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003a08:	2003      	movs	r0, #3
 8003a0a:	e762      	b.n	80038d2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003a14:	f7ff f9b4 	bl	8002d80 <HAL_GetTick>
 8003a18:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	079b      	lsls	r3, r3, #30
 8003a1e:	d5a3      	bpl.n	8003968 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a20:	f7ff f9ae 	bl	8002d80 <HAL_GetTick>
 8003a24:	eba0 0008 	sub.w	r0, r0, r8
 8003a28:	2802      	cmp	r0, #2
 8003a2a:	d9f6      	bls.n	8003a1a <HAL_RCC_OscConfig+0x152>
 8003a2c:	e7ec      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a2e:	2e08      	cmp	r6, #8
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_OscConfig+0x172>
 8003a32:	2e0c      	cmp	r6, #12
 8003a34:	d108      	bne.n	8003a48 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a36:	2f03      	cmp	r7, #3
 8003a38:	d106      	bne.n	8003a48 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	039a      	lsls	r2, r3, #14
 8003a3e:	d596      	bpl.n	800396e <HAL_RCC_OscConfig+0xa6>
 8003a40:	686b      	ldr	r3, [r5, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d193      	bne.n	800396e <HAL_RCC_OscConfig+0xa6>
 8003a46:	e743      	b.n	80038d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	686b      	ldr	r3, [r5, #4]
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d110      	bne.n	8003a72 <HAL_RCC_OscConfig+0x1aa>
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003a58:	f7ff f992 	bl	8002d80 <HAL_GetTick>
 8003a5c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	039b      	lsls	r3, r3, #14
 8003a62:	d484      	bmi.n	800396e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a64:	f7ff f98c 	bl	8002d80 <HAL_GetTick>
 8003a68:	eba0 0008 	sub.w	r0, r0, r8
 8003a6c:	2864      	cmp	r0, #100	; 0x64
 8003a6e:	d9f6      	bls.n	8003a5e <HAL_RCC_OscConfig+0x196>
 8003a70:	e7ca      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a76:	d104      	bne.n	8003a82 <HAL_RCC_OscConfig+0x1ba>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a7e:	6023      	str	r3, [r4, #0]
 8003a80:	e7e6      	b.n	8003a50 <HAL_RCC_OscConfig+0x188>
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a88:	6022      	str	r2, [r4, #0]
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a90:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8003a96:	f7ff f973 	bl	8002d80 <HAL_GetTick>
 8003a9a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	0398      	lsls	r0, r3, #14
 8003aa0:	f57f af65 	bpl.w	800396e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7ff f96c 	bl	8002d80 <HAL_GetTick>
 8003aa8:	eba0 0008 	sub.w	r0, r0, r8
 8003aac:	2864      	cmp	r0, #100	; 0x64
 8003aae:	d9f5      	bls.n	8003a9c <HAL_RCC_OscConfig+0x1d4>
 8003ab0:	e7aa      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ab2:	2e04      	cmp	r6, #4
 8003ab4:	d003      	beq.n	8003abe <HAL_RCC_OscConfig+0x1f6>
 8003ab6:	2e0c      	cmp	r6, #12
 8003ab8:	d110      	bne.n	8003adc <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aba:	2f02      	cmp	r7, #2
 8003abc:	d10e      	bne.n	8003adc <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	0559      	lsls	r1, r3, #21
 8003ac2:	d503      	bpl.n	8003acc <HAL_RCC_OscConfig+0x204>
 8003ac4:	68eb      	ldr	r3, [r5, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f43f af02 	beq.w	80038d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003acc:	6863      	ldr	r3, [r4, #4]
 8003ace:	692a      	ldr	r2, [r5, #16]
 8003ad0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003ad4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	e74c      	b.n	8003976 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003adc:	68eb      	ldr	r3, [r5, #12]
 8003ade:	b17b      	cbz	r3, 8003b00 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ae8:	f7ff f94a 	bl	8002d80 <HAL_GetTick>
 8003aec:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	055a      	lsls	r2, r3, #21
 8003af2:	d4eb      	bmi.n	8003acc <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af4:	f7ff f944 	bl	8002d80 <HAL_GetTick>
 8003af8:	1bc0      	subs	r0, r0, r7
 8003afa:	2802      	cmp	r0, #2
 8003afc:	d9f7      	bls.n	8003aee <HAL_RCC_OscConfig+0x226>
 8003afe:	e783      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003b08:	f7ff f93a 	bl	8002d80 <HAL_GetTick>
 8003b0c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	055b      	lsls	r3, r3, #21
 8003b12:	f57f af30 	bpl.w	8003976 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7ff f933 	bl	8002d80 <HAL_GetTick>
 8003b1a:	1bc0      	subs	r0, r0, r7
 8003b1c:	2802      	cmp	r0, #2
 8003b1e:	d9f6      	bls.n	8003b0e <HAL_RCC_OscConfig+0x246>
 8003b20:	e772      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	08008858 	.word	0x08008858
 8003b2c:	200000ec 	.word	0x200000ec
 8003b30:	200000f4 	.word	0x200000f4
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b34:	696b      	ldr	r3, [r5, #20]
 8003b36:	b19b      	cbz	r3, 8003b60 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8003b38:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003b44:	f7ff f91c 	bl	8002d80 <HAL_GetTick>
 8003b48:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003b4e:	079a      	lsls	r2, r3, #30
 8003b50:	f53f af15 	bmi.w	800397e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b54:	f7ff f914 	bl	8002d80 <HAL_GetTick>
 8003b58:	1bc0      	subs	r0, r0, r7
 8003b5a:	2802      	cmp	r0, #2
 8003b5c:	d9f5      	bls.n	8003b4a <HAL_RCC_OscConfig+0x282>
 8003b5e:	e753      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8003b60:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003b6c:	f7ff f908 	bl	8002d80 <HAL_GetTick>
 8003b70:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b72:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003b76:	079b      	lsls	r3, r3, #30
 8003b78:	f57f af01 	bpl.w	800397e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7c:	f7ff f900 	bl	8002d80 <HAL_GetTick>
 8003b80:	1bc0      	subs	r0, r0, r7
 8003b82:	2802      	cmp	r0, #2
 8003b84:	d9f5      	bls.n	8003b72 <HAL_RCC_OscConfig+0x2aa>
 8003b86:	e73f      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b8a:	00df      	lsls	r7, r3, #3
 8003b8c:	d429      	bmi.n	8003be2 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ba0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba4:	4f85      	ldr	r7, [pc, #532]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	05d8      	lsls	r0, r3, #23
 8003baa:	d51d      	bpl.n	8003be8 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bac:	68ab      	ldr	r3, [r5, #8]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d12b      	bne.n	8003c0a <HAL_RCC_OscConfig+0x342>
 8003bb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003bbe:	f7ff f8df 	bl	8002d80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003bc6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003bcc:	079a      	lsls	r2, r3, #30
 8003bce:	d542      	bpl.n	8003c56 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8003bd0:	f1b8 0f00 	cmp.w	r8, #0
 8003bd4:	f43f aed7 	beq.w	8003986 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bde:	65a3      	str	r3, [r4, #88]	; 0x58
 8003be0:	e6d1      	b.n	8003986 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	f04f 0800 	mov.w	r8, #0
 8003be6:	e7dd      	b.n	8003ba4 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003bf0:	f7ff f8c6 	bl	8002d80 <HAL_GetTick>
 8003bf4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	05d9      	lsls	r1, r3, #23
 8003bfa:	d4d7      	bmi.n	8003bac <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfc:	f7ff f8c0 	bl	8002d80 <HAL_GetTick>
 8003c00:	eba0 0009 	sub.w	r0, r0, r9
 8003c04:	2802      	cmp	r0, #2
 8003c06:	d9f6      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x32e>
 8003c08:	e6fe      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d106      	bne.n	8003c1c <HAL_RCC_OscConfig+0x354>
 8003c0e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003c1a:	e7ca      	b.n	8003bb2 <HAL_RCC_OscConfig+0x2ea>
 8003c1c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8003c28:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003c2c:	f022 0204 	bic.w	r2, r2, #4
 8003c30:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1c2      	bne.n	8003bbe <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8003c38:	f7ff f8a2 	bl	8002d80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003c40:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c42:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003c46:	079b      	lsls	r3, r3, #30
 8003c48:	d5c2      	bpl.n	8003bd0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7ff f899 	bl	8002d80 <HAL_GetTick>
 8003c4e:	1bc0      	subs	r0, r0, r7
 8003c50:	4548      	cmp	r0, r9
 8003c52:	d9f6      	bls.n	8003c42 <HAL_RCC_OscConfig+0x37a>
 8003c54:	e6d8      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f7ff f893 	bl	8002d80 <HAL_GetTick>
 8003c5a:	1bc0      	subs	r0, r0, r7
 8003c5c:	4548      	cmp	r0, r9
 8003c5e:	d9b3      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x300>
 8003c60:	e6d2      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	f040 808f 	bne.w	8003d86 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8003c68:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003c6c:	f003 0103 	and.w	r1, r3, #3
 8003c70:	4291      	cmp	r1, r2
 8003c72:	d124      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c74:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003c76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c7a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003c80:	d11d      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c82:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003c84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c88:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003c8c:	d117      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c8e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003c90:	3a07      	subs	r2, #7
 8003c92:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8003c96:	bf18      	it	ne
 8003c98:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9a:	4291      	cmp	r1, r2
 8003c9c:	d10f      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c9e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003ca0:	0852      	lsrs	r2, r2, #1
 8003ca2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003ca6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ca8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cae:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003cb0:	0852      	lsrs	r2, r2, #1
 8003cb2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003cb6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003cbc:	d04a      	beq.n	8003d54 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cbe:	2e0c      	cmp	r6, #12
 8003cc0:	f43f ae06 	beq.w	80038d0 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	015f      	lsls	r7, r3, #5
 8003cc8:	f53f ae02 	bmi.w	80038d0 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	00de      	lsls	r6, r3, #3
 8003cd0:	f53f adfe 	bmi.w	80038d0 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cda:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003cdc:	f7ff f850 	bl	8002d80 <HAL_GetTick>
 8003ce0:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	0198      	lsls	r0, r3, #6
 8003ce6:	d42f      	bmi.n	8003d48 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce8:	68e2      	ldr	r2, [r4, #12]
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <HAL_RCC_OscConfig+0x4f8>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003cf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003cf8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003d00:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003d02:	0912      	lsrs	r2, r2, #4
 8003d04:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003d08:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003d0a:	0852      	lsrs	r2, r2, #1
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003d12:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003d14:	0852      	lsrs	r2, r2, #1
 8003d16:	3a01      	subs	r2, #1
 8003d18:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003d1c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d24:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d26:	68e3      	ldr	r3, [r4, #12]
 8003d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8003d2e:	f7ff f827 	bl	8002d80 <HAL_GetTick>
 8003d32:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	0199      	lsls	r1, r3, #6
 8003d38:	f53f ae29 	bmi.w	800398e <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7ff f820 	bl	8002d80 <HAL_GetTick>
 8003d40:	1b40      	subs	r0, r0, r5
 8003d42:	2802      	cmp	r0, #2
 8003d44:	d9f6      	bls.n	8003d34 <HAL_RCC_OscConfig+0x46c>
 8003d46:	e65f      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7ff f81a 	bl	8002d80 <HAL_GetTick>
 8003d4c:	1b80      	subs	r0, r0, r6
 8003d4e:	2802      	cmp	r0, #2
 8003d50:	d9c7      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x41a>
 8003d52:	e659      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	019a      	lsls	r2, r3, #6
 8003d58:	f53f ae19 	bmi.w	800398e <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d62:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d64:	68e3      	ldr	r3, [r4, #12]
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8003d6c:	f7ff f808 	bl	8002d80 <HAL_GetTick>
 8003d70:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	f53f ae0a 	bmi.w	800398e <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7ff f801 	bl	8002d80 <HAL_GetTick>
 8003d7e:	1b40      	subs	r0, r0, r5
 8003d80:	2802      	cmp	r0, #2
 8003d82:	d9f6      	bls.n	8003d72 <HAL_RCC_OscConfig+0x4aa>
 8003d84:	e640      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d86:	2e0c      	cmp	r6, #12
 8003d88:	f43f ada2 	beq.w	80038d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003d94:	f7fe fff4 	bl	8002d80 <HAL_GetTick>
 8003d98:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003da0:	d105      	bne.n	8003dae <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003da2:	68e1      	ldr	r1, [r4, #12]
 8003da4:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <HAL_RCC_OscConfig+0x4fc>)
 8003da6:	400a      	ands	r2, r1
 8003da8:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8003daa:	4618      	mov	r0, r3
 8003dac:	e591      	b.n	80038d2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fe ffe7 	bl	8002d80 <HAL_GetTick>
 8003db2:	1b40      	subs	r0, r0, r5
 8003db4:	2802      	cmp	r0, #2
 8003db6:	d9f0      	bls.n	8003d9a <HAL_RCC_OscConfig+0x4d2>
 8003db8:	e626      	b.n	8003a08 <HAL_RCC_OscConfig+0x140>
 8003dba:	bf00      	nop
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	f99d808c 	.word	0xf99d808c
 8003dc4:	feeefffc 	.word	0xfeeefffc

08003dc8 <HAL_RCC_ClockConfig>:
{
 8003dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dcc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003dce:	4604      	mov	r4, r0
 8003dd0:	b910      	cbnz	r0, 8003dd8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003dd2:	2001      	movs	r0, #1
}
 8003dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	; (8003f08 <HAL_RCC_ClockConfig+0x140>)
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	428b      	cmp	r3, r1
 8003de2:	d32c      	bcc.n	8003e3e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	0786      	lsls	r6, r0, #30
 8003de8:	d434      	bmi.n	8003e54 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	07c1      	lsls	r1, r0, #31
 8003dec:	d43f      	bmi.n	8003e6e <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dee:	6821      	ldr	r1, [r4, #0]
 8003df0:	078a      	lsls	r2, r1, #30
 8003df2:	d468      	bmi.n	8003ec6 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003df4:	4a44      	ldr	r2, [pc, #272]	; (8003f08 <HAL_RCC_ClockConfig+0x140>)
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	42ab      	cmp	r3, r5
 8003dfe:	d86f      	bhi.n	8003ee0 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	f011 0f04 	tst.w	r1, #4
 8003e04:	4d41      	ldr	r5, [pc, #260]	; (8003f0c <HAL_RCC_ClockConfig+0x144>)
 8003e06:	d177      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	070b      	lsls	r3, r1, #28
 8003e0a:	d506      	bpl.n	8003e1a <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0c:	68ab      	ldr	r3, [r5, #8]
 8003e0e:	6922      	ldr	r2, [r4, #16]
 8003e10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003e14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e18:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e1a:	f7ff fd07 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8003e1e:	68ab      	ldr	r3, [r5, #8]
 8003e20:	4a3b      	ldr	r2, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x148>)
 8003e22:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8003e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	40d8      	lsrs	r0, r3
 8003e32:	4b38      	ldr	r3, [pc, #224]	; (8003f14 <HAL_RCC_ClockConfig+0x14c>)
 8003e34:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003e36:	4b38      	ldr	r3, [pc, #224]	; (8003f18 <HAL_RCC_ClockConfig+0x150>)
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	f7fe bf61 	b.w	8002d00 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	6813      	ldr	r3, [r2, #0]
 8003e40:	f023 0307 	bic.w	r3, r3, #7
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e48:	6813      	ldr	r3, [r2, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	428b      	cmp	r3, r1
 8003e50:	d1bf      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xa>
 8003e52:	e7c7      	b.n	8003de4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e54:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <HAL_RCC_ClockConfig+0x144>)
 8003e56:	68a6      	ldr	r6, [r4, #8]
 8003e58:	6891      	ldr	r1, [r2, #8]
 8003e5a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8003e5e:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e60:	bf81      	itttt	hi
 8003e62:	6893      	ldrhi	r3, [r2, #8]
 8003e64:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8003e68:	4333      	orrhi	r3, r6
 8003e6a:	6093      	strhi	r3, [r2, #8]
 8003e6c:	e7bd      	b.n	8003dea <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6e:	6862      	ldr	r2, [r4, #4]
 8003e70:	4e26      	ldr	r6, [pc, #152]	; (8003f0c <HAL_RCC_ClockConfig+0x144>)
 8003e72:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e74:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e76:	d11a      	bne.n	8003eae <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e7c:	d0a9      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e7e:	68b3      	ldr	r3, [r6, #8]
 8003e80:	f023 0303 	bic.w	r3, r3, #3
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003e88:	f7fe ff7a 	bl	8002d80 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003e90:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	68b3      	ldr	r3, [r6, #8]
 8003e94:	6862      	ldr	r2, [r4, #4]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003e9e:	d0a6      	beq.n	8003dee <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7fe ff6e 	bl	8002d80 <HAL_GetTick>
 8003ea4:	1bc0      	subs	r0, r0, r7
 8003ea6:	4540      	cmp	r0, r8
 8003ea8:	d9f3      	bls.n	8003e92 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8003eaa:	2003      	movs	r0, #3
 8003eac:	e792      	b.n	8003dd4 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eae:	2a02      	cmp	r2, #2
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003eb6:	e7e1      	b.n	8003e7c <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eb8:	b912      	cbnz	r2, 8003ec0 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eba:	f013 0f02 	tst.w	r3, #2
 8003ebe:	e7dd      	b.n	8003e7c <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003ec4:	e7da      	b.n	8003e7c <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ec6:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <HAL_RCC_ClockConfig+0x144>)
 8003ec8:	68a6      	ldr	r6, [r4, #8]
 8003eca:	6890      	ldr	r0, [r2, #8]
 8003ecc:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8003ed0:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed2:	bf3f      	itttt	cc
 8003ed4:	6893      	ldrcc	r3, [r2, #8]
 8003ed6:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8003eda:	4333      	orrcc	r3, r6
 8003edc:	6093      	strcc	r3, [r2, #8]
 8003ede:	e789      	b.n	8003df4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee0:	6813      	ldr	r3, [r2, #0]
 8003ee2:	f023 0307 	bic.w	r3, r3, #7
 8003ee6:	432b      	orrs	r3, r5
 8003ee8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	6813      	ldr	r3, [r2, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	42ab      	cmp	r3, r5
 8003ef2:	f47f af6e 	bne.w	8003dd2 <HAL_RCC_ClockConfig+0xa>
 8003ef6:	e783      	b.n	8003e00 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	68ab      	ldr	r3, [r5, #8]
 8003efa:	68e2      	ldr	r2, [r4, #12]
 8003efc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60ab      	str	r3, [r5, #8]
 8003f04:	e780      	b.n	8003e08 <HAL_RCC_ClockConfig+0x40>
 8003f06:	bf00      	nop
 8003f08:	40022000 	.word	0x40022000
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	08008858 	.word	0x08008858
 8003f14:	200000ec 	.word	0x200000ec
 8003f18:	200000f4 	.word	0x200000f4

08003f1c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003f1e:	4a06      	ldr	r2, [pc, #24]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003f26:	5cd3      	ldrb	r3, [r2, r3]
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f2a:	6810      	ldr	r0, [r2, #0]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
}
 8003f30:	40d8      	lsrs	r0, r3
 8003f32:	4770      	bx	lr
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08008868 	.word	0x08008868
 8003f3c:	200000ec 	.word	0x200000ec

08003f40 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003f42:	4a06      	ldr	r2, [pc, #24]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003f4a:	5cd3      	ldrb	r3, [r2, r3]
 8003f4c:	4a04      	ldr	r2, [pc, #16]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f4e:	6810      	ldr	r0, [r2, #0]
 8003f50:	f003 031f 	and.w	r3, r3, #31
}
 8003f54:	40d8      	lsrs	r0, r3
 8003f56:	4770      	bx	lr
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08008868 	.word	0x08008868
 8003f60:	200000ec 	.word	0x200000ec

08003f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	461f      	mov	r7, r3
 8003f6a:	4689      	mov	r9, r1
 8003f6c:	4690      	mov	r8, r2
 8003f6e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f70:	f7fe ff06 	bl	8002d80 <HAL_GetTick>
 8003f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f76:	443b      	add	r3, r7
 8003f78:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003f7a:	f7fe ff01 	bl	8002d80 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8003f80:	681e      	ldr	r6, [r3, #0]
 8003f82:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8003f86:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8003f88:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f8a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	6893      	ldr	r3, [r2, #8]
 8003f90:	ea39 0303 	bics.w	r3, r9, r3
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	4543      	cmp	r3, r8
 8003f9c:	d101      	bne.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e02e      	b.n	8004000 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8003fa2:	1c7b      	adds	r3, r7, #1
 8003fa4:	d0f3      	beq.n	8003f8e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fa6:	f7fe feeb 	bl	8002d80 <HAL_GetTick>
 8003faa:	eba0 000a 	sub.w	r0, r0, sl
 8003fae:	42a8      	cmp	r0, r5
 8003fb0:	d329      	bcc.n	8004006 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fba:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbc:	6862      	ldr	r2, [r4, #4]
 8003fbe:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003fc2:	d10a      	bne.n	8003fda <SPI_WaitFlagStateUntilTimeout+0x76>
 8003fc4:	68a2      	ldr	r2, [r4, #8]
 8003fc6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003fca:	d002      	beq.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fcc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003fd0:	d103      	bne.n	8003fda <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003fdc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003fe0:	d107      	bne.n	8003ff2 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003ffe:	2003      	movs	r0, #3
}
 8004000:	b002      	add	sp, #8
 8004002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8004006:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004008:	2b00      	cmp	r3, #0
      count--;
 800400a:	9b01      	ldr	r3, [sp, #4]
 800400c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004010:	bf08      	it	eq
 8004012:	2500      	moveq	r5, #0
      count--;
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	e7b9      	b.n	8003f8c <SPI_WaitFlagStateUntilTimeout+0x28>
 8004018:	200000ec 	.word	0x200000ec

0800401c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	4699      	mov	r9, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004022:	2300      	movs	r3, #0
{
 8004024:	4604      	mov	r4, r0
 8004026:	4688      	mov	r8, r1
 8004028:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800402a:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800402e:	f7fe fea7 	bl	8002d80 <HAL_GetTick>
 8004032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004034:	444b      	add	r3, r9
 8004036:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8004038:	f7fe fea2 	bl	8002d80 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800403c:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <SPI_WaitFifoStateUntilTimeout+0xd4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800403e:	f8d4 b000 	ldr.w	fp, [r4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004042:	681e      	ldr	r6, [r3, #0]
 8004044:	2323      	movs	r3, #35	; 0x23
 8004046:	435e      	muls	r6, r3
 8004048:	0d36      	lsrs	r6, r6, #20
 800404a:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 800404c:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800404e:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	6893      	ldr	r3, [r2, #8]
 8004054:	ea03 0308 	and.w	r3, r3, r8
 8004058:	42bb      	cmp	r3, r7
 800405a:	d101      	bne.n	8004060 <SPI_WaitFifoStateUntilTimeout+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 800405c:	2000      	movs	r0, #0
 800405e:	e03a      	b.n	80040d6 <SPI_WaitFifoStateUntilTimeout+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004060:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8004064:	d107      	bne.n	8004076 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004066:	b937      	cbnz	r7, 8004076 <SPI_WaitFifoStateUntilTimeout+0x5a>
      tmpreg8 = *ptmpreg8;
 8004068:	f89b 300c 	ldrb.w	r3, [fp, #12]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8004072:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8004076:	f1b9 3fff 	cmp.w	r9, #4294967295
 800407a:	d0ea      	beq.n	8004052 <SPI_WaitFifoStateUntilTimeout+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800407c:	f7fe fe80 	bl	8002d80 <HAL_GetTick>
 8004080:	eba0 000a 	sub.w	r0, r0, sl
 8004084:	42a8      	cmp	r0, r5
 8004086:	d329      	bcc.n	80040dc <SPI_WaitFifoStateUntilTimeout+0xc0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004090:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004092:	6862      	ldr	r2, [r4, #4]
 8004094:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004098:	d10a      	bne.n	80040b0 <SPI_WaitFifoStateUntilTimeout+0x94>
 800409a:	68a2      	ldr	r2, [r4, #8]
 800409c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80040a0:	d002      	beq.n	80040a8 <SPI_WaitFifoStateUntilTimeout+0x8c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80040a6:	d103      	bne.n	80040b0 <SPI_WaitFifoStateUntilTimeout+0x94>
          __HAL_SPI_DISABLE(hspi);
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ae:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040b2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80040b6:	d107      	bne.n	80040c8 <SPI_WaitFifoStateUntilTimeout+0xac>
          SPI_RESET_CRC(hspi);
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80040ce:	2300      	movs	r3, #0
 80040d0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 80040d4:	2003      	movs	r0, #3
}
 80040d6:	b003      	add	sp, #12
 80040d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (count == 0U)
 80040dc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80040de:	2b00      	cmp	r3, #0
      count--;
 80040e0:	9b01      	ldr	r3, [sp, #4]
 80040e2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80040e6:	bf08      	it	eq
 80040e8:	2500      	moveq	r5, #0
      count--;
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	e7b0      	b.n	8004050 <SPI_WaitFifoStateUntilTimeout+0x34>
 80040ee:	bf00      	nop
 80040f0:	200000ec 	.word	0x200000ec

080040f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80040f6:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f8:	6842      	ldr	r2, [r0, #4]
 80040fa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80040fe:	4604      	mov	r4, r0
 8004100:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004102:	d10b      	bne.n	800411c <SPI_EndRxTransaction+0x28>
 8004104:	6882      	ldr	r2, [r0, #8]
 8004106:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800410a:	d002      	beq.n	8004112 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800410c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004110:	d104      	bne.n	800411c <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004112:	6821      	ldr	r1, [r4, #0]
 8004114:	680a      	ldr	r2, [r1, #0]
 8004116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411a:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800411c:	9600      	str	r6, [sp, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	4620      	mov	r0, r4
 8004124:	9303      	str	r3, [sp, #12]
 8004126:	f7ff ff1d 	bl	8003f64 <SPI_WaitFlagStateUntilTimeout>
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	4605      	mov	r5, r0
 800412e:	b128      	cbz	r0, 800413c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004130:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004132:	f043 0320 	orr.w	r3, r3, #32
 8004136:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004138:	2503      	movs	r5, #3
 800413a:	e013      	b.n	8004164 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413c:	6862      	ldr	r2, [r4, #4]
 800413e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004142:	d10f      	bne.n	8004164 <SPI_EndRxTransaction+0x70>
 8004144:	68a2      	ldr	r2, [r4, #8]
 8004146:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800414a:	d002      	beq.n	8004152 <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800414c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004150:	d108      	bne.n	8004164 <SPI_EndRxTransaction+0x70>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004152:	9600      	str	r6, [sp, #0]
 8004154:	2200      	movs	r2, #0
 8004156:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800415a:	4620      	mov	r0, r4
 800415c:	f7ff ff5e 	bl	800401c <SPI_WaitFifoStateUntilTimeout>
 8004160:	2800      	cmp	r0, #0
 8004162:	d1e5      	bne.n	8004130 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 8004164:	4628      	mov	r0, r5
 8004166:	b004      	add	sp, #16
 8004168:	bd70      	pop	{r4, r5, r6, pc}

0800416a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800416a:	b530      	push	{r4, r5, lr}
 800416c:	b085      	sub	sp, #20
 800416e:	460b      	mov	r3, r1
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004170:	9200      	str	r2, [sp, #0]
 8004172:	9103      	str	r1, [sp, #12]
{
 8004174:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004176:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800417a:	2200      	movs	r2, #0
{
 800417c:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800417e:	f7ff ff4d 	bl	800401c <SPI_WaitFifoStateUntilTimeout>
 8004182:	9b03      	ldr	r3, [sp, #12]
 8004184:	4602      	mov	r2, r0
 8004186:	b128      	cbz	r0, 8004194 <SPI_EndRxTxTransaction+0x2a>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004188:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800418a:	f043 0320 	orr.w	r3, r3, #32
 800418e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004190:	2003      	movs	r0, #3
 8004192:	e011      	b.n	80041b8 <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004194:	9500      	str	r5, [sp, #0]
 8004196:	2180      	movs	r1, #128	; 0x80
 8004198:	4620      	mov	r0, r4
 800419a:	9303      	str	r3, [sp, #12]
 800419c:	f7ff fee2 	bl	8003f64 <SPI_WaitFlagStateUntilTimeout>
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	4602      	mov	r2, r0
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d1ef      	bne.n	8004188 <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041a8:	9500      	str	r5, [sp, #0]
 80041aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041ae:	4620      	mov	r0, r4
 80041b0:	f7ff ff34 	bl	800401c <SPI_WaitFifoStateUntilTimeout>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d1e7      	bne.n	8004188 <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 80041b8:	b005      	add	sp, #20
 80041ba:	bd30      	pop	{r4, r5, pc}

080041bc <HAL_SPI_MspInit>:
}
 80041bc:	4770      	bx	lr

080041be <HAL_SPI_Init>:
{
 80041be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 80041c0:	4604      	mov	r4, r0
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d079      	beq.n	80042ba <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d14f      	bne.n	800426c <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041cc:	6842      	ldr	r2, [r0, #4]
 80041ce:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80041d2:	d000      	beq.n	80041d6 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041d4:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80041d6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80041da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041de:	b923      	cbnz	r3, 80041ea <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 80041e0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80041e4:	4620      	mov	r0, r4
 80041e6:	f7ff ffe9 	bl	80041bc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80041ea:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041ec:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80041ee:	2302      	movs	r3, #2
 80041f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80041f4:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80041fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fe:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	d85b      	bhi.n	80042be <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004206:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800420a:	d000      	beq.n	800420e <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420c:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800420e:	6863      	ldr	r3, [r4, #4]
 8004210:	68a7      	ldr	r7, [r4, #8]
 8004212:	69a0      	ldr	r0, [r4, #24]
 8004214:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004216:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 800421a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800421e:	433b      	orrs	r3, r7
 8004220:	6927      	ldr	r7, [r4, #16]
 8004222:	f007 0702 	and.w	r7, r7, #2
 8004226:	433b      	orrs	r3, r7
 8004228:	6967      	ldr	r7, [r4, #20]
 800422a:	f007 0701 	and.w	r7, r7, #1
 800422e:	433b      	orrs	r3, r7
 8004230:	f400 7700 	and.w	r7, r0, #512	; 0x200
 8004234:	433b      	orrs	r3, r7
 8004236:	69e7      	ldr	r7, [r4, #28]
 8004238:	f007 0738 	and.w	r7, r7, #56	; 0x38
 800423c:	433b      	orrs	r3, r7
 800423e:	6a27      	ldr	r7, [r4, #32]
 8004240:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8004244:	433b      	orrs	r3, r7
 8004246:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 800424a:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800424c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004250:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004252:	d111      	bne.n	8004278 <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004254:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004256:	bb6b      	cbnz	r3, 80042b4 <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004258:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800425c:	d90a      	bls.n	8004274 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800425e:	2302      	movs	r3, #2
 8004260:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e005      	b.n	8004278 <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800426c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800426e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004272:	e7b0      	b.n	80041d6 <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004274:	2301      	movs	r3, #1
 8004276:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800427a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	f007 0708 	and.w	r7, r7, #8
 8004284:	433b      	orrs	r3, r7
 8004286:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800428a:	0c00      	lsrs	r0, r0, #16
 800428c:	4319      	orrs	r1, r3
 800428e:	f000 0004 	and.w	r0, r0, #4
 8004292:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004294:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004298:	bf08      	it	eq
 800429a:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800429c:	ea45 0501 	orr.w	r5, r5, r1
 80042a0:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042a2:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80042a6:	bf08      	it	eq
 80042a8:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 80042aa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ac:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042ae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80042b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d1df      	bne.n	8004278 <HAL_SPI_Init+0xba>
 80042b8:	e7d3      	b.n	8004262 <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 80042ba:	2001      	movs	r0, #1
 80042bc:	e7f9      	b.n	80042b2 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042be:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042c0:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 80042c4:	e7a1      	b.n	800420a <HAL_SPI_Init+0x4c>

080042c6 <HAL_SPI_MspDeInit>:
 80042c6:	4770      	bx	lr

080042c8 <HAL_SPI_DeInit>:
{
 80042c8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80042ca:	4604      	mov	r4, r0
 80042cc:	b180      	cbz	r0, 80042f0 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80042ce:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80042d0:	2302      	movs	r3, #2
 80042d2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80042d6:	6813      	ldr	r3, [r2, #0]
 80042d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042dc:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80042de:	f7ff fff2 	bl	80042c6 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042e2:	2000      	movs	r0, #0
 80042e4:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 80042e6:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 80042ea:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 80042ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80042f0:	2001      	movs	r0, #1
 80042f2:	e7fc      	b.n	80042ee <HAL_SPI_DeInit+0x26>

080042f4 <HAL_SPI_TransmitReceive>:
{
 80042f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f8:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 80042fe:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8004302:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004306:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8004308:	2b01      	cmp	r3, #1
{
 800430a:	4604      	mov	r4, r0
 800430c:	460e      	mov	r6, r1
 800430e:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 8004310:	f000 81b4 	beq.w	800467c <HAL_SPI_TransmitReceive+0x388>
 8004314:	2301      	movs	r3, #1
 8004316:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800431a:	f7fe fd31 	bl	8002d80 <HAL_GetTick>
  tmp_state           = hspi->State;
 800431e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8004322:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004326:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8004328:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 800432a:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800432c:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8004330:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004332:	d00b      	beq.n	800434c <HAL_SPI_TransmitReceive+0x58>
 8004334:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004338:	f040 819e 	bne.w	8004678 <HAL_SPI_TransmitReceive+0x384>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800433c:	68a3      	ldr	r3, [r4, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f040 819a 	bne.w	8004678 <HAL_SPI_TransmitReceive+0x384>
 8004344:	f1bc 0f04 	cmp.w	ip, #4
 8004348:	f040 8196 	bne.w	8004678 <HAL_SPI_TransmitReceive+0x384>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800434c:	2e00      	cmp	r6, #0
 800434e:	f000 8176 	beq.w	800463e <HAL_SPI_TransmitReceive+0x34a>
 8004352:	f1ba 0f00 	cmp.w	sl, #0
 8004356:	f000 8172 	beq.w	800463e <HAL_SPI_TransmitReceive+0x34a>
 800435a:	f1b9 0f00 	cmp.w	r9, #0
 800435e:	f000 816e 	beq.w	800463e <HAL_SPI_TransmitReceive+0x34a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004362:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004366:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800436a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800436c:	bf1c      	itt	ne
 800436e:	2305      	movne	r3, #5
 8004370:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004374:	2300      	movs	r3, #0
 8004376:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8004378:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800437c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 800437e:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8004386:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800438a:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800438c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004390:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004394:	d107      	bne.n	80043a6 <HAL_SPI_TransmitReceive+0xb2>
    SPI_RESET_CRC(hspi);
 8004396:	682b      	ldr	r3, [r5, #0]
 8004398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800439c:	602b      	str	r3, [r5, #0]
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043a4:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80043a6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043aa:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80043ac:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80043b0:	d802      	bhi.n	80043b8 <HAL_SPI_TransmitReceive+0xc4>
 80043b2:	f1b9 0f01 	cmp.w	r9, #1
 80043b6:	d03a      	beq.n	800442e <HAL_SPI_TransmitReceive+0x13a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043bc:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80043c2:	bf5e      	ittt	pl
 80043c4:	682b      	ldrpl	r3, [r5, #0]
 80043c6:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80043ca:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043cc:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80043d0:	d97f      	bls.n	80044d2 <HAL_SPI_TransmitReceive+0x1de>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043d2:	b112      	cbz	r2, 80043da <HAL_SPI_TransmitReceive+0xe6>
 80043d4:	f1b9 0f01 	cmp.w	r9, #1
 80043d8:	d107      	bne.n	80043ea <HAL_SPI_TransmitReceive+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043da:	f836 3b02 	ldrh.w	r3, [r6], #2
 80043de:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 80043e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e2:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80043ea:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80043ee:	f001 0604 	and.w	r6, r1, #4
 80043f2:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	b9db      	cbnz	r3, 8004434 <HAL_SPI_TransmitReceive+0x140>
 80043fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004400:	b29b      	uxth	r3, r3
 8004402:	b9bb      	cbnz	r3, 8004434 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004404:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440a:	f040 8101 	bne.w	8004610 <HAL_SPI_TransmitReceive+0x31c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800440e:	2201      	movs	r2, #1
 8004410:	f8cd 8000 	str.w	r8, [sp]
 8004414:	463b      	mov	r3, r7
 8004416:	4611      	mov	r1, r2
 8004418:	4620      	mov	r0, r4
 800441a:	f7ff fda3 	bl	8003f64 <SPI_WaitFlagStateUntilTimeout>
 800441e:	2800      	cmp	r0, #0
 8004420:	f000 80ee 	beq.w	8004600 <HAL_SPI_TransmitReceive+0x30c>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004424:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004426:	f043 0302 	orr.w	r3, r3, #2
 800442a:	6623      	str	r3, [r4, #96]	; 0x60
 800442c:	e02a      	b.n	8004484 <HAL_SPI_TransmitReceive+0x190>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800442e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004432:	e7c3      	b.n	80043bc <HAL_SPI_TransmitReceive+0xc8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	0790      	lsls	r0, r2, #30
 800443a:	d507      	bpl.n	800444c <HAL_SPI_TransmitReceive+0x158>
 800443c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800443e:	b292      	uxth	r2, r2
 8004440:	b122      	cbz	r2, 800444c <HAL_SPI_TransmitReceive+0x158>
 8004442:	f1b9 0f00 	cmp.w	r9, #0
 8004446:	d128      	bne.n	800449a <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 8004448:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	f011 0101 	ands.w	r1, r1, #1
 8004452:	d00f      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x180>
 8004454:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004458:	b292      	uxth	r2, r2
 800445a:	b15a      	cbz	r2, 8004474 <HAL_SPI_TransmitReceive+0x180>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004460:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004464:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004466:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800446a:	3b01      	subs	r3, #1
 800446c:	b29b      	uxth	r3, r3
 800446e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8004472:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004474:	f7fe fc84 	bl	8002d80 <HAL_GetTick>
 8004478:	eba0 0008 	sub.w	r0, r0, r8
 800447c:	42b8      	cmp	r0, r7
 800447e:	d3ba      	bcc.n	80043f6 <HAL_SPI_TransmitReceive+0x102>
 8004480:	1c79      	adds	r1, r7, #1
 8004482:	d0b8      	beq.n	80043f6 <HAL_SPI_TransmitReceive+0x102>
          errorcode = HAL_TIMEOUT;
 8004484:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004486:	2301      	movs	r3, #1
 8004488:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800448c:	2300      	movs	r3, #0
 800448e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004492:	4628      	mov	r0, r5
 8004494:	b004      	add	sp, #16
 8004496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800449a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800449c:	f832 1b02 	ldrh.w	r1, [r2], #2
 80044a0:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80044a4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80044a6:	3a01      	subs	r2, #1
 80044a8:	b292      	uxth	r2, r2
 80044aa:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80044ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80044ae:	b292      	uxth	r2, r2
 80044b0:	2a00      	cmp	r2, #0
 80044b2:	d1c9      	bne.n	8004448 <HAL_SPI_TransmitReceive+0x154>
 80044b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80044b6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80044ba:	d1c5      	bne.n	8004448 <HAL_SPI_TransmitReceive+0x154>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80044bc:	b926      	cbnz	r6, 80044c8 <HAL_SPI_TransmitReceive+0x1d4>
 80044be:	b11d      	cbz	r5, 80044c8 <HAL_SPI_TransmitReceive+0x1d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c6:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	e7ba      	b.n	8004448 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d2:	b112      	cbz	r2, 80044da <HAL_SPI_TransmitReceive+0x1e6>
 80044d4:	f1b9 0f01 	cmp.w	r9, #1
 80044d8:	d10b      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x1fe>
      if (hspi->TxXferCount > 1U)
 80044da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d90d      	bls.n	80044fe <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e2:	f836 3b02 	ldrh.w	r3, [r6], #2
 80044e6:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 80044e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ea:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044ec:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80044f2:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80044f4:	f001 0604 	and.w	r6, r1, #4
 80044f8:	f000 0908 	and.w	r9, r0, #8
 80044fc:	e03c      	b.n	8004578 <HAL_SPI_TransmitReceive+0x284>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044fe:	7833      	ldrb	r3, [r6, #0]
 8004500:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 8004502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004504:	3301      	adds	r3, #1
 8004506:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004508:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800450a:	3b01      	subs	r3, #1
 800450c:	e7ef      	b.n	80044ee <HAL_SPI_TransmitReceive+0x1fa>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800450e:	6821      	ldr	r1, [r4, #0]
 8004510:	688b      	ldr	r3, [r1, #8]
 8004512:	079a      	lsls	r2, r3, #30
 8004514:	d505      	bpl.n	8004522 <HAL_SPI_TransmitReceive+0x22e>
 8004516:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	b113      	cbz	r3, 8004522 <HAL_SPI_TransmitReceive+0x22e>
 800451c:	2d00      	cmp	r5, #0
 800451e:	d135      	bne.n	800458c <HAL_SPI_TransmitReceive+0x298>
        txallowed = 0U;
 8004520:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004522:	6821      	ldr	r1, [r4, #0]
 8004524:	688b      	ldr	r3, [r1, #8]
 8004526:	f013 0301 	ands.w	r3, r3, #1
 800452a:	d01d      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x274>
 800452c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004530:	b292      	uxth	r2, r2
 8004532:	b1ca      	cbz	r2, 8004568 <HAL_SPI_TransmitReceive+0x274>
        if (hspi->RxXferCount > 1U)
 8004534:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004538:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 800453a:	b280      	uxth	r0, r0
 800453c:	2801      	cmp	r0, #1
 800453e:	d950      	bls.n	80045e2 <HAL_SPI_TransmitReceive+0x2ee>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004540:	68c8      	ldr	r0, [r1, #12]
 8004542:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004546:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004548:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800454c:	3a02      	subs	r2, #2
 800454e:	b292      	uxth	r2, r2
 8004550:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004554:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004558:	b292      	uxth	r2, r2
 800455a:	2a01      	cmp	r2, #1
 800455c:	d803      	bhi.n	8004566 <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800455e:	684a      	ldr	r2, [r1, #4]
 8004560:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004564:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8004566:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004568:	f7fe fc0a 	bl	8002d80 <HAL_GetTick>
 800456c:	eba0 0008 	sub.w	r0, r0, r8
 8004570:	42b8      	cmp	r0, r7
 8004572:	d342      	bcc.n	80045fa <HAL_SPI_TransmitReceive+0x306>
 8004574:	1c7b      	adds	r3, r7, #1
 8004576:	d185      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x190>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004578:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1c6      	bne.n	800450e <HAL_SPI_TransmitReceive+0x21a>
 8004580:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1c1      	bne.n	800450e <HAL_SPI_TransmitReceive+0x21a>
 800458a:	e73b      	b.n	8004404 <HAL_SPI_TransmitReceive+0x110>
        if (hspi->TxXferCount > 1U)
 800458c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8004590:	b292      	uxth	r2, r2
 8004592:	2a01      	cmp	r2, #1
 8004594:	d91d      	bls.n	80045d2 <HAL_SPI_TransmitReceive+0x2de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004596:	f833 2b02 	ldrh.w	r2, [r3], #2
 800459a:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800459c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800459e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045a0:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80045a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1b8      	bne.n	8004520 <HAL_SPI_TransmitReceive+0x22c>
 80045ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b4:	d1b4      	bne.n	8004520 <HAL_SPI_TransmitReceive+0x22c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80045b6:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80045b8:	b936      	cbnz	r6, 80045c8 <HAL_SPI_TransmitReceive+0x2d4>
 80045ba:	f1b9 0f00 	cmp.w	r9, #0
 80045be:	d003      	beq.n	80045c8 <HAL_SPI_TransmitReceive+0x2d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e7a6      	b.n	8004520 <HAL_SPI_TransmitReceive+0x22c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 80045d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045d8:	3301      	adds	r3, #1
 80045da:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80045dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045de:	3b01      	subs	r3, #1
 80045e0:	e7df      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x2ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045e2:	7b09      	ldrb	r1, [r1, #12]
 80045e4:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 80045e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80045e8:	3201      	adds	r2, #1
 80045ea:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80045ec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80045f0:	3a01      	subs	r2, #1
 80045f2:	b292      	uxth	r2, r2
 80045f4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 80045f8:	e7b5      	b.n	8004566 <HAL_SPI_TransmitReceive+0x272>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045fa:	2f00      	cmp	r7, #0
 80045fc:	d1bc      	bne.n	8004578 <HAL_SPI_TransmitReceive+0x284>
 80045fe:	e741      	b.n	8004484 <HAL_SPI_TransmitReceive+0x190>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004600:	68e3      	ldr	r3, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 8004602:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004604:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004608:	d11b      	bne.n	8004642 <HAL_SPI_TransmitReceive+0x34e>
      tmpreg = READ_REG(hspi->Instance->DR);
 800460a:	68eb      	ldr	r3, [r5, #12]
 800460c:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 800460e:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	6895      	ldr	r5, [r2, #8]
 8004614:	f015 0510 	ands.w	r5, r5, #16
 8004618:	d007      	beq.n	800462a <HAL_SPI_TransmitReceive+0x336>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800461a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800461c:	f043 0302 	orr.w	r3, r3, #2
 8004620:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004622:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004626:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8004628:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800462a:	4642      	mov	r2, r8
 800462c:	4639      	mov	r1, r7
 800462e:	4620      	mov	r0, r4
 8004630:	f7ff fd9b 	bl	800416a <SPI_EndRxTxTransaction>
 8004634:	2800      	cmp	r0, #0
 8004636:	f43f af26 	beq.w	8004486 <HAL_SPI_TransmitReceive+0x192>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800463a:	2320      	movs	r3, #32
 800463c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800463e:	2501      	movs	r5, #1
 8004640:	e721      	b.n	8004486 <HAL_SPI_TransmitReceive+0x192>
      tmpreg8 = *ptmpreg8;
 8004642:	7b2b      	ldrb	r3, [r5, #12]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 800464a:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800464e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004650:	2b02      	cmp	r3, #2
 8004652:	d1dd      	bne.n	8004610 <HAL_SPI_TransmitReceive+0x31c>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004654:	2201      	movs	r2, #1
 8004656:	f8cd 8000 	str.w	r8, [sp]
 800465a:	463b      	mov	r3, r7
 800465c:	4611      	mov	r1, r2
 800465e:	4620      	mov	r0, r4
 8004660:	f7ff fc80 	bl	8003f64 <SPI_WaitFlagStateUntilTimeout>
 8004664:	2800      	cmp	r0, #0
 8004666:	f47f aedd 	bne.w	8004424 <HAL_SPI_TransmitReceive+0x130>
        tmpreg8 = *ptmpreg8;
 800466a:	7b2b      	ldrb	r3, [r5, #12]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8004672:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004676:	e7cb      	b.n	8004610 <HAL_SPI_TransmitReceive+0x31c>
    errorcode = HAL_BUSY;
 8004678:	2502      	movs	r5, #2
 800467a:	e704      	b.n	8004486 <HAL_SPI_TransmitReceive+0x192>
  __HAL_LOCK(hspi);
 800467c:	2502      	movs	r5, #2
 800467e:	e708      	b.n	8004492 <HAL_SPI_TransmitReceive+0x19e>

08004680 <HAL_SPI_Receive>:
{
 8004680:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004684:	461e      	mov	r6, r3
  __IO uint32_t tmpreg = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 800468a:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800468e:	6843      	ldr	r3, [r0, #4]
 8004690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8004694:	4604      	mov	r4, r0
 8004696:	4688      	mov	r8, r1
 8004698:	4615      	mov	r5, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800469a:	d10c      	bne.n	80046b6 <HAL_SPI_Receive+0x36>
 800469c:	6883      	ldr	r3, [r0, #8]
 800469e:	b953      	cbnz	r3, 80046b6 <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046a0:	2304      	movs	r3, #4
 80046a2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046a6:	4613      	mov	r3, r2
 80046a8:	9600      	str	r6, [sp, #0]
 80046aa:	460a      	mov	r2, r1
 80046ac:	f7ff fe22 	bl	80042f4 <HAL_SPI_TransmitReceive>
}
 80046b0:	b004      	add	sp, #16
 80046b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80046b6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	f000 8102 	beq.w	80048c4 <HAL_SPI_Receive+0x244>
 80046c0:	2301      	movs	r3, #1
 80046c2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80046c6:	f7fe fb5b 	bl	8002d80 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80046ca:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80046ce:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80046d0:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80046d2:	b2d8      	uxtb	r0, r3
 80046d4:	f040 80f4 	bne.w	80048c0 <HAL_SPI_Receive+0x240>
  if ((pData == NULL) || (Size == 0U))
 80046d8:	f1b8 0f00 	cmp.w	r8, #0
 80046dc:	f000 809f 	beq.w	800481e <HAL_SPI_Receive+0x19e>
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	f000 809c 	beq.w	800481e <HAL_SPI_Receive+0x19e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046e6:	2304      	movs	r3, #4
 80046e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferSize  = Size;
 80046ee:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046f2:	2000      	movs	r0, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046f8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80046fa:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80046fe:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004702:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    SPI_RESET_CRC(hspi);
 8004706:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004708:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800470a:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800470c:	87e0      	strh	r0, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800470e:	d10d      	bne.n	800472c <HAL_SPI_Receive+0xac>
    SPI_RESET_CRC(hspi);
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004716:	602b      	str	r3, [r5, #0]
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800471e:	602b      	str	r3, [r5, #0]
    hspi->RxXferCount--;
 8004720:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004724:	3b01      	subs	r3, #1
 8004726:	b29b      	uxth	r3, r3
 8004728:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800472c:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800472e:	686b      	ldr	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004730:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004734:	bf8c      	ite	hi
 8004736:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800473a:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 800473e:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004740:	68a3      	ldr	r3, [r4, #8]
 8004742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004746:	d107      	bne.n	8004758 <HAL_SPI_Receive+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474e:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004756:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800475c:	bf5e      	ittt	pl
 800475e:	682b      	ldrpl	r3, [r5, #0]
 8004760:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004764:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004766:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800476a:	d923      	bls.n	80047b4 <HAL_SPI_Receive+0x134>
    while (hspi->RxXferCount > 0U)
 800476c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004770:	b29b      	uxth	r3, r3
 8004772:	b323      	cbz	r3, 80047be <HAL_SPI_Receive+0x13e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	07d1      	lsls	r1, r2, #31
 800477a:	d55a      	bpl.n	8004832 <HAL_SPI_Receive+0x1b2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004780:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004784:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004786:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800478a:	3b01      	subs	r3, #1
 800478c:	b29b      	uxth	r3, r3
 800478e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004792:	e7eb      	b.n	800476c <HAL_SPI_Receive+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	07d5      	lsls	r5, r2, #31
 800479a:	d538      	bpl.n	800480e <HAL_SPI_Receive+0x18e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800479c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800479e:	7b1b      	ldrb	r3, [r3, #12]
 80047a0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047a4:	3301      	adds	r3, #1
 80047a6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80047a8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 80047b4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ea      	bne.n	8004794 <HAL_SPI_Receive+0x114>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	d148      	bne.n	8004858 <HAL_SPI_Receive+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	6813      	ldr	r3, [r2, #0]
 80047ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047ce:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80047d0:	2201      	movs	r2, #1
 80047d2:	9700      	str	r7, [sp, #0]
 80047d4:	4633      	mov	r3, r6
 80047d6:	4611      	mov	r1, r2
 80047d8:	4620      	mov	r0, r4
 80047da:	f7ff fbc3 	bl	8003f64 <SPI_WaitFlagStateUntilTimeout>
 80047de:	b9e8      	cbnz	r0, 800481c <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047e0:	68e1      	ldr	r1, [r4, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047ea:	bf8b      	itete	hi
 80047ec:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047ee:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047f0:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047f2:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80047f4:	2201      	movs	r2, #1
 80047f6:	9700      	str	r7, [sp, #0]
 80047f8:	4633      	mov	r3, r6
 80047fa:	4611      	mov	r1, r2
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7ff fbb1 	bl	8003f64 <SPI_WaitFlagStateUntilTimeout>
 8004802:	b308      	cbz	r0, 8004848 <HAL_SPI_Receive+0x1c8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004804:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004806:	f043 0302 	orr.w	r3, r3, #2
 800480a:	6623      	str	r3, [r4, #96]	; 0x60
 800480c:	e006      	b.n	800481c <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800480e:	f7fe fab7 	bl	8002d80 <HAL_GetTick>
 8004812:	1bc0      	subs	r0, r0, r7
 8004814:	42b0      	cmp	r0, r6
 8004816:	d309      	bcc.n	800482c <HAL_SPI_Receive+0x1ac>
 8004818:	1c70      	adds	r0, r6, #1
 800481a:	d0cb      	beq.n	80047b4 <HAL_SPI_Receive+0x134>
          errorcode = HAL_TIMEOUT;
 800481c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800481e:	2301      	movs	r3, #1
 8004820:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004824:	2300      	movs	r3, #0
 8004826:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800482a:	e741      	b.n	80046b0 <HAL_SPI_Receive+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800482c:	2e00      	cmp	r6, #0
 800482e:	d1c1      	bne.n	80047b4 <HAL_SPI_Receive+0x134>
 8004830:	e7f4      	b.n	800481c <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004832:	f7fe faa5 	bl	8002d80 <HAL_GetTick>
 8004836:	1bc0      	subs	r0, r0, r7
 8004838:	42b0      	cmp	r0, r6
 800483a:	d302      	bcc.n	8004842 <HAL_SPI_Receive+0x1c2>
 800483c:	1c72      	adds	r2, r6, #1
 800483e:	d095      	beq.n	800476c <HAL_SPI_Receive+0xec>
 8004840:	e7ec      	b.n	800481c <HAL_SPI_Receive+0x19c>
 8004842:	2e00      	cmp	r6, #0
 8004844:	d192      	bne.n	800476c <HAL_SPI_Receive+0xec>
 8004846:	e7e9      	b.n	800481c <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004848:	68e2      	ldr	r2, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 800484a:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800484c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8004850:	d11a      	bne.n	8004888 <HAL_SPI_Receive+0x208>
      tmpreg = READ_REG(hspi->Instance->DR);
 8004852:	68eb      	ldr	r3, [r5, #12]
 8004854:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8004856:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004858:	463a      	mov	r2, r7
 800485a:	4631      	mov	r1, r6
 800485c:	4620      	mov	r0, r4
 800485e:	f7ff fc49 	bl	80040f4 <SPI_EndRxTransaction>
 8004862:	b108      	cbz	r0, 8004868 <HAL_SPI_Receive+0x1e8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004864:	2320      	movs	r3, #32
 8004866:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004868:	6822      	ldr	r2, [r4, #0]
 800486a:	6893      	ldr	r3, [r2, #8]
 800486c:	06db      	lsls	r3, r3, #27
 800486e:	d506      	bpl.n	800487e <HAL_SPI_Receive+0x1fe>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004870:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004872:	f043 0302 	orr.w	r3, r3, #2
 8004876:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004878:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800487c:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800487e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8004880:	3800      	subs	r0, #0
 8004882:	bf18      	it	ne
 8004884:	2001      	movne	r0, #1
error :
 8004886:	e7ca      	b.n	800481e <HAL_SPI_Receive+0x19e>
      tmpreg8 = *ptmpreg8;
 8004888:	7b2b      	ldrb	r3, [r5, #12]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f88d 300b 	strb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8004890:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg8);
 8004894:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8004898:	d1de      	bne.n	8004858 <HAL_SPI_Receive+0x1d8>
 800489a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800489c:	2b02      	cmp	r3, #2
 800489e:	d1db      	bne.n	8004858 <HAL_SPI_Receive+0x1d8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80048a0:	2201      	movs	r2, #1
 80048a2:	9700      	str	r7, [sp, #0]
 80048a4:	4633      	mov	r3, r6
 80048a6:	4611      	mov	r1, r2
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7ff fb5b 	bl	8003f64 <SPI_WaitFlagStateUntilTimeout>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d1a8      	bne.n	8004804 <HAL_SPI_Receive+0x184>
        tmpreg8 = *ptmpreg8;
 80048b2:	7b2b      	ldrb	r3, [r5, #12]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 80048ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80048be:	e7cb      	b.n	8004858 <HAL_SPI_Receive+0x1d8>
    errorcode = HAL_BUSY;
 80048c0:	2002      	movs	r0, #2
 80048c2:	e7ac      	b.n	800481e <HAL_SPI_Receive+0x19e>
  __HAL_LOCK(hspi);
 80048c4:	2002      	movs	r0, #2
 80048c6:	e6f3      	b.n	80046b0 <HAL_SPI_Receive+0x30>

080048c8 <HAL_SPI_Transmit_IT>:
{
 80048c8:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 80048ca:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80048ce:	2801      	cmp	r0, #1
 80048d0:	d04d      	beq.n	800496e <HAL_SPI_Transmit_IT+0xa6>
 80048d2:	2001      	movs	r0, #1
 80048d4:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 80048d8:	2900      	cmp	r1, #0
 80048da:	d040      	beq.n	800495e <HAL_SPI_Transmit_IT+0x96>
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d03e      	beq.n	800495e <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 80048e0:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 80048e4:	2801      	cmp	r0, #1
 80048e6:	d13e      	bne.n	8004966 <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048e8:	2003      	movs	r0, #3
 80048ea:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ee:	2000      	movs	r0, #0
 80048f0:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048f2:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80048f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 80048f6:	491f      	ldr	r1, [pc, #124]	; (8004974 <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 80048f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048fa:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 80048fc:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 80048fe:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004902:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004906:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004908:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 800490a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800490e:	bf98      	it	ls
 8004910:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004912:	6899      	ldr	r1, [r3, #8]
 8004914:	651a      	str	r2, [r3, #80]	; 0x50
 8004916:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800491a:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491c:	d107      	bne.n	800492e <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 800491e:	6811      	ldr	r1, [r2, #0]
 8004920:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004924:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004926:	6811      	ldr	r1, [r2, #0]
 8004928:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800492c:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800492e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004930:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004934:	d107      	bne.n	8004946 <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 8004936:	6811      	ldr	r1, [r2, #0]
 8004938:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800493c:	6011      	str	r1, [r2, #0]
 800493e:	6811      	ldr	r1, [r2, #0]
 8004940:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8004944:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004946:	6851      	ldr	r1, [r2, #4]
 8004948:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 800494c:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800494e:	6810      	ldr	r0, [r2, #0]
 8004950:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8004954:	d109      	bne.n	800496a <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8004956:	6811      	ldr	r1, [r2, #0]
 8004958:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800495c:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 800495e:	2200      	movs	r2, #0
 8004960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004964:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8004966:	2002      	movs	r0, #2
 8004968:	e7f9      	b.n	800495e <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800496a:	2000      	movs	r0, #0
 800496c:	e7f7      	b.n	800495e <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 800496e:	2002      	movs	r0, #2
}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	08004bcf 	.word	0x08004bcf
 8004978:	08004c03 	.word	0x08004c03

0800497c <HAL_SPI_TransmitReceive_IT>:
{
 800497c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 800497e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8004982:	2c01      	cmp	r4, #1
 8004984:	d070      	beq.n	8004a68 <HAL_SPI_TransmitReceive_IT+0xec>
 8004986:	2401      	movs	r4, #1
 8004988:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 800498c:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004990:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 8004992:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004994:	d008      	beq.n	80049a8 <HAL_SPI_TransmitReceive_IT+0x2c>
 8004996:	6844      	ldr	r4, [r0, #4]
 8004998:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 800499c:	d15e      	bne.n	8004a5c <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800499e:	6884      	ldr	r4, [r0, #8]
 80049a0:	2c00      	cmp	r4, #0
 80049a2:	d15b      	bne.n	8004a5c <HAL_SPI_TransmitReceive_IT+0xe0>
 80049a4:	2d04      	cmp	r5, #4
 80049a6:	d159      	bne.n	8004a5c <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049a8:	2900      	cmp	r1, #0
 80049aa:	d059      	beq.n	8004a60 <HAL_SPI_TransmitReceive_IT+0xe4>
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	d057      	beq.n	8004a60 <HAL_SPI_TransmitReceive_IT+0xe4>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d055      	beq.n	8004a60 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049b4:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049b8:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049ba:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049bc:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049be:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049c0:	bf1c      	itt	ne
 80049c2:	2405      	movne	r4, #5
 80049c4:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80049cc:	bf8b      	itete	hi
 80049ce:	4a27      	ldrhi	r2, [pc, #156]	; (8004a6c <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80049d0:	4a27      	ldrls	r2, [pc, #156]	; (8004a70 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80049d2:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80049d4:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80049d6:	bf8c      	ite	hi
 80049d8:	4a26      	ldrhi	r2, [pc, #152]	; (8004a74 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80049da:	4a27      	ldrls	r2, [pc, #156]	; (8004a78 <HAL_SPI_TransmitReceive_IT+0xfc>)
 80049dc:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049de:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 80049e0:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e2:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049e4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e8:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 80049ea:	6802      	ldr	r2, [r0, #0]
 80049ec:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049ee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 80049f2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049f6:	d12a      	bne.n	8004a4e <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 80049f8:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80049fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 80049fe:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8004a00:	d803      	bhi.n	8004a0a <HAL_SPI_TransmitReceive_IT+0x8e>
 8004a02:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004a04:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 8004a06:	bf08      	it	eq
 8004a08:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8004a0a:	6814      	ldr	r4, [r2, #0]
 8004a0c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8004a10:	6014      	str	r4, [r2, #0]
 8004a12:	6814      	ldr	r4, [r2, #0]
 8004a14:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8004a18:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004a1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004a1e:	d801      	bhi.n	8004a24 <HAL_SPI_TransmitReceive_IT+0xa8>
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d017      	beq.n	8004a54 <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a24:	6853      	ldr	r3, [r2, #4]
 8004a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a2a:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a2c:	6853      	ldr	r3, [r2, #4]
 8004a2e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004a32:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a34:	6813      	ldr	r3, [r2, #0]
 8004a36:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004a3a:	d113      	bne.n	8004a64 <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 8004a3c:	6811      	ldr	r1, [r2, #0]
 8004a3e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004a42:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8004a44:	2200      	movs	r2, #0
 8004a46:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 8004a4e:	2400      	movs	r4, #0
 8004a50:	6484      	str	r4, [r0, #72]	; 0x48
 8004a52:	e7e2      	b.n	8004a1a <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a54:	6853      	ldr	r3, [r2, #4]
 8004a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a5a:	e7e6      	b.n	8004a2a <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e7f1      	b.n	8004a44 <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e7ef      	b.n	8004a44 <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e7ed      	b.n	8004a44 <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e7ee      	b.n	8004a4a <HAL_SPI_TransmitReceive_IT+0xce>
 8004a6c:	08004f65 	.word	0x08004f65
 8004a70:	08004e55 	.word	0x08004e55
 8004a74:	08004f0f 	.word	0x08004f0f
 8004a78:	08004def 	.word	0x08004def

08004a7c <HAL_SPI_Receive_IT>:
{
 8004a7c:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004a7e:	6886      	ldr	r6, [r0, #8]
{
 8004a80:	4604      	mov	r4, r0
 8004a82:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004a84:	b95e      	cbnz	r6, 8004a9e <HAL_SPI_Receive_IT+0x22>
 8004a86:	6843      	ldr	r3, [r0, #4]
 8004a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a8c:	d107      	bne.n	8004a9e <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a8e:	2304      	movs	r3, #4
 8004a90:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 8004a94:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004a96:	4613      	mov	r3, r2
 8004a98:	460a      	mov	r2, r1
 8004a9a:	f7ff bf6f 	b.w	800497c <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8004a9e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d061      	beq.n	8004b6a <HAL_SPI_Receive_IT+0xee>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8004aac:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	b2d8      	uxtb	r0, r3
 8004ab4:	d155      	bne.n	8004b62 <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	d04b      	beq.n	8004b52 <HAL_SPI_Receive_IT+0xd6>
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	d049      	beq.n	8004b52 <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004abe:	2304      	movs	r3, #4
 8004ac0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ac8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004aca:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8004ace:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004ad0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ad2:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ad4:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ad6:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8004ad8:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004adc:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ade:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ae4:	bf8b      	itete	hi
 8004ae6:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004aea:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004aee:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004af0:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004af2:	bf8c      	ite	hi
 8004af4:	4a1e      	ldrhi	r2, [pc, #120]	; (8004b70 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 8004af6:	4a1f      	ldrls	r2, [pc, #124]	; (8004b74 <HAL_SPI_Receive_IT+0xf8>)
 8004af8:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004afa:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8004afe:	d107      	bne.n	8004b10 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b0e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004b12:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004b16:	d121      	bne.n	8004b5c <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 8004b18:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8004b1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8004b1e:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8004b20:	d803      	bhi.n	8004b2a <HAL_SPI_Receive_IT+0xae>
 8004b22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b24:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 8004b26:	bf08      	it	eq
 8004b28:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b38:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004b40:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8004b48:	d10d      	bne.n	8004b66 <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b50:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004b52:	2300      	movs	r3, #0
 8004b54:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004b58:	bc70      	pop	{r4, r5, r6}
 8004b5a:	4770      	bx	lr
    hspi->CRCSize = 0U;
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	64a2      	str	r2, [r4, #72]	; 0x48
 8004b60:	e7eb      	b.n	8004b3a <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 8004b62:	2002      	movs	r0, #2
 8004b64:	e7f5      	b.n	8004b52 <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b66:	2000      	movs	r0, #0
 8004b68:	e7f3      	b.n	8004b52 <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 8004b6a:	2002      	movs	r0, #2
 8004b6c:	e7f4      	b.n	8004b58 <HAL_SPI_Receive_IT+0xdc>
 8004b6e:	bf00      	nop
 8004b70:	08004d0d 	.word	0x08004d0d
 8004b74:	08004c8d 	.word	0x08004c8d

08004b78 <HAL_SPI_TxRxCpltCallback>:
 8004b78:	4770      	bx	lr

08004b7a <HAL_SPI_ErrorCallback>:
 8004b7a:	4770      	bx	lr

08004b7c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004b7c:	b513      	push	{r0, r1, r4, lr}
 8004b7e:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b80:	f7fe f8fe 	bl	8002d80 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004b84:	6821      	ldr	r1, [r4, #0]
 8004b86:	684b      	ldr	r3, [r1, #4]
 8004b88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 8004b8c:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004b8e:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b90:	4620      	mov	r0, r4
 8004b92:	2164      	movs	r1, #100	; 0x64
 8004b94:	f7ff fae9 	bl	800416a <SPI_EndRxTxTransaction>
 8004b98:	b118      	cbz	r0, 8004ba2 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b9c:	f043 0320 	orr.w	r3, r3, #32
 8004ba0:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	b933      	cbnz	r3, 8004bb4 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	9201      	str	r2, [sp, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bba:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004bbc:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bbe:	b11b      	cbz	r3, 8004bc8 <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 8004bc0:	f7ff ffdb 	bl	8004b7a <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004bc4:	b002      	add	sp, #8
 8004bc6:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8004bc8:	f7fd fac0 	bl	800214c <HAL_SPI_TxCpltCallback>
}
 8004bcc:	e7fa      	b.n	8004bc4 <SPI_CloseTx_ISR+0x48>

08004bce <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bce:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004bd0:	6803      	ldr	r3, [r0, #0]
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8004bd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004bd8:	3301      	adds	r3, #1
 8004bda:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8004bdc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8004be4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	b953      	cbnz	r3, 8004c00 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004bf0:	bf01      	itttt	eq
 8004bf2:	6802      	ldreq	r2, [r0, #0]
 8004bf4:	6813      	ldreq	r3, [r2, #0]
 8004bf6:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004bfa:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8004bfc:	f7ff bfbe 	b.w	8004b7c <SPI_CloseTx_ISR>
}
 8004c00:	4770      	bx	lr

08004c02 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c04:	6802      	ldr	r2, [r0, #0]
 8004c06:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004c0a:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8004c0e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8004c16:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	b94b      	cbnz	r3, 8004c30 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004c22:	bf02      	ittt	eq
 8004c24:	6813      	ldreq	r3, [r2, #0]
 8004c26:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004c2a:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8004c2c:	f7ff bfa6 	b.w	8004b7c <SPI_CloseTx_ISR>
}
 8004c30:	4770      	bx	lr

08004c32 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004c32:	6802      	ldr	r2, [r0, #0]
 8004c34:	6853      	ldr	r3, [r2, #4]
 8004c36:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 8004c3a:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004c3c:	6053      	str	r3, [r2, #4]
{
 8004c3e:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004c40:	f7fe f89e 	bl	8002d80 <HAL_GetTick>
 8004c44:	2164      	movs	r1, #100	; 0x64
 8004c46:	4602      	mov	r2, r0
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7ff fa53 	bl	80040f4 <SPI_EndRxTransaction>
 8004c4e:	b118      	cbz	r0, 8004c58 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c50:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c52:	f043 0320 	orr.w	r3, r3, #32
 8004c56:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004c58:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004c5a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 8004c5c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004c60:	6893      	ldr	r3, [r2, #8]
 8004c62:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004c66:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004c68:	d009      	beq.n	8004c7e <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004c6a:	f043 0302 	orr.w	r3, r3, #2
 8004c6e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004c70:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004c74:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 8004c76:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 8004c78:	f7ff ff7f 	bl	8004b7a <HAL_SPI_ErrorCallback>
}
 8004c7c:	e004      	b.n	8004c88 <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 8004c7e:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f9      	bne.n	8004c78 <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 8004c84:	f7fd fa5a 	bl	800213c <HAL_SPI_RxCpltCallback>
}
 8004c88:	bd10      	pop	{r4, pc}
	...

08004c8c <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004c8c:	6802      	ldr	r2, [r0, #0]
 8004c8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c90:	7b12      	ldrb	r2, [r2, #12]
 8004c92:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004c94:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c96:	3301      	adds	r3, #1
 8004c98:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8004c9a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004ca6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d108      	bne.n	8004cc2 <SPI_RxISR_8BIT+0x36>
 8004cb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004cb6:	bf01      	itttt	eq
 8004cb8:	6802      	ldreq	r2, [r0, #0]
 8004cba:	6813      	ldreq	r3, [r2, #0]
 8004cbc:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004cc0:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8004cc2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	b943      	cbnz	r3, 8004cdc <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd0:	d102      	bne.n	8004cd8 <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8004cd2:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <SPI_RxISR_8BIT+0x54>)
 8004cd4:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8004cd6:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8004cd8:	f7ff bfab 	b.w	8004c32 <SPI_CloseRx_ISR>
}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	08004ce5 	.word	0x08004ce5

08004ce4 <SPI_RxISR_8BITCRC>:
{
 8004ce4:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f88d 2007 	strb.w	r2, [sp, #7]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004cec:	6802      	ldr	r2, [r0, #0]
  tmpreg8 = *ptmpreg8;
 8004cee:	7b12      	ldrb	r2, [r2, #12]
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 8004cf6:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 8004cfa:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004cfc:	3a01      	subs	r2, #1
 8004cfe:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8004d00:	b912      	cbnz	r2, 8004d08 <SPI_RxISR_8BITCRC+0x24>
}
 8004d02:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 8004d04:	f7ff bf95 	b.w	8004c32 <SPI_CloseRx_ISR>
}
 8004d08:	b002      	add	sp, #8
 8004d0a:	4770      	bx	lr

08004d0c <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004d0c:	6802      	ldr	r2, [r0, #0]
 8004d0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d10:	68d1      	ldr	r1, [r2, #12]
 8004d12:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d16:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8004d18:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004d24:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d107      	bne.n	8004d3e <SPI_RxISR_16BIT+0x32>
 8004d2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004d34:	bf02      	ittt	eq
 8004d36:	6813      	ldreq	r3, [r2, #0]
 8004d38:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004d3c:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8004d3e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	b943      	cbnz	r3, 8004d58 <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4c:	d102      	bne.n	8004d54 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8004d4e:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <SPI_RxISR_16BIT+0x50>)
 8004d50:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8004d52:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8004d54:	f7ff bf6d 	b.w	8004c32 <SPI_CloseRx_ISR>
}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	08004d61 	.word	0x08004d61

08004d60 <SPI_RxISR_16BITCRC>:
{
 8004d60:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8004d66:	6803      	ldr	r3, [r0, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8004d6c:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d74:	605a      	str	r2, [r3, #4]
}
 8004d76:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 8004d78:	f7ff bf5b 	b.w	8004c32 <SPI_CloseRx_ISR>

08004d7c <SPI_CloseRxTx_ISR>:
{
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8004d80:	f7fd fffe 	bl	8002d80 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d84:	6821      	ldr	r1, [r4, #0]
 8004d86:	684b      	ldr	r3, [r1, #4]
 8004d88:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 8004d8c:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d8e:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d90:	4620      	mov	r0, r4
 8004d92:	2164      	movs	r1, #100	; 0x64
 8004d94:	f7ff f9e9 	bl	800416a <SPI_EndRxTxTransaction>
 8004d98:	b118      	cbz	r0, 8004da2 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d9c:	f043 0320 	orr.w	r3, r3, #32
 8004da0:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	6893      	ldr	r3, [r2, #8]
 8004da6:	f013 0f10 	tst.w	r3, #16
 8004daa:	f04f 0301 	mov.w	r3, #1
 8004dae:	d00c      	beq.n	8004dca <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 8004db0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004db4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004db6:	f043 0302 	orr.w	r3, r3, #2
 8004dba:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004dbc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004dc0:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f7ff fed9 	bl	8004b7a <HAL_SPI_ErrorCallback>
}
 8004dc8:	e00a      	b.n	8004de0 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004dca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004dcc:	b962      	cbnz	r2, 8004de8 <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004dce:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 8004dd2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004dd6:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 8004dd8:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004dda:	d102      	bne.n	8004de2 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 8004ddc:	f7fd f9ae 	bl	800213c <HAL_SPI_RxCpltCallback>
}
 8004de0:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 8004de2:	f7ff fec9 	bl	8004b78 <HAL_SPI_TxRxCpltCallback>
 8004de6:	e7fb      	b.n	8004de0 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 8004de8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8004dec:	e7e9      	b.n	8004dc2 <SPI_CloseRxTx_ISR+0x46>

08004dee <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8004dee:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004df2:	6801      	ldr	r1, [r0, #0]
  if (hspi->TxXferCount >= 2U)
 8004df4:	b292      	uxth	r2, r2
 8004df6:	2a01      	cmp	r2, #1
 8004df8:	d918      	bls.n	8004e2c <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dfa:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004dfe:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e00:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004e02:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004e04:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8004e0a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	b9fb      	cbnz	r3, 8004e50 <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e10:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004e12:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e14:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004e18:	d110      	bne.n	8004e3c <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e20:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e28:	605a      	str	r2, [r3, #4]
      return;
 8004e2a:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 8004e30:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e32:	3301      	adds	r3, #1
 8004e34:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8004e36:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	e7e4      	b.n	8004e06 <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e42:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 8004e44:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	b90b      	cbnz	r3, 8004e50 <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 8004e4c:	f7ff bf96 	b.w	8004d7c <SPI_CloseRxTx_ISR>
}
 8004e50:	4770      	bx	lr
	...

08004e54 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8004e54:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004e58:	6802      	ldr	r2, [r0, #0]
 8004e5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  if (hspi->RxXferCount > 1U)
 8004e5c:	b289      	uxth	r1, r1
 8004e5e:	2901      	cmp	r1, #1
 8004e60:	d922      	bls.n	8004ea8 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004e62:	68d1      	ldr	r1, [r2, #12]
 8004e64:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e68:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004e6a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004e6e:	3b02      	subs	r3, #2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004e76:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d103      	bne.n	8004e88 <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e80:	6853      	ldr	r3, [r2, #4]
 8004e82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e86:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 8004e88:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	b9fb      	cbnz	r3, 8004ed0 <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e90:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e92:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e94:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e98:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e9a:	d111      	bne.n	8004ec0 <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ea0:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <SPI_2linesRxISR_8BIT+0x80>)
 8004ea4:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8004ea6:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004ea8:	7b12      	ldrb	r2, [r2, #12]
 8004eaa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004eac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004eae:	3301      	adds	r3, #1
 8004eb0:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8004eb2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8004ebe:	e7e3      	b.n	8004e88 <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004ec0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ec4:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 8004ec6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	b90b      	cbnz	r3, 8004ed0 <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 8004ecc:	f7ff bf56 	b.w	8004d7c <SPI_CloseRxTx_ISR>
}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	08004ed9 	.word	0x08004ed9

08004ed8 <SPI_2linesRxISR_8BITCRC>:
{
 8004ed8:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 8004eda:	2200      	movs	r2, #0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004edc:	6801      	ldr	r1, [r0, #0]
  __IO uint8_t  tmpreg8 = 0;
 8004ede:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg8 = *ptmpreg8;
 8004ee2:	7b0a      	ldrb	r2, [r1, #12]
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 8004eea:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 8004eee:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004ef0:	3a01      	subs	r2, #1
 8004ef2:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8004ef4:	b94a      	cbnz	r2, 8004f0a <SPI_2linesRxISR_8BITCRC+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004ef6:	684a      	ldr	r2, [r1, #4]
 8004ef8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004efc:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8004efe:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	b913      	cbnz	r3, 8004f0a <SPI_2linesRxISR_8BITCRC+0x32>
}
 8004f04:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 8004f06:	f7ff bf39 	b.w	8004d7c <SPI_CloseRxTx_ISR>
}
 8004f0a:	b002      	add	sp, #8
 8004f0c:	4770      	bx	lr

08004f0e <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004f10:	6802      	ldr	r2, [r0, #0]
{
 8004f12:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f14:	f831 4b02 	ldrh.w	r4, [r1], #2
 8004f18:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f1a:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8004f1c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8004f1e:	3901      	subs	r1, #1
 8004f20:	b289      	uxth	r1, r1
 8004f22:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8004f24:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8004f26:	b289      	uxth	r1, r1
 8004f28:	b959      	cbnz	r1, 8004f42 <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f2a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004f2c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004f30:	d10a      	bne.n	8004f48 <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f38:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004f3a:	6853      	ldr	r3, [r2, #4]
 8004f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f40:	6053      	str	r3, [r2, #4]
}
 8004f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f46:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004f48:	6851      	ldr	r1, [r2, #4]
 8004f4a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f4e:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8004f50:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f3      	bne.n	8004f42 <SPI_2linesTxISR_16BIT+0x34>
}
 8004f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8004f5e:	f7ff bf0d 	b.w	8004d7c <SPI_CloseRxTx_ISR>
	...

08004f64 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004f64:	6801      	ldr	r1, [r0, #0]
 8004f66:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004f68:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004f6a:	68cc      	ldr	r4, [r1, #12]
 8004f6c:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f70:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8004f72:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8004f76:	3a01      	subs	r2, #1
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8004f7e:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8004f82:	b292      	uxth	r2, r2
 8004f84:	b92a      	cbnz	r2, 8004f92 <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f86:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004f88:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004f8c:	d104      	bne.n	8004f98 <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8004f8e:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <SPI_2linesRxISR_16BIT+0x4c>)
 8004f90:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 8004f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f96:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004f98:	684a      	ldr	r2, [r1, #4]
 8004f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9e:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8004fa0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f4      	bne.n	8004f92 <SPI_2linesRxISR_16BIT+0x2e>
}
 8004fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8004fac:	f7ff bee6 	b.w	8004d7c <SPI_CloseRxTx_ISR>
 8004fb0:	08004fb5 	.word	0x08004fb5

08004fb4 <SPI_2linesRxISR_16BITCRC>:
{
 8004fb4:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8004fba:	6803      	ldr	r3, [r0, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8004fc0:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc8:	605a      	str	r2, [r3, #4]
}
 8004fca:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 8004fcc:	f7ff bed6 	b.w	8004d7c <SPI_CloseRxTx_ISR>

08004fd0 <HAL_SPI_IRQHandler>:
{
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8004fd2:	6803      	ldr	r3, [r0, #0]
 8004fd4:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8004fd6:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fd8:	0656      	lsls	r6, r2, #25
{
 8004fda:	b085      	sub	sp, #20
 8004fdc:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fde:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8004fe2:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8004fe6:	d408      	bmi.n	8004ffa <HAL_SPI_IRQHandler+0x2a>
 8004fe8:	07d6      	lsls	r6, r2, #31
 8004fea:	d506      	bpl.n	8004ffa <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fec:	066e      	lsls	r6, r5, #25
 8004fee:	d504      	bpl.n	8004ffa <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8004ff0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 8004ff2:	b005      	add	sp, #20
 8004ff4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8004ff8:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ffa:	0796      	lsls	r6, r2, #30
 8004ffc:	d504      	bpl.n	8005008 <HAL_SPI_IRQHandler+0x38>
 8004ffe:	0628      	lsls	r0, r5, #24
 8005000:	d502      	bpl.n	8005008 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8005002:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005004:	4620      	mov	r0, r4
 8005006:	e7f4      	b.n	8004ff2 <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005008:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
 800500c:	f3c2 2000 	ubfx	r0, r2, #8, #1
 8005010:	f001 0101 	and.w	r1, r1, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005014:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005016:	ea51 0200 	orrs.w	r2, r1, r0
 800501a:	d057      	beq.n	80050cc <HAL_SPI_IRQHandler+0xfc>
 800501c:	06aa      	lsls	r2, r5, #26
 800501e:	d555      	bpl.n	80050cc <HAL_SPI_IRQHandler+0xfc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005020:	b17f      	cbz	r7, 8005042 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005022:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8005026:	2a03      	cmp	r2, #3
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	d048      	beq.n	80050c0 <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800502e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005030:	f042 0204 	orr.w	r2, r2, #4
 8005034:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005036:	9100      	str	r1, [sp, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	9200      	str	r2, [sp, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	9200      	str	r2, [sp, #0]
 8005040:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005042:	07f1      	lsls	r1, r6, #31
 8005044:	d50c      	bpl.n	8005060 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005046:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800504e:	2200      	movs	r2, #0
 8005050:	9202      	str	r2, [sp, #8]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	9202      	str	r2, [sp, #8]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005060:	b140      	cbz	r0, 8005074 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005062:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005064:	f042 0208 	orr.w	r2, r2, #8
 8005068:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800506a:	2200      	movs	r2, #0
 800506c:	9203      	str	r2, [sp, #12]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	9203      	str	r2, [sp, #12]
 8005072:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005074:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005076:	b34a      	cbz	r2, 80050cc <HAL_SPI_IRQHandler+0xfc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800507e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005080:	2201      	movs	r2, #1
 8005082:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005086:	07aa      	lsls	r2, r5, #30
 8005088:	d022      	beq.n	80050d0 <HAL_SPI_IRQHandler+0x100>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800508a:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800508c:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800508e:	f022 0203 	bic.w	r2, r2, #3
 8005092:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005094:	b140      	cbz	r0, 80050a8 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <HAL_SPI_IRQHandler+0x108>)
 8005098:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800509a:	f7fd fef1 	bl	8002e80 <HAL_DMA_Abort_IT>
 800509e:	b118      	cbz	r0, 80050a8 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80050a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a6:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80050a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050aa:	b178      	cbz	r0, 80050cc <HAL_SPI_IRQHandler+0xfc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <HAL_SPI_IRQHandler+0x108>)
 80050ae:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050b0:	f7fd fee6 	bl	8002e80 <HAL_DMA_Abort_IT>
 80050b4:	b150      	cbz	r0, 80050cc <HAL_SPI_IRQHandler+0xfc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80050b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050bc:	6623      	str	r3, [r4, #96]	; 0x60
 80050be:	e005      	b.n	80050cc <HAL_SPI_IRQHandler+0xfc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c0:	9101      	str	r1, [sp, #4]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	9201      	str	r2, [sp, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	9b01      	ldr	r3, [sp, #4]
}
 80050cc:	b005      	add	sp, #20
 80050ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7ff fd52 	bl	8004b7a <HAL_SPI_ErrorCallback>
 80050d6:	e7f9      	b.n	80050cc <HAL_SPI_IRQHandler+0xfc>
 80050d8:	080050dd 	.word	0x080050dd

080050dc <SPI_DMAAbortOnError>:
{
 80050dc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050de:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80050e6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80050e8:	f7ff fd47 	bl	8004b7a <HAL_SPI_ErrorCallback>
}
 80050ec:	bd08      	pop	{r3, pc}

080050ee <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80050ee:	4770      	bx	lr

080050f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80050f4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050f6:	6921      	ldr	r1, [r4, #16]
 80050f8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050fa:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050fc:	69c0      	ldr	r0, [r0, #28]
 80050fe:	430a      	orrs	r2, r1
 8005100:	6961      	ldr	r1, [r4, #20]
 8005102:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005104:	4992      	ldr	r1, [pc, #584]	; (8005350 <UART_SetConfig+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005106:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005108:	4029      	ands	r1, r5
 800510a:	430a      	orrs	r2, r1
 800510c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	68e1      	ldr	r1, [r4, #12]
 8005112:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800511a:	4a8e      	ldr	r2, [pc, #568]	; (8005354 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800511c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800511e:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005120:	bf1c      	itt	ne
 8005122:	6a22      	ldrne	r2, [r4, #32]
 8005124:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005130:	4a89      	ldr	r2, [pc, #548]	; (8005358 <UART_SetConfig+0x268>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d11b      	bne.n	800516e <UART_SetConfig+0x7e>
 8005136:	4b89      	ldr	r3, [pc, #548]	; (800535c <UART_SetConfig+0x26c>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	3b01      	subs	r3, #1
 8005142:	2b02      	cmp	r3, #2
 8005144:	f200 80d5 	bhi.w	80052f2 <UART_SetConfig+0x202>
 8005148:	4a85      	ldr	r2, [pc, #532]	; (8005360 <UART_SetConfig+0x270>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800514c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005150:	f040 809f 	bne.w	8005292 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005154:	2b08      	cmp	r3, #8
 8005156:	d828      	bhi.n	80051aa <UART_SetConfig+0xba>
 8005158:	e8df f013 	tbh	[pc, r3, lsl #1]
 800515c:	00ce00df 	.word	0x00ce00df
 8005160:	00270099 	.word	0x00270099
 8005164:	002700d4 	.word	0x002700d4
 8005168:	00270027 	.word	0x00270027
 800516c:	00e3      	.short	0x00e3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800516e:	4a7d      	ldr	r2, [pc, #500]	; (8005364 <UART_SetConfig+0x274>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d108      	bne.n	8005186 <UART_SetConfig+0x96>
 8005174:	4b79      	ldr	r3, [pc, #484]	; (800535c <UART_SetConfig+0x26c>)
 8005176:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800517a:	4b79      	ldr	r3, [pc, #484]	; (8005360 <UART_SetConfig+0x270>)
 800517c:	f002 020c 	and.w	r2, r2, #12
 8005180:	4413      	add	r3, r2
 8005182:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005184:	e7e2      	b.n	800514c <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005186:	4a78      	ldr	r2, [pc, #480]	; (8005368 <UART_SetConfig+0x278>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d119      	bne.n	80051c0 <UART_SetConfig+0xd0>
 800518c:	4b73      	ldr	r3, [pc, #460]	; (800535c <UART_SetConfig+0x26c>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005196:	2b20      	cmp	r3, #32
 8005198:	f000 80b7 	beq.w	800530a <UART_SetConfig+0x21a>
 800519c:	d807      	bhi.n	80051ae <UART_SetConfig+0xbe>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80b8 	beq.w	8005314 <UART_SetConfig+0x224>
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	f000 80aa 	beq.w	80052fe <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051aa:	2001      	movs	r0, #1
 80051ac:	e04e      	b.n	800524c <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ae:	2b30      	cmp	r3, #48	; 0x30
 80051b0:	d1fb      	bne.n	80051aa <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80051b6:	f000 80b4 	beq.w	8005322 <UART_SetConfig+0x232>
 80051ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80051be:	e083      	b.n	80052c8 <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051c0:	4a6a      	ldr	r2, [pc, #424]	; (800536c <UART_SetConfig+0x27c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10f      	bne.n	80051e6 <UART_SetConfig+0xf6>
 80051c6:	4b65      	ldr	r3, [pc, #404]	; (800535c <UART_SetConfig+0x26c>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	f000 809a 	beq.w	800530a <UART_SetConfig+0x21a>
 80051d6:	d804      	bhi.n	80051e2 <UART_SetConfig+0xf2>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 809b 	beq.w	8005314 <UART_SetConfig+0x224>
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	e7e1      	b.n	80051a6 <UART_SetConfig+0xb6>
 80051e2:	2bc0      	cmp	r3, #192	; 0xc0
 80051e4:	e7e4      	b.n	80051b0 <UART_SetConfig+0xc0>
 80051e6:	4a62      	ldr	r2, [pc, #392]	; (8005370 <UART_SetConfig+0x280>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d112      	bne.n	8005212 <UART_SetConfig+0x122>
 80051ec:	4b5b      	ldr	r3, [pc, #364]	; (800535c <UART_SetConfig+0x26c>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fa:	f000 8086 	beq.w	800530a <UART_SetConfig+0x21a>
 80051fe:	d805      	bhi.n	800520c <UART_SetConfig+0x11c>
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8087 	beq.w	8005314 <UART_SetConfig+0x224>
 8005206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520a:	e7cc      	b.n	80051a6 <UART_SetConfig+0xb6>
 800520c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005210:	e7ce      	b.n	80051b0 <UART_SetConfig+0xc0>
 8005212:	4a50      	ldr	r2, [pc, #320]	; (8005354 <UART_SetConfig+0x264>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d1c8      	bne.n	80051aa <UART_SetConfig+0xba>
 8005218:	4b50      	ldr	r3, [pc, #320]	; (800535c <UART_SetConfig+0x26c>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005226:	d015      	beq.n	8005254 <UART_SetConfig+0x164>
 8005228:	d806      	bhi.n	8005238 <UART_SetConfig+0x148>
 800522a:	b15b      	cbz	r3, 8005244 <UART_SetConfig+0x154>
 800522c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005230:	d1bb      	bne.n	80051aa <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 8005232:	f7fe fafb 	bl	800382c <HAL_RCC_GetSysClockFreq>
        break;
 8005236:	e007      	b.n	8005248 <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005238:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800523c:	d1b5      	bne.n	80051aa <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 800523e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005242:	e008      	b.n	8005256 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005244:	f7fe fe6a 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005248:	b928      	cbnz	r0, 8005256 <UART_SetConfig+0x166>
 800524a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800524c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800524e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8005252:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8005254:	4847      	ldr	r0, [pc, #284]	; (8005374 <UART_SetConfig+0x284>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800525c:	4283      	cmp	r3, r0
 800525e:	d8a4      	bhi.n	80051aa <UART_SetConfig+0xba>
 8005260:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005264:	d8a1      	bhi.n	80051aa <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005266:	0851      	lsrs	r1, r2, #1
 8005268:	2500      	movs	r5, #0
 800526a:	468c      	mov	ip, r1
 800526c:	f44f 7680 	mov.w	r6, #256	; 0x100
 8005270:	4629      	mov	r1, r5
 8005272:	fbe0 c106 	umlal	ip, r1, r0, r6
 8005276:	462b      	mov	r3, r5
 8005278:	4660      	mov	r0, ip
 800527a:	f7fb fc95 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800527e:	4b3e      	ldr	r3, [pc, #248]	; (8005378 <UART_SetConfig+0x288>)
 8005280:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005284:	429a      	cmp	r2, r3
 8005286:	d890      	bhi.n	80051aa <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	60d8      	str	r0, [r3, #12]
 800528c:	e7dd      	b.n	800524a <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 800528e:	4839      	ldr	r0, [pc, #228]	; (8005374 <UART_SetConfig+0x284>)
 8005290:	e047      	b.n	8005322 <UART_SetConfig+0x232>
    switch (clocksource)
 8005292:	2b08      	cmp	r3, #8
 8005294:	d889      	bhi.n	80051aa <UART_SetConfig+0xba>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x1ac>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052e7 	.word	0x080052e7
 80052a4:	08005311 	.word	0x08005311
 80052a8:	080051ab 	.word	0x080051ab
 80052ac:	080052ed 	.word	0x080052ed
 80052b0:	080051ab 	.word	0x080051ab
 80052b4:	080051ab 	.word	0x080051ab
 80052b8:	080051ab 	.word	0x080051ab
 80052bc:	080051bb 	.word	0x080051bb
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe fe2c 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d0c0      	beq.n	800524a <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052c8:	6862      	ldr	r2, [r4, #4]
 80052ca:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80052ce:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80052d6:	f1a3 0110 	sub.w	r1, r3, #16
 80052da:	4291      	cmp	r1, r2
 80052dc:	f63f af65 	bhi.w	80051aa <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052e0:	6822      	ldr	r2, [r4, #0]
 80052e2:	60d3      	str	r3, [r2, #12]
 80052e4:	e7b1      	b.n	800524a <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e6:	f7fe fe2b 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
        break;
 80052ea:	e7eb      	b.n	80052c4 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 80052ec:	f7fe fa9e 	bl	800382c <HAL_RCC_GetSysClockFreq>
        break;
 80052f0:	e7e8      	b.n	80052c4 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80052f6:	d1f6      	bne.n	80052e6 <UART_SetConfig+0x1f6>
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f8:	f7fe fe22 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
        break;
 80052fc:	e00f      	b.n	800531e <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005302:	d1f3      	bne.n	80052ec <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 8005304:	f7fe fa92 	bl	800382c <HAL_RCC_GetSysClockFreq>
        break;
 8005308:	e009      	b.n	800531e <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800530a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800530e:	d0be      	beq.n	800528e <UART_SetConfig+0x19e>
        pclk = (uint32_t) HSI_VALUE;
 8005310:	4818      	ldr	r0, [pc, #96]	; (8005374 <UART_SetConfig+0x284>)
 8005312:	e7d9      	b.n	80052c8 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005314:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005318:	d1d2      	bne.n	80052c0 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800531a:	f7fe fdff 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800531e:	2800      	cmp	r0, #0
 8005320:	d093      	beq.n	800524a <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	0853      	lsrs	r3, r2, #1
 8005326:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800532a:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800532e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005332:	f1a0 0210 	sub.w	r2, r0, #16
 8005336:	429a      	cmp	r2, r3
 8005338:	f63f af37 	bhi.w	80051aa <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533c:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8005340:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005342:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005344:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8005348:	4318      	orrs	r0, r3
 800534a:	60d0      	str	r0, [r2, #12]
 800534c:	e77d      	b.n	800524a <UART_SetConfig+0x15a>
 800534e:	bf00      	nop
 8005350:	efff69f3 	.word	0xefff69f3
 8005354:	40008000 	.word	0x40008000
 8005358:	40013800 	.word	0x40013800
 800535c:	40021000 	.word	0x40021000
 8005360:	08008870 	.word	0x08008870
 8005364:	40004400 	.word	0x40004400
 8005368:	40004800 	.word	0x40004800
 800536c:	40004c00 	.word	0x40004c00
 8005370:	40005000 	.word	0x40005000
 8005374:	00f42400 	.word	0x00f42400
 8005378:	000ffcff 	.word	0x000ffcff

0800537c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800537c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800537e:	07da      	lsls	r2, r3, #31
{
 8005380:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005382:	d506      	bpl.n	8005392 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005384:	6801      	ldr	r1, [r0, #0]
 8005386:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005388:	684a      	ldr	r2, [r1, #4]
 800538a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800538e:	4322      	orrs	r2, r4
 8005390:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005392:	079c      	lsls	r4, r3, #30
 8005394:	d506      	bpl.n	80053a4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005396:	6801      	ldr	r1, [r0, #0]
 8005398:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800539a:	684a      	ldr	r2, [r1, #4]
 800539c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053a0:	4322      	orrs	r2, r4
 80053a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a4:	0759      	lsls	r1, r3, #29
 80053a6:	d506      	bpl.n	80053b6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053a8:	6801      	ldr	r1, [r0, #0]
 80053aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80053ac:	684a      	ldr	r2, [r1, #4]
 80053ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053b2:	4322      	orrs	r2, r4
 80053b4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053b6:	071a      	lsls	r2, r3, #28
 80053b8:	d506      	bpl.n	80053c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ba:	6801      	ldr	r1, [r0, #0]
 80053bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80053be:	684a      	ldr	r2, [r1, #4]
 80053c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053c4:	4322      	orrs	r2, r4
 80053c6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c8:	06dc      	lsls	r4, r3, #27
 80053ca:	d506      	bpl.n	80053da <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053cc:	6801      	ldr	r1, [r0, #0]
 80053ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80053d0:	688a      	ldr	r2, [r1, #8]
 80053d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053d6:	4322      	orrs	r2, r4
 80053d8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053da:	0699      	lsls	r1, r3, #26
 80053dc:	d506      	bpl.n	80053ec <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053de:	6801      	ldr	r1, [r0, #0]
 80053e0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80053e2:	688a      	ldr	r2, [r1, #8]
 80053e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e8:	4322      	orrs	r2, r4
 80053ea:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ec:	065a      	lsls	r2, r3, #25
 80053ee:	d50f      	bpl.n	8005410 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053f0:	6801      	ldr	r1, [r0, #0]
 80053f2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80053f4:	684a      	ldr	r2, [r1, #4]
 80053f6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80053fa:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005400:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005402:	d105      	bne.n	8005410 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005404:	684a      	ldr	r2, [r1, #4]
 8005406:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005408:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800540c:	4322      	orrs	r2, r4
 800540e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	d506      	bpl.n	8005422 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005414:	6802      	ldr	r2, [r0, #0]
 8005416:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005418:	6853      	ldr	r3, [r2, #4]
 800541a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800541e:	430b      	orrs	r3, r1
 8005420:	6053      	str	r3, [r2, #4]
  }
}
 8005422:	bd10      	pop	{r4, pc}

08005424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005428:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800542c:	4604      	mov	r4, r0
 800542e:	460e      	mov	r6, r1
 8005430:	4615      	mov	r5, r2
 8005432:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	69d3      	ldr	r3, [r2, #28]
 8005438:	ea36 0303 	bics.w	r3, r6, r3
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	42ab      	cmp	r3, r5
 8005444:	d001      	beq.n	800544a <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005446:	2000      	movs	r0, #0
 8005448:	e025      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 800544a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800544e:	d0f2      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005450:	f7fd fc96 	bl	8002d80 <HAL_GetTick>
 8005454:	1bc0      	subs	r0, r0, r7
 8005456:	4540      	cmp	r0, r8
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	d802      	bhi.n	8005462 <UART_WaitOnFlagUntilTimeout+0x3e>
 800545c:	f1b8 0f00 	cmp.w	r8, #0
 8005460:	d11b      	bne.n	800549a <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005466:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	e840 3200 	strex	r2, r3, [r0]
 800546e:	2a00      	cmp	r2, #0
 8005470:	d1f7      	bne.n	8005462 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	f100 0308 	add.w	r3, r0, #8
 8005476:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	f100 0108 	add.w	r1, r0, #8
 8005482:	e841 3200 	strex	r2, r3, [r1]
 8005486:	2a00      	cmp	r2, #0
 8005488:	d1f3      	bne.n	8005472 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800548a:	2320      	movs	r3, #32
 800548c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800548e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005490:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8005494:	2003      	movs	r0, #3
}
 8005496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800549a:	6803      	ldr	r3, [r0, #0]
 800549c:	075a      	lsls	r2, r3, #29
 800549e:	d5c9      	bpl.n	8005434 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a0:	69c3      	ldr	r3, [r0, #28]
 80054a2:	051b      	lsls	r3, r3, #20
 80054a4:	d5c6      	bpl.n	8005434 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054aa:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	e840 3200 	strex	r2, r3, [r0]
 80054b8:	2a00      	cmp	r2, #0
 80054ba:	d1f7      	bne.n	80054ac <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	f100 0308 	add.w	r3, r0, #8
 80054c0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	f100 0108 	add.w	r1, r0, #8
 80054cc:	e841 3200 	strex	r2, r3, [r1]
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	d1f3      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 80054d4:	2320      	movs	r3, #32
 80054d6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054d8:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054da:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80054de:	e7d7      	b.n	8005490 <UART_WaitOnFlagUntilTimeout+0x6c>

080054e0 <HAL_UART_Transmit>:
{
 80054e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80054e4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80054e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80054e8:	2b20      	cmp	r3, #32
{
 80054ea:	4604      	mov	r4, r0
 80054ec:	460e      	mov	r6, r1
 80054ee:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80054f0:	d14e      	bne.n	8005590 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80054f2:	2900      	cmp	r1, #0
 80054f4:	d04a      	beq.n	800558c <HAL_UART_Transmit+0xac>
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	d048      	beq.n	800558c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80054fa:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d046      	beq.n	8005590 <HAL_UART_Transmit+0xb0>
 8005502:	2301      	movs	r3, #1
 8005504:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800550a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005510:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005512:	f7fd fc35 	bl	8002d80 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005516:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8005518:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005520:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8005522:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005526:	d103      	bne.n	8005530 <HAL_UART_Transmit+0x50>
 8005528:	6922      	ldr	r2, [r4, #16]
 800552a:	b90a      	cbnz	r2, 8005530 <HAL_UART_Transmit+0x50>
 800552c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800552e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8005530:	2200      	movs	r2, #0
 8005532:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8005536:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800553a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800553e:	b292      	uxth	r2, r2
 8005540:	b93a      	cbnz	r2, 8005552 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005542:	2140      	movs	r1, #64	; 0x40
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff ff6d 	bl	8005424 <UART_WaitOnFlagUntilTimeout>
 800554a:	b950      	cbnz	r0, 8005562 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800554c:	2320      	movs	r3, #32
 800554e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005550:	e008      	b.n	8005564 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005552:	2200      	movs	r2, #0
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	4620      	mov	r0, r4
 8005558:	9303      	str	r3, [sp, #12]
 800555a:	f7ff ff63 	bl	8005424 <UART_WaitOnFlagUntilTimeout>
 800555e:	9b03      	ldr	r3, [sp, #12]
 8005560:	b118      	cbz	r0, 800556a <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8005562:	2003      	movs	r0, #3
}
 8005564:	b004      	add	sp, #16
 8005566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800556a:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 800556c:	b95e      	cbnz	r6, 8005586 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800556e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005572:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005576:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8005578:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800557c:	3a01      	subs	r2, #1
 800557e:	b292      	uxth	r2, r2
 8005580:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8005584:	e7d7      	b.n	8005536 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005586:	f816 2b01 	ldrb.w	r2, [r6], #1
 800558a:	e7f4      	b.n	8005576 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 800558c:	2001      	movs	r0, #1
 800558e:	e7e9      	b.n	8005564 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005590:	2002      	movs	r0, #2
 8005592:	e7e7      	b.n	8005564 <HAL_UART_Transmit+0x84>

08005594 <UART_CheckIdleState>:
{
 8005594:	b530      	push	{r4, r5, lr}
 8005596:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	2500      	movs	r5, #0
{
 800559a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80055a0:	f7fd fbee 	bl	8002d80 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80055aa:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ac:	d415      	bmi.n	80055da <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055ae:	6822      	ldr	r2, [r4, #0]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	0752      	lsls	r2, r2, #29
 80055b4:	d509      	bpl.n	80055ca <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80055ba:	9200      	str	r2, [sp, #0]
 80055bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055c0:	2200      	movs	r2, #0
 80055c2:	4620      	mov	r0, r4
 80055c4:	f7ff ff2e 	bl	8005424 <UART_WaitOnFlagUntilTimeout>
 80055c8:	b9a0      	cbnz	r0, 80055f4 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80055ca:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055cc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80055ce:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80055d0:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80055d4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 80055d8:	e00d      	b.n	80055f6 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055da:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80055de:	9200      	str	r2, [sp, #0]
 80055e0:	9003      	str	r0, [sp, #12]
 80055e2:	462a      	mov	r2, r5
 80055e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055e8:	4620      	mov	r0, r4
 80055ea:	f7ff ff1b 	bl	8005424 <UART_WaitOnFlagUntilTimeout>
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d0dc      	beq.n	80055ae <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80055f4:	2003      	movs	r0, #3
}
 80055f6:	b005      	add	sp, #20
 80055f8:	bd30      	pop	{r4, r5, pc}

080055fa <HAL_UART_Init>:
{
 80055fa:	b510      	push	{r4, lr}
  if (huart == NULL)
 80055fc:	4604      	mov	r4, r0
 80055fe:	b340      	cbz	r0, 8005652 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005600:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005602:	b91b      	cbnz	r3, 800560c <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005604:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8005608:	f7ff fd71 	bl	80050ee <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800560c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800560e:	2324      	movs	r3, #36	; 0x24
 8005610:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800561a:	4620      	mov	r0, r4
 800561c:	f7ff fd68 	bl	80050f0 <UART_SetConfig>
 8005620:	2801      	cmp	r0, #1
 8005622:	d016      	beq.n	8005652 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005626:	b113      	cbz	r3, 800562e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005628:	4620      	mov	r0, r4
 800562a:	f7ff fea7 	bl	800537c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800563e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005646:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800564e:	f7ff bfa1 	b.w	8005594 <UART_CheckIdleState>
}
 8005652:	2001      	movs	r0, #1
 8005654:	bd10      	pop	{r4, pc}
	...

08005658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005690 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800565c:	f7fd fb2a 	bl	8002cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005660:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005662:	e003      	b.n	800566c <LoopCopyDataInit>

08005664 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005666:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005668:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800566a:	3104      	adds	r1, #4

0800566c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800566c:	480a      	ldr	r0, [pc, #40]	; (8005698 <LoopForever+0xa>)
	ldr	r3, =_edata
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005670:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005672:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005674:	d3f6      	bcc.n	8005664 <CopyDataInit>
	ldr	r2, =_sbss
 8005676:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005678:	e002      	b.n	8005680 <LoopFillZerobss>

0800567a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800567a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800567c:	f842 3b04 	str.w	r3, [r2], #4

08005680 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005680:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <LoopForever+0x16>)
	cmp	r2, r3
 8005682:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005684:	d3f9      	bcc.n	800567a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005686:	f000 f861 	bl	800574c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800568a:	f7fb fc0f 	bl	8000eac <main>

0800568e <LoopForever>:

LoopForever:
    b LoopForever
 800568e:	e7fe      	b.n	800568e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005690:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005694:	080094c0 	.word	0x080094c0
	ldr	r0, =_sdata
 8005698:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800569c:	200002c8 	.word	0x200002c8
	ldr	r2, =_sbss
 80056a0:	200002c8 	.word	0x200002c8
	ldr	r3, = _ebss
 80056a4:	20000f80 	.word	0x20000f80

080056a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80056a8:	e7fe      	b.n	80056a8 <ADC1_2_IRQHandler>

080056aa <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80056aa:	2001      	movs	r0, #1
 80056ac:	4770      	bx	lr

080056ae <_kill>:

int _kill(int pid, int sig)
{
 80056ae:	b508      	push	{r3, lr}
	errno = EINVAL;
 80056b0:	f000 f846 	bl	8005740 <__errno>
 80056b4:	2316      	movs	r3, #22
 80056b6:	6003      	str	r3, [r0, #0]
	return -1;
}
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	bd08      	pop	{r3, pc}

080056be <_exit>:

void _exit (int status)
{
 80056be:	b508      	push	{r3, lr}
	errno = EINVAL;
 80056c0:	f000 f83e 	bl	8005740 <__errno>
 80056c4:	2316      	movs	r3, #22
 80056c6:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80056c8:	e7fe      	b.n	80056c8 <_exit+0xa>

080056ca <_read>:
}

int _read (int file, char *ptr, int len)
{
 80056ca:	b510      	push	{r4, lr}
 80056cc:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 80056ce:	f3af 8000 	nop.w
 80056d2:	7020      	strb	r0, [r4, #0]

	return 1;
}
 80056d4:	2001      	movs	r0, #1
 80056d6:	bd10      	pop	{r4, pc}

080056d8 <_write>:

int _write(int file, char *ptr, int len)
{
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	460d      	mov	r5, r1
 80056dc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056de:	460e      	mov	r6, r1
 80056e0:	1b73      	subs	r3, r6, r5
 80056e2:	429c      	cmp	r4, r3
 80056e4:	dc01      	bgt.n	80056ea <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80056e6:	4620      	mov	r0, r4
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80056ea:	f816 0b01 	ldrb.w	r0, [r6], #1
 80056ee:	f7fb fdcf 	bl	8001290 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056f2:	e7f5      	b.n	80056e0 <_write+0x8>

080056f4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80056f4:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <_sbrk+0x2c>)
 80056f6:	6811      	ldr	r1, [r2, #0]
{
 80056f8:	b508      	push	{r3, lr}
 80056fa:	4603      	mov	r3, r0
	if (heap_end == 0)
 80056fc:	b909      	cbnz	r1, 8005702 <_sbrk+0xe>
		heap_end = &end;
 80056fe:	4909      	ldr	r1, [pc, #36]	; (8005724 <_sbrk+0x30>)
 8005700:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8005702:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005704:	4669      	mov	r1, sp
 8005706:	4403      	add	r3, r0
 8005708:	428b      	cmp	r3, r1
 800570a:	d906      	bls.n	800571a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800570c:	f000 f818 	bl	8005740 <__errno>
 8005710:	230c      	movs	r3, #12
 8005712:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8005718:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800571a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800571c:	e7fc      	b.n	8005718 <_sbrk+0x24>
 800571e:	bf00      	nop
 8005720:	20000f68 	.word	0x20000f68
 8005724:	20000f80 	.word	0x20000f80

08005728 <_close>:

int _close(int file)
{
	return -1;
}
 8005728:	f04f 30ff 	mov.w	r0, #4294967295
 800572c:	4770      	bx	lr

0800572e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800572e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005732:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005734:	2000      	movs	r0, #0
 8005736:	4770      	bx	lr

08005738 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005738:	2001      	movs	r0, #1
 800573a:	4770      	bx	lr

0800573c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800573c:	2000      	movs	r0, #0
 800573e:	4770      	bx	lr

08005740 <__errno>:
 8005740:	4b01      	ldr	r3, [pc, #4]	; (8005748 <__errno+0x8>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	200000f8 	.word	0x200000f8

0800574c <__libc_init_array>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4d0d      	ldr	r5, [pc, #52]	; (8005784 <__libc_init_array+0x38>)
 8005750:	4c0d      	ldr	r4, [pc, #52]	; (8005788 <__libc_init_array+0x3c>)
 8005752:	1b64      	subs	r4, r4, r5
 8005754:	10a4      	asrs	r4, r4, #2
 8005756:	2600      	movs	r6, #0
 8005758:	42a6      	cmp	r6, r4
 800575a:	d109      	bne.n	8005770 <__libc_init_array+0x24>
 800575c:	4d0b      	ldr	r5, [pc, #44]	; (800578c <__libc_init_array+0x40>)
 800575e:	4c0c      	ldr	r4, [pc, #48]	; (8005790 <__libc_init_array+0x44>)
 8005760:	f003 f820 	bl	80087a4 <_init>
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	2600      	movs	r6, #0
 800576a:	42a6      	cmp	r6, r4
 800576c:	d105      	bne.n	800577a <__libc_init_array+0x2e>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	f855 3b04 	ldr.w	r3, [r5], #4
 8005774:	4798      	blx	r3
 8005776:	3601      	adds	r6, #1
 8005778:	e7ee      	b.n	8005758 <__libc_init_array+0xc>
 800577a:	f855 3b04 	ldr.w	r3, [r5], #4
 800577e:	4798      	blx	r3
 8005780:	3601      	adds	r6, #1
 8005782:	e7f2      	b.n	800576a <__libc_init_array+0x1e>
 8005784:	080094b0 	.word	0x080094b0
 8005788:	080094b0 	.word	0x080094b0
 800578c:	080094b0 	.word	0x080094b0
 8005790:	080094b4 	.word	0x080094b4

08005794 <memcpy>:
 8005794:	440a      	add	r2, r1
 8005796:	4291      	cmp	r1, r2
 8005798:	f100 33ff 	add.w	r3, r0, #4294967295
 800579c:	d100      	bne.n	80057a0 <memcpy+0xc>
 800579e:	4770      	bx	lr
 80057a0:	b510      	push	{r4, lr}
 80057a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057aa:	4291      	cmp	r1, r2
 80057ac:	d1f9      	bne.n	80057a2 <memcpy+0xe>
 80057ae:	bd10      	pop	{r4, pc}

080057b0 <memset>:
 80057b0:	4402      	add	r2, r0
 80057b2:	4603      	mov	r3, r0
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d100      	bne.n	80057ba <memset+0xa>
 80057b8:	4770      	bx	lr
 80057ba:	f803 1b01 	strb.w	r1, [r3], #1
 80057be:	e7f9      	b.n	80057b4 <memset+0x4>

080057c0 <__cvt>:
 80057c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	ec55 4b10 	vmov	r4, r5, d0
 80057c8:	2d00      	cmp	r5, #0
 80057ca:	460e      	mov	r6, r1
 80057cc:	4619      	mov	r1, r3
 80057ce:	462b      	mov	r3, r5
 80057d0:	bfbb      	ittet	lt
 80057d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057d6:	461d      	movlt	r5, r3
 80057d8:	2300      	movge	r3, #0
 80057da:	232d      	movlt	r3, #45	; 0x2d
 80057dc:	700b      	strb	r3, [r1, #0]
 80057de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057e4:	4691      	mov	r9, r2
 80057e6:	f023 0820 	bic.w	r8, r3, #32
 80057ea:	bfbc      	itt	lt
 80057ec:	4622      	movlt	r2, r4
 80057ee:	4614      	movlt	r4, r2
 80057f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057f4:	d005      	beq.n	8005802 <__cvt+0x42>
 80057f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057fa:	d100      	bne.n	80057fe <__cvt+0x3e>
 80057fc:	3601      	adds	r6, #1
 80057fe:	2102      	movs	r1, #2
 8005800:	e000      	b.n	8005804 <__cvt+0x44>
 8005802:	2103      	movs	r1, #3
 8005804:	ab03      	add	r3, sp, #12
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	ab02      	add	r3, sp, #8
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	ec45 4b10 	vmov	d0, r4, r5
 8005810:	4653      	mov	r3, sl
 8005812:	4632      	mov	r2, r6
 8005814:	f000 fee4 	bl	80065e0 <_dtoa_r>
 8005818:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800581c:	4607      	mov	r7, r0
 800581e:	d102      	bne.n	8005826 <__cvt+0x66>
 8005820:	f019 0f01 	tst.w	r9, #1
 8005824:	d022      	beq.n	800586c <__cvt+0xac>
 8005826:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800582a:	eb07 0906 	add.w	r9, r7, r6
 800582e:	d110      	bne.n	8005852 <__cvt+0x92>
 8005830:	783b      	ldrb	r3, [r7, #0]
 8005832:	2b30      	cmp	r3, #48	; 0x30
 8005834:	d10a      	bne.n	800584c <__cvt+0x8c>
 8005836:	2200      	movs	r2, #0
 8005838:	2300      	movs	r3, #0
 800583a:	4620      	mov	r0, r4
 800583c:	4629      	mov	r1, r5
 800583e:	f7fb f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8005842:	b918      	cbnz	r0, 800584c <__cvt+0x8c>
 8005844:	f1c6 0601 	rsb	r6, r6, #1
 8005848:	f8ca 6000 	str.w	r6, [sl]
 800584c:	f8da 3000 	ldr.w	r3, [sl]
 8005850:	4499      	add	r9, r3
 8005852:	2200      	movs	r2, #0
 8005854:	2300      	movs	r3, #0
 8005856:	4620      	mov	r0, r4
 8005858:	4629      	mov	r1, r5
 800585a:	f7fb f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800585e:	b108      	cbz	r0, 8005864 <__cvt+0xa4>
 8005860:	f8cd 900c 	str.w	r9, [sp, #12]
 8005864:	2230      	movs	r2, #48	; 0x30
 8005866:	9b03      	ldr	r3, [sp, #12]
 8005868:	454b      	cmp	r3, r9
 800586a:	d307      	bcc.n	800587c <__cvt+0xbc>
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005870:	1bdb      	subs	r3, r3, r7
 8005872:	4638      	mov	r0, r7
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	b004      	add	sp, #16
 8005878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587c:	1c59      	adds	r1, r3, #1
 800587e:	9103      	str	r1, [sp, #12]
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	e7f0      	b.n	8005866 <__cvt+0xa6>

08005884 <__exponent>:
 8005884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005886:	4603      	mov	r3, r0
 8005888:	2900      	cmp	r1, #0
 800588a:	bfb8      	it	lt
 800588c:	4249      	neglt	r1, r1
 800588e:	f803 2b02 	strb.w	r2, [r3], #2
 8005892:	bfb4      	ite	lt
 8005894:	222d      	movlt	r2, #45	; 0x2d
 8005896:	222b      	movge	r2, #43	; 0x2b
 8005898:	2909      	cmp	r1, #9
 800589a:	7042      	strb	r2, [r0, #1]
 800589c:	dd2a      	ble.n	80058f4 <__exponent+0x70>
 800589e:	f10d 0407 	add.w	r4, sp, #7
 80058a2:	46a4      	mov	ip, r4
 80058a4:	270a      	movs	r7, #10
 80058a6:	46a6      	mov	lr, r4
 80058a8:	460a      	mov	r2, r1
 80058aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80058ae:	fb07 1516 	mls	r5, r7, r6, r1
 80058b2:	3530      	adds	r5, #48	; 0x30
 80058b4:	2a63      	cmp	r2, #99	; 0x63
 80058b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80058ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058be:	4631      	mov	r1, r6
 80058c0:	dcf1      	bgt.n	80058a6 <__exponent+0x22>
 80058c2:	3130      	adds	r1, #48	; 0x30
 80058c4:	f1ae 0502 	sub.w	r5, lr, #2
 80058c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058cc:	1c44      	adds	r4, r0, #1
 80058ce:	4629      	mov	r1, r5
 80058d0:	4561      	cmp	r1, ip
 80058d2:	d30a      	bcc.n	80058ea <__exponent+0x66>
 80058d4:	f10d 0209 	add.w	r2, sp, #9
 80058d8:	eba2 020e 	sub.w	r2, r2, lr
 80058dc:	4565      	cmp	r5, ip
 80058de:	bf88      	it	hi
 80058e0:	2200      	movhi	r2, #0
 80058e2:	4413      	add	r3, r2
 80058e4:	1a18      	subs	r0, r3, r0
 80058e6:	b003      	add	sp, #12
 80058e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058f2:	e7ed      	b.n	80058d0 <__exponent+0x4c>
 80058f4:	2330      	movs	r3, #48	; 0x30
 80058f6:	3130      	adds	r1, #48	; 0x30
 80058f8:	7083      	strb	r3, [r0, #2]
 80058fa:	70c1      	strb	r1, [r0, #3]
 80058fc:	1d03      	adds	r3, r0, #4
 80058fe:	e7f1      	b.n	80058e4 <__exponent+0x60>

08005900 <_printf_float>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	ed2d 8b02 	vpush	{d8}
 8005908:	b08d      	sub	sp, #52	; 0x34
 800590a:	460c      	mov	r4, r1
 800590c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005910:	4616      	mov	r6, r2
 8005912:	461f      	mov	r7, r3
 8005914:	4605      	mov	r5, r0
 8005916:	f001 fe1b 	bl	8007550 <_localeconv_r>
 800591a:	f8d0 a000 	ldr.w	sl, [r0]
 800591e:	4650      	mov	r0, sl
 8005920:	f7fa fc56 	bl	80001d0 <strlen>
 8005924:	2300      	movs	r3, #0
 8005926:	930a      	str	r3, [sp, #40]	; 0x28
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	f8d8 3000 	ldr.w	r3, [r8]
 8005930:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005934:	3307      	adds	r3, #7
 8005936:	f023 0307 	bic.w	r3, r3, #7
 800593a:	f103 0208 	add.w	r2, r3, #8
 800593e:	f8c8 2000 	str.w	r2, [r8]
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800594a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800594e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005952:	9307      	str	r3, [sp, #28]
 8005954:	f8cd 8018 	str.w	r8, [sp, #24]
 8005958:	ee08 0a10 	vmov	s16, r0
 800595c:	4b9f      	ldr	r3, [pc, #636]	; (8005bdc <_printf_float+0x2dc>)
 800595e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	f7fb f8e1 	bl	8000b2c <__aeabi_dcmpun>
 800596a:	bb88      	cbnz	r0, 80059d0 <_printf_float+0xd0>
 800596c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005970:	4b9a      	ldr	r3, [pc, #616]	; (8005bdc <_printf_float+0x2dc>)
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	f7fb f8bb 	bl	8000af0 <__aeabi_dcmple>
 800597a:	bb48      	cbnz	r0, 80059d0 <_printf_float+0xd0>
 800597c:	2200      	movs	r2, #0
 800597e:	2300      	movs	r3, #0
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	f7fb f8aa 	bl	8000adc <__aeabi_dcmplt>
 8005988:	b110      	cbz	r0, 8005990 <_printf_float+0x90>
 800598a:	232d      	movs	r3, #45	; 0x2d
 800598c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005990:	4b93      	ldr	r3, [pc, #588]	; (8005be0 <_printf_float+0x2e0>)
 8005992:	4894      	ldr	r0, [pc, #592]	; (8005be4 <_printf_float+0x2e4>)
 8005994:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005998:	bf94      	ite	ls
 800599a:	4698      	movls	r8, r3
 800599c:	4680      	movhi	r8, r0
 800599e:	2303      	movs	r3, #3
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	9b05      	ldr	r3, [sp, #20]
 80059a4:	f023 0204 	bic.w	r2, r3, #4
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	f04f 0900 	mov.w	r9, #0
 80059ae:	9700      	str	r7, [sp, #0]
 80059b0:	4633      	mov	r3, r6
 80059b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f9d8 	bl	8005d6c <_printf_common>
 80059bc:	3001      	adds	r0, #1
 80059be:	f040 8090 	bne.w	8005ae2 <_printf_float+0x1e2>
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295
 80059c6:	b00d      	add	sp, #52	; 0x34
 80059c8:	ecbd 8b02 	vpop	{d8}
 80059cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d0:	4642      	mov	r2, r8
 80059d2:	464b      	mov	r3, r9
 80059d4:	4640      	mov	r0, r8
 80059d6:	4649      	mov	r1, r9
 80059d8:	f7fb f8a8 	bl	8000b2c <__aeabi_dcmpun>
 80059dc:	b140      	cbz	r0, 80059f0 <_printf_float+0xf0>
 80059de:	464b      	mov	r3, r9
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bfbc      	itt	lt
 80059e4:	232d      	movlt	r3, #45	; 0x2d
 80059e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059ea:	487f      	ldr	r0, [pc, #508]	; (8005be8 <_printf_float+0x2e8>)
 80059ec:	4b7f      	ldr	r3, [pc, #508]	; (8005bec <_printf_float+0x2ec>)
 80059ee:	e7d1      	b.n	8005994 <_printf_float+0x94>
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059f6:	9206      	str	r2, [sp, #24]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	d13f      	bne.n	8005a7c <_printf_float+0x17c>
 80059fc:	2306      	movs	r3, #6
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	9b05      	ldr	r3, [sp, #20]
 8005a02:	6861      	ldr	r1, [r4, #4]
 8005a04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9303      	str	r3, [sp, #12]
 8005a0c:	ab0a      	add	r3, sp, #40	; 0x28
 8005a0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a12:	ab09      	add	r3, sp, #36	; 0x24
 8005a14:	ec49 8b10 	vmov	d0, r8, r9
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	6022      	str	r2, [r4, #0]
 8005a1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a20:	4628      	mov	r0, r5
 8005a22:	f7ff fecd 	bl	80057c0 <__cvt>
 8005a26:	9b06      	ldr	r3, [sp, #24]
 8005a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a2a:	2b47      	cmp	r3, #71	; 0x47
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	d108      	bne.n	8005a42 <_printf_float+0x142>
 8005a30:	1cc8      	adds	r0, r1, #3
 8005a32:	db02      	blt.n	8005a3a <_printf_float+0x13a>
 8005a34:	6863      	ldr	r3, [r4, #4]
 8005a36:	4299      	cmp	r1, r3
 8005a38:	dd41      	ble.n	8005abe <_printf_float+0x1be>
 8005a3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a3e:	fa5f fb8b 	uxtb.w	fp, fp
 8005a42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a46:	d820      	bhi.n	8005a8a <_printf_float+0x18a>
 8005a48:	3901      	subs	r1, #1
 8005a4a:	465a      	mov	r2, fp
 8005a4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a50:	9109      	str	r1, [sp, #36]	; 0x24
 8005a52:	f7ff ff17 	bl	8005884 <__exponent>
 8005a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a58:	1813      	adds	r3, r2, r0
 8005a5a:	2a01      	cmp	r2, #1
 8005a5c:	4681      	mov	r9, r0
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	dc02      	bgt.n	8005a68 <_printf_float+0x168>
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	07d2      	lsls	r2, r2, #31
 8005a66:	d501      	bpl.n	8005a6c <_printf_float+0x16c>
 8005a68:	3301      	adds	r3, #1
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d09c      	beq.n	80059ae <_printf_float+0xae>
 8005a74:	232d      	movs	r3, #45	; 0x2d
 8005a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a7a:	e798      	b.n	80059ae <_printf_float+0xae>
 8005a7c:	9a06      	ldr	r2, [sp, #24]
 8005a7e:	2a47      	cmp	r2, #71	; 0x47
 8005a80:	d1be      	bne.n	8005a00 <_printf_float+0x100>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1bc      	bne.n	8005a00 <_printf_float+0x100>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e7b9      	b.n	80059fe <_printf_float+0xfe>
 8005a8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a8e:	d118      	bne.n	8005ac2 <_printf_float+0x1c2>
 8005a90:	2900      	cmp	r1, #0
 8005a92:	6863      	ldr	r3, [r4, #4]
 8005a94:	dd0b      	ble.n	8005aae <_printf_float+0x1ae>
 8005a96:	6121      	str	r1, [r4, #16]
 8005a98:	b913      	cbnz	r3, 8005aa0 <_printf_float+0x1a0>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	07d0      	lsls	r0, r2, #31
 8005a9e:	d502      	bpl.n	8005aa6 <_printf_float+0x1a6>
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	440b      	add	r3, r1
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005aa8:	f04f 0900 	mov.w	r9, #0
 8005aac:	e7de      	b.n	8005a6c <_printf_float+0x16c>
 8005aae:	b913      	cbnz	r3, 8005ab6 <_printf_float+0x1b6>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	07d2      	lsls	r2, r2, #31
 8005ab4:	d501      	bpl.n	8005aba <_printf_float+0x1ba>
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	e7f4      	b.n	8005aa4 <_printf_float+0x1a4>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e7f2      	b.n	8005aa4 <_printf_float+0x1a4>
 8005abe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	db05      	blt.n	8005ad4 <_printf_float+0x1d4>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	6121      	str	r1, [r4, #16]
 8005acc:	07d8      	lsls	r0, r3, #31
 8005ace:	d5ea      	bpl.n	8005aa6 <_printf_float+0x1a6>
 8005ad0:	1c4b      	adds	r3, r1, #1
 8005ad2:	e7e7      	b.n	8005aa4 <_printf_float+0x1a4>
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	bfd4      	ite	le
 8005ad8:	f1c1 0202 	rsble	r2, r1, #2
 8005adc:	2201      	movgt	r2, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	e7e0      	b.n	8005aa4 <_printf_float+0x1a4>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	055a      	lsls	r2, r3, #21
 8005ae6:	d407      	bmi.n	8005af8 <_printf_float+0x1f8>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	4642      	mov	r2, r8
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	d12c      	bne.n	8005b50 <_printf_float+0x250>
 8005af6:	e764      	b.n	80059c2 <_printf_float+0xc2>
 8005af8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005afc:	f240 80e0 	bls.w	8005cc0 <_printf_float+0x3c0>
 8005b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b04:	2200      	movs	r2, #0
 8005b06:	2300      	movs	r3, #0
 8005b08:	f7fa ffde 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d034      	beq.n	8005b7a <_printf_float+0x27a>
 8005b10:	4a37      	ldr	r2, [pc, #220]	; (8005bf0 <_printf_float+0x2f0>)
 8005b12:	2301      	movs	r3, #1
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f af51 	beq.w	80059c2 <_printf_float+0xc2>
 8005b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b24:	429a      	cmp	r2, r3
 8005b26:	db02      	blt.n	8005b2e <_printf_float+0x22e>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07d8      	lsls	r0, r3, #31
 8005b2c:	d510      	bpl.n	8005b50 <_printf_float+0x250>
 8005b2e:	ee18 3a10 	vmov	r3, s16
 8005b32:	4652      	mov	r2, sl
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f af41 	beq.w	80059c2 <_printf_float+0xc2>
 8005b40:	f04f 0800 	mov.w	r8, #0
 8005b44:	f104 091a 	add.w	r9, r4, #26
 8005b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	4543      	cmp	r3, r8
 8005b4e:	dc09      	bgt.n	8005b64 <_printf_float+0x264>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	079b      	lsls	r3, r3, #30
 8005b54:	f100 8105 	bmi.w	8005d62 <_printf_float+0x462>
 8005b58:	68e0      	ldr	r0, [r4, #12]
 8005b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b5c:	4298      	cmp	r0, r3
 8005b5e:	bfb8      	it	lt
 8005b60:	4618      	movlt	r0, r3
 8005b62:	e730      	b.n	80059c6 <_printf_float+0xc6>
 8005b64:	2301      	movs	r3, #1
 8005b66:	464a      	mov	r2, r9
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f43f af27 	beq.w	80059c2 <_printf_float+0xc2>
 8005b74:	f108 0801 	add.w	r8, r8, #1
 8005b78:	e7e6      	b.n	8005b48 <_printf_float+0x248>
 8005b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	dc39      	bgt.n	8005bf4 <_printf_float+0x2f4>
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <_printf_float+0x2f0>)
 8005b82:	2301      	movs	r3, #1
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f af19 	beq.w	80059c2 <_printf_float+0xc2>
 8005b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b94:	4313      	orrs	r3, r2
 8005b96:	d102      	bne.n	8005b9e <_printf_float+0x29e>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	07d9      	lsls	r1, r3, #31
 8005b9c:	d5d8      	bpl.n	8005b50 <_printf_float+0x250>
 8005b9e:	ee18 3a10 	vmov	r3, s16
 8005ba2:	4652      	mov	r2, sl
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f af09 	beq.w	80059c2 <_printf_float+0xc2>
 8005bb0:	f04f 0900 	mov.w	r9, #0
 8005bb4:	f104 0a1a 	add.w	sl, r4, #26
 8005bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bba:	425b      	negs	r3, r3
 8005bbc:	454b      	cmp	r3, r9
 8005bbe:	dc01      	bgt.n	8005bc4 <_printf_float+0x2c4>
 8005bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc2:	e792      	b.n	8005aea <_printf_float+0x1ea>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f aef7 	beq.w	80059c2 <_printf_float+0xc2>
 8005bd4:	f109 0901 	add.w	r9, r9, #1
 8005bd8:	e7ee      	b.n	8005bb8 <_printf_float+0x2b8>
 8005bda:	bf00      	nop
 8005bdc:	7fefffff 	.word	0x7fefffff
 8005be0:	08009070 	.word	0x08009070
 8005be4:	08009074 	.word	0x08009074
 8005be8:	0800907c 	.word	0x0800907c
 8005bec:	08009078 	.word	0x08009078
 8005bf0:	08009080 	.word	0x08009080
 8005bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	bfa8      	it	ge
 8005bfc:	461a      	movge	r2, r3
 8005bfe:	2a00      	cmp	r2, #0
 8005c00:	4691      	mov	r9, r2
 8005c02:	dc37      	bgt.n	8005c74 <_printf_float+0x374>
 8005c04:	f04f 0b00 	mov.w	fp, #0
 8005c08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c0c:	f104 021a 	add.w	r2, r4, #26
 8005c10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c12:	9305      	str	r3, [sp, #20]
 8005c14:	eba3 0309 	sub.w	r3, r3, r9
 8005c18:	455b      	cmp	r3, fp
 8005c1a:	dc33      	bgt.n	8005c84 <_printf_float+0x384>
 8005c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c20:	429a      	cmp	r2, r3
 8005c22:	db3b      	blt.n	8005c9c <_printf_float+0x39c>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	07da      	lsls	r2, r3, #31
 8005c28:	d438      	bmi.n	8005c9c <_printf_float+0x39c>
 8005c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c2c:	9a05      	ldr	r2, [sp, #20]
 8005c2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c30:	1a9a      	subs	r2, r3, r2
 8005c32:	eba3 0901 	sub.w	r9, r3, r1
 8005c36:	4591      	cmp	r9, r2
 8005c38:	bfa8      	it	ge
 8005c3a:	4691      	movge	r9, r2
 8005c3c:	f1b9 0f00 	cmp.w	r9, #0
 8005c40:	dc35      	bgt.n	8005cae <_printf_float+0x3ae>
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c4a:	f104 0a1a 	add.w	sl, r4, #26
 8005c4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	eba3 0309 	sub.w	r3, r3, r9
 8005c58:	4543      	cmp	r3, r8
 8005c5a:	f77f af79 	ble.w	8005b50 <_printf_float+0x250>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4652      	mov	r2, sl
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f43f aeaa 	beq.w	80059c2 <_printf_float+0xc2>
 8005c6e:	f108 0801 	add.w	r8, r8, #1
 8005c72:	e7ec      	b.n	8005c4e <_printf_float+0x34e>
 8005c74:	4613      	mov	r3, r2
 8005c76:	4631      	mov	r1, r6
 8005c78:	4642      	mov	r2, r8
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d1c0      	bne.n	8005c04 <_printf_float+0x304>
 8005c82:	e69e      	b.n	80059c2 <_printf_float+0xc2>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	9205      	str	r2, [sp, #20]
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f43f ae97 	beq.w	80059c2 <_printf_float+0xc2>
 8005c94:	9a05      	ldr	r2, [sp, #20]
 8005c96:	f10b 0b01 	add.w	fp, fp, #1
 8005c9a:	e7b9      	b.n	8005c10 <_printf_float+0x310>
 8005c9c:	ee18 3a10 	vmov	r3, s16
 8005ca0:	4652      	mov	r2, sl
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d1be      	bne.n	8005c2a <_printf_float+0x32a>
 8005cac:	e689      	b.n	80059c2 <_printf_float+0xc2>
 8005cae:	9a05      	ldr	r2, [sp, #20]
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	4442      	add	r2, r8
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d1c1      	bne.n	8005c42 <_printf_float+0x342>
 8005cbe:	e680      	b.n	80059c2 <_printf_float+0xc2>
 8005cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cc2:	2a01      	cmp	r2, #1
 8005cc4:	dc01      	bgt.n	8005cca <_printf_float+0x3ca>
 8005cc6:	07db      	lsls	r3, r3, #31
 8005cc8:	d538      	bpl.n	8005d3c <_printf_float+0x43c>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4642      	mov	r2, r8
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f ae74 	beq.w	80059c2 <_printf_float+0xc2>
 8005cda:	ee18 3a10 	vmov	r3, s16
 8005cde:	4652      	mov	r2, sl
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f ae6b 	beq.w	80059c2 <_printf_float+0xc2>
 8005cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f7fa fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cf8:	b9d8      	cbnz	r0, 8005d32 <_printf_float+0x432>
 8005cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfc:	f108 0201 	add.w	r2, r8, #1
 8005d00:	3b01      	subs	r3, #1
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d10e      	bne.n	8005d2a <_printf_float+0x42a>
 8005d0c:	e659      	b.n	80059c2 <_printf_float+0xc2>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4652      	mov	r2, sl
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f ae52 	beq.w	80059c2 <_printf_float+0xc2>
 8005d1e:	f108 0801 	add.w	r8, r8, #1
 8005d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d24:	3b01      	subs	r3, #1
 8005d26:	4543      	cmp	r3, r8
 8005d28:	dcf1      	bgt.n	8005d0e <_printf_float+0x40e>
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d30:	e6dc      	b.n	8005aec <_printf_float+0x1ec>
 8005d32:	f04f 0800 	mov.w	r8, #0
 8005d36:	f104 0a1a 	add.w	sl, r4, #26
 8005d3a:	e7f2      	b.n	8005d22 <_printf_float+0x422>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4642      	mov	r2, r8
 8005d40:	e7df      	b.n	8005d02 <_printf_float+0x402>
 8005d42:	2301      	movs	r3, #1
 8005d44:	464a      	mov	r2, r9
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f ae38 	beq.w	80059c2 <_printf_float+0xc2>
 8005d52:	f108 0801 	add.w	r8, r8, #1
 8005d56:	68e3      	ldr	r3, [r4, #12]
 8005d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d5a:	1a5b      	subs	r3, r3, r1
 8005d5c:	4543      	cmp	r3, r8
 8005d5e:	dcf0      	bgt.n	8005d42 <_printf_float+0x442>
 8005d60:	e6fa      	b.n	8005b58 <_printf_float+0x258>
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	f104 0919 	add.w	r9, r4, #25
 8005d6a:	e7f4      	b.n	8005d56 <_printf_float+0x456>

08005d6c <_printf_common>:
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	4616      	mov	r6, r2
 8005d72:	4699      	mov	r9, r3
 8005d74:	688a      	ldr	r2, [r1, #8]
 8005d76:	690b      	ldr	r3, [r1, #16]
 8005d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	bfb8      	it	lt
 8005d80:	4613      	movlt	r3, r2
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d88:	4607      	mov	r7, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b10a      	cbz	r2, 8005d92 <_printf_common+0x26>
 8005d8e:	3301      	adds	r3, #1
 8005d90:	6033      	str	r3, [r6, #0]
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	0699      	lsls	r1, r3, #26
 8005d96:	bf42      	ittt	mi
 8005d98:	6833      	ldrmi	r3, [r6, #0]
 8005d9a:	3302      	addmi	r3, #2
 8005d9c:	6033      	strmi	r3, [r6, #0]
 8005d9e:	6825      	ldr	r5, [r4, #0]
 8005da0:	f015 0506 	ands.w	r5, r5, #6
 8005da4:	d106      	bne.n	8005db4 <_printf_common+0x48>
 8005da6:	f104 0a19 	add.w	sl, r4, #25
 8005daa:	68e3      	ldr	r3, [r4, #12]
 8005dac:	6832      	ldr	r2, [r6, #0]
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	42ab      	cmp	r3, r5
 8005db2:	dc26      	bgt.n	8005e02 <_printf_common+0x96>
 8005db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db8:	1e13      	subs	r3, r2, #0
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	bf18      	it	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	0692      	lsls	r2, r2, #26
 8005dc2:	d42b      	bmi.n	8005e1c <_printf_common+0xb0>
 8005dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4638      	mov	r0, r7
 8005dcc:	47c0      	blx	r8
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d01e      	beq.n	8005e10 <_printf_common+0xa4>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	68e5      	ldr	r5, [r4, #12]
 8005dd6:	6832      	ldr	r2, [r6, #0]
 8005dd8:	f003 0306 	and.w	r3, r3, #6
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	bf08      	it	eq
 8005de0:	1aad      	subeq	r5, r5, r2
 8005de2:	68a3      	ldr	r3, [r4, #8]
 8005de4:	6922      	ldr	r2, [r4, #16]
 8005de6:	bf0c      	ite	eq
 8005de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dec:	2500      	movne	r5, #0
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bfc4      	itt	gt
 8005df2:	1a9b      	subgt	r3, r3, r2
 8005df4:	18ed      	addgt	r5, r5, r3
 8005df6:	2600      	movs	r6, #0
 8005df8:	341a      	adds	r4, #26
 8005dfa:	42b5      	cmp	r5, r6
 8005dfc:	d11a      	bne.n	8005e34 <_printf_common+0xc8>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e008      	b.n	8005e14 <_printf_common+0xa8>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4652      	mov	r2, sl
 8005e06:	4649      	mov	r1, r9
 8005e08:	4638      	mov	r0, r7
 8005e0a:	47c0      	blx	r8
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d103      	bne.n	8005e18 <_printf_common+0xac>
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e18:	3501      	adds	r5, #1
 8005e1a:	e7c6      	b.n	8005daa <_printf_common+0x3e>
 8005e1c:	18e1      	adds	r1, r4, r3
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	2030      	movs	r0, #48	; 0x30
 8005e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e26:	4422      	add	r2, r4
 8005e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e30:	3302      	adds	r3, #2
 8005e32:	e7c7      	b.n	8005dc4 <_printf_common+0x58>
 8005e34:	2301      	movs	r3, #1
 8005e36:	4622      	mov	r2, r4
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	47c0      	blx	r8
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d0e6      	beq.n	8005e10 <_printf_common+0xa4>
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7d9      	b.n	8005dfa <_printf_common+0x8e>
	...

08005e48 <_printf_i>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	7e0f      	ldrb	r7, [r1, #24]
 8005e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e50:	2f78      	cmp	r7, #120	; 0x78
 8005e52:	4691      	mov	r9, r2
 8005e54:	4680      	mov	r8, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	469a      	mov	sl, r3
 8005e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e5e:	d807      	bhi.n	8005e70 <_printf_i+0x28>
 8005e60:	2f62      	cmp	r7, #98	; 0x62
 8005e62:	d80a      	bhi.n	8005e7a <_printf_i+0x32>
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f000 80d8 	beq.w	800601a <_printf_i+0x1d2>
 8005e6a:	2f58      	cmp	r7, #88	; 0x58
 8005e6c:	f000 80a3 	beq.w	8005fb6 <_printf_i+0x16e>
 8005e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e78:	e03a      	b.n	8005ef0 <_printf_i+0xa8>
 8005e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e7e:	2b15      	cmp	r3, #21
 8005e80:	d8f6      	bhi.n	8005e70 <_printf_i+0x28>
 8005e82:	a101      	add	r1, pc, #4	; (adr r1, 8005e88 <_printf_i+0x40>)
 8005e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005e71 	.word	0x08005e71
 8005e94:	08005e71 	.word	0x08005e71
 8005e98:	08005e71 	.word	0x08005e71
 8005e9c:	08005e71 	.word	0x08005e71
 8005ea0:	08005ef5 	.word	0x08005ef5
 8005ea4:	08005e71 	.word	0x08005e71
 8005ea8:	08005e71 	.word	0x08005e71
 8005eac:	08005e71 	.word	0x08005e71
 8005eb0:	08005e71 	.word	0x08005e71
 8005eb4:	08006001 	.word	0x08006001
 8005eb8:	08005f25 	.word	0x08005f25
 8005ebc:	08005fe3 	.word	0x08005fe3
 8005ec0:	08005e71 	.word	0x08005e71
 8005ec4:	08005e71 	.word	0x08005e71
 8005ec8:	08006023 	.word	0x08006023
 8005ecc:	08005e71 	.word	0x08005e71
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005e71 	.word	0x08005e71
 8005ed8:	08005e71 	.word	0x08005e71
 8005edc:	08005feb 	.word	0x08005feb
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	602a      	str	r2, [r5, #0]
 8005ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0a3      	b.n	800603c <_printf_i+0x1f4>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	6829      	ldr	r1, [r5, #0]
 8005ef8:	0606      	lsls	r6, r0, #24
 8005efa:	f101 0304 	add.w	r3, r1, #4
 8005efe:	d50a      	bpl.n	8005f16 <_printf_i+0xce>
 8005f00:	680e      	ldr	r6, [r1, #0]
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	2e00      	cmp	r6, #0
 8005f06:	da03      	bge.n	8005f10 <_printf_i+0xc8>
 8005f08:	232d      	movs	r3, #45	; 0x2d
 8005f0a:	4276      	negs	r6, r6
 8005f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f10:	485e      	ldr	r0, [pc, #376]	; (800608c <_printf_i+0x244>)
 8005f12:	230a      	movs	r3, #10
 8005f14:	e019      	b.n	8005f4a <_printf_i+0x102>
 8005f16:	680e      	ldr	r6, [r1, #0]
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f1e:	bf18      	it	ne
 8005f20:	b236      	sxthne	r6, r6
 8005f22:	e7ef      	b.n	8005f04 <_printf_i+0xbc>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	6820      	ldr	r0, [r4, #0]
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	6029      	str	r1, [r5, #0]
 8005f2c:	0601      	lsls	r1, r0, #24
 8005f2e:	d501      	bpl.n	8005f34 <_printf_i+0xec>
 8005f30:	681e      	ldr	r6, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <_printf_i+0xf2>
 8005f34:	0646      	lsls	r6, r0, #25
 8005f36:	d5fb      	bpl.n	8005f30 <_printf_i+0xe8>
 8005f38:	881e      	ldrh	r6, [r3, #0]
 8005f3a:	4854      	ldr	r0, [pc, #336]	; (800608c <_printf_i+0x244>)
 8005f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f3e:	bf0c      	ite	eq
 8005f40:	2308      	moveq	r3, #8
 8005f42:	230a      	movne	r3, #10
 8005f44:	2100      	movs	r1, #0
 8005f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4a:	6865      	ldr	r5, [r4, #4]
 8005f4c:	60a5      	str	r5, [r4, #8]
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	bfa2      	ittt	ge
 8005f52:	6821      	ldrge	r1, [r4, #0]
 8005f54:	f021 0104 	bicge.w	r1, r1, #4
 8005f58:	6021      	strge	r1, [r4, #0]
 8005f5a:	b90e      	cbnz	r6, 8005f60 <_printf_i+0x118>
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	d04d      	beq.n	8005ffc <_printf_i+0x1b4>
 8005f60:	4615      	mov	r5, r2
 8005f62:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f66:	fb03 6711 	mls	r7, r3, r1, r6
 8005f6a:	5dc7      	ldrb	r7, [r0, r7]
 8005f6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f70:	4637      	mov	r7, r6
 8005f72:	42bb      	cmp	r3, r7
 8005f74:	460e      	mov	r6, r1
 8005f76:	d9f4      	bls.n	8005f62 <_printf_i+0x11a>
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d10b      	bne.n	8005f94 <_printf_i+0x14c>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	07de      	lsls	r6, r3, #31
 8005f80:	d508      	bpl.n	8005f94 <_printf_i+0x14c>
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	6861      	ldr	r1, [r4, #4]
 8005f86:	4299      	cmp	r1, r3
 8005f88:	bfde      	ittt	le
 8005f8a:	2330      	movle	r3, #48	; 0x30
 8005f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f94:	1b52      	subs	r2, r2, r5
 8005f96:	6122      	str	r2, [r4, #16]
 8005f98:	f8cd a000 	str.w	sl, [sp]
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	aa03      	add	r2, sp, #12
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f7ff fee2 	bl	8005d6c <_printf_common>
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d14c      	bne.n	8006046 <_printf_i+0x1fe>
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	b004      	add	sp, #16
 8005fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb6:	4835      	ldr	r0, [pc, #212]	; (800608c <_printf_i+0x244>)
 8005fb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fbc:	6829      	ldr	r1, [r5, #0]
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fc4:	6029      	str	r1, [r5, #0]
 8005fc6:	061d      	lsls	r5, r3, #24
 8005fc8:	d514      	bpl.n	8005ff4 <_printf_i+0x1ac>
 8005fca:	07df      	lsls	r7, r3, #31
 8005fcc:	bf44      	itt	mi
 8005fce:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd2:	6023      	strmi	r3, [r4, #0]
 8005fd4:	b91e      	cbnz	r6, 8005fde <_printf_i+0x196>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f023 0320 	bic.w	r3, r3, #32
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	2310      	movs	r3, #16
 8005fe0:	e7b0      	b.n	8005f44 <_printf_i+0xfc>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f043 0320 	orr.w	r3, r3, #32
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	2378      	movs	r3, #120	; 0x78
 8005fec:	4828      	ldr	r0, [pc, #160]	; (8006090 <_printf_i+0x248>)
 8005fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff2:	e7e3      	b.n	8005fbc <_printf_i+0x174>
 8005ff4:	0659      	lsls	r1, r3, #25
 8005ff6:	bf48      	it	mi
 8005ff8:	b2b6      	uxthmi	r6, r6
 8005ffa:	e7e6      	b.n	8005fca <_printf_i+0x182>
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	e7bb      	b.n	8005f78 <_printf_i+0x130>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	6826      	ldr	r6, [r4, #0]
 8006004:	6961      	ldr	r1, [r4, #20]
 8006006:	1d18      	adds	r0, r3, #4
 8006008:	6028      	str	r0, [r5, #0]
 800600a:	0635      	lsls	r5, r6, #24
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	d501      	bpl.n	8006014 <_printf_i+0x1cc>
 8006010:	6019      	str	r1, [r3, #0]
 8006012:	e002      	b.n	800601a <_printf_i+0x1d2>
 8006014:	0670      	lsls	r0, r6, #25
 8006016:	d5fb      	bpl.n	8006010 <_printf_i+0x1c8>
 8006018:	8019      	strh	r1, [r3, #0]
 800601a:	2300      	movs	r3, #0
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	4615      	mov	r5, r2
 8006020:	e7ba      	b.n	8005f98 <_printf_i+0x150>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	1d1a      	adds	r2, r3, #4
 8006026:	602a      	str	r2, [r5, #0]
 8006028:	681d      	ldr	r5, [r3, #0]
 800602a:	6862      	ldr	r2, [r4, #4]
 800602c:	2100      	movs	r1, #0
 800602e:	4628      	mov	r0, r5
 8006030:	f7fa f8d6 	bl	80001e0 <memchr>
 8006034:	b108      	cbz	r0, 800603a <_printf_i+0x1f2>
 8006036:	1b40      	subs	r0, r0, r5
 8006038:	6060      	str	r0, [r4, #4]
 800603a:	6863      	ldr	r3, [r4, #4]
 800603c:	6123      	str	r3, [r4, #16]
 800603e:	2300      	movs	r3, #0
 8006040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006044:	e7a8      	b.n	8005f98 <_printf_i+0x150>
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	462a      	mov	r2, r5
 800604a:	4649      	mov	r1, r9
 800604c:	4640      	mov	r0, r8
 800604e:	47d0      	blx	sl
 8006050:	3001      	adds	r0, #1
 8006052:	d0ab      	beq.n	8005fac <_printf_i+0x164>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	079b      	lsls	r3, r3, #30
 8006058:	d413      	bmi.n	8006082 <_printf_i+0x23a>
 800605a:	68e0      	ldr	r0, [r4, #12]
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	4298      	cmp	r0, r3
 8006060:	bfb8      	it	lt
 8006062:	4618      	movlt	r0, r3
 8006064:	e7a4      	b.n	8005fb0 <_printf_i+0x168>
 8006066:	2301      	movs	r3, #1
 8006068:	4632      	mov	r2, r6
 800606a:	4649      	mov	r1, r9
 800606c:	4640      	mov	r0, r8
 800606e:	47d0      	blx	sl
 8006070:	3001      	adds	r0, #1
 8006072:	d09b      	beq.n	8005fac <_printf_i+0x164>
 8006074:	3501      	adds	r5, #1
 8006076:	68e3      	ldr	r3, [r4, #12]
 8006078:	9903      	ldr	r1, [sp, #12]
 800607a:	1a5b      	subs	r3, r3, r1
 800607c:	42ab      	cmp	r3, r5
 800607e:	dcf2      	bgt.n	8006066 <_printf_i+0x21e>
 8006080:	e7eb      	b.n	800605a <_printf_i+0x212>
 8006082:	2500      	movs	r5, #0
 8006084:	f104 0619 	add.w	r6, r4, #25
 8006088:	e7f5      	b.n	8006076 <_printf_i+0x22e>
 800608a:	bf00      	nop
 800608c:	08009082 	.word	0x08009082
 8006090:	08009093 	.word	0x08009093

08006094 <iprintf>:
 8006094:	b40f      	push	{r0, r1, r2, r3}
 8006096:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <iprintf+0x2c>)
 8006098:	b513      	push	{r0, r1, r4, lr}
 800609a:	681c      	ldr	r4, [r3, #0]
 800609c:	b124      	cbz	r4, 80060a8 <iprintf+0x14>
 800609e:	69a3      	ldr	r3, [r4, #24]
 80060a0:	b913      	cbnz	r3, 80060a8 <iprintf+0x14>
 80060a2:	4620      	mov	r0, r4
 80060a4:	f001 f9a4 	bl	80073f0 <__sinit>
 80060a8:	ab05      	add	r3, sp, #20
 80060aa:	9a04      	ldr	r2, [sp, #16]
 80060ac:	68a1      	ldr	r1, [r4, #8]
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	4620      	mov	r0, r4
 80060b2:	f002 f8c1 	bl	8008238 <_vfiprintf_r>
 80060b6:	b002      	add	sp, #8
 80060b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060bc:	b004      	add	sp, #16
 80060be:	4770      	bx	lr
 80060c0:	200000f8 	.word	0x200000f8

080060c4 <_puts_r>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	460e      	mov	r6, r1
 80060c8:	4605      	mov	r5, r0
 80060ca:	b118      	cbz	r0, 80060d4 <_puts_r+0x10>
 80060cc:	6983      	ldr	r3, [r0, #24]
 80060ce:	b90b      	cbnz	r3, 80060d4 <_puts_r+0x10>
 80060d0:	f001 f98e 	bl	80073f0 <__sinit>
 80060d4:	69ab      	ldr	r3, [r5, #24]
 80060d6:	68ac      	ldr	r4, [r5, #8]
 80060d8:	b913      	cbnz	r3, 80060e0 <_puts_r+0x1c>
 80060da:	4628      	mov	r0, r5
 80060dc:	f001 f988 	bl	80073f0 <__sinit>
 80060e0:	4b2c      	ldr	r3, [pc, #176]	; (8006194 <_puts_r+0xd0>)
 80060e2:	429c      	cmp	r4, r3
 80060e4:	d120      	bne.n	8006128 <_puts_r+0x64>
 80060e6:	686c      	ldr	r4, [r5, #4]
 80060e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ea:	07db      	lsls	r3, r3, #31
 80060ec:	d405      	bmi.n	80060fa <_puts_r+0x36>
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	0598      	lsls	r0, r3, #22
 80060f2:	d402      	bmi.n	80060fa <_puts_r+0x36>
 80060f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f6:	f001 fa30 	bl	800755a <__retarget_lock_acquire_recursive>
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	0719      	lsls	r1, r3, #28
 80060fe:	d51d      	bpl.n	800613c <_puts_r+0x78>
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	b1db      	cbz	r3, 800613c <_puts_r+0x78>
 8006104:	3e01      	subs	r6, #1
 8006106:	68a3      	ldr	r3, [r4, #8]
 8006108:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800610c:	3b01      	subs	r3, #1
 800610e:	60a3      	str	r3, [r4, #8]
 8006110:	bb39      	cbnz	r1, 8006162 <_puts_r+0x9e>
 8006112:	2b00      	cmp	r3, #0
 8006114:	da38      	bge.n	8006188 <_puts_r+0xc4>
 8006116:	4622      	mov	r2, r4
 8006118:	210a      	movs	r1, #10
 800611a:	4628      	mov	r0, r5
 800611c:	f000 f8f6 	bl	800630c <__swbuf_r>
 8006120:	3001      	adds	r0, #1
 8006122:	d011      	beq.n	8006148 <_puts_r+0x84>
 8006124:	250a      	movs	r5, #10
 8006126:	e011      	b.n	800614c <_puts_r+0x88>
 8006128:	4b1b      	ldr	r3, [pc, #108]	; (8006198 <_puts_r+0xd4>)
 800612a:	429c      	cmp	r4, r3
 800612c:	d101      	bne.n	8006132 <_puts_r+0x6e>
 800612e:	68ac      	ldr	r4, [r5, #8]
 8006130:	e7da      	b.n	80060e8 <_puts_r+0x24>
 8006132:	4b1a      	ldr	r3, [pc, #104]	; (800619c <_puts_r+0xd8>)
 8006134:	429c      	cmp	r4, r3
 8006136:	bf08      	it	eq
 8006138:	68ec      	ldreq	r4, [r5, #12]
 800613a:	e7d5      	b.n	80060e8 <_puts_r+0x24>
 800613c:	4621      	mov	r1, r4
 800613e:	4628      	mov	r0, r5
 8006140:	f000 f936 	bl	80063b0 <__swsetup_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	d0dd      	beq.n	8006104 <_puts_r+0x40>
 8006148:	f04f 35ff 	mov.w	r5, #4294967295
 800614c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800614e:	07da      	lsls	r2, r3, #31
 8006150:	d405      	bmi.n	800615e <_puts_r+0x9a>
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	059b      	lsls	r3, r3, #22
 8006156:	d402      	bmi.n	800615e <_puts_r+0x9a>
 8006158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800615a:	f001 f9ff 	bl	800755c <__retarget_lock_release_recursive>
 800615e:	4628      	mov	r0, r5
 8006160:	bd70      	pop	{r4, r5, r6, pc}
 8006162:	2b00      	cmp	r3, #0
 8006164:	da04      	bge.n	8006170 <_puts_r+0xac>
 8006166:	69a2      	ldr	r2, [r4, #24]
 8006168:	429a      	cmp	r2, r3
 800616a:	dc06      	bgt.n	800617a <_puts_r+0xb6>
 800616c:	290a      	cmp	r1, #10
 800616e:	d004      	beq.n	800617a <_puts_r+0xb6>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	6022      	str	r2, [r4, #0]
 8006176:	7019      	strb	r1, [r3, #0]
 8006178:	e7c5      	b.n	8006106 <_puts_r+0x42>
 800617a:	4622      	mov	r2, r4
 800617c:	4628      	mov	r0, r5
 800617e:	f000 f8c5 	bl	800630c <__swbuf_r>
 8006182:	3001      	adds	r0, #1
 8006184:	d1bf      	bne.n	8006106 <_puts_r+0x42>
 8006186:	e7df      	b.n	8006148 <_puts_r+0x84>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	250a      	movs	r5, #10
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	6022      	str	r2, [r4, #0]
 8006190:	701d      	strb	r5, [r3, #0]
 8006192:	e7db      	b.n	800614c <_puts_r+0x88>
 8006194:	080091f0 	.word	0x080091f0
 8006198:	08009210 	.word	0x08009210
 800619c:	080091d0 	.word	0x080091d0

080061a0 <puts>:
 80061a0:	4b02      	ldr	r3, [pc, #8]	; (80061ac <puts+0xc>)
 80061a2:	4601      	mov	r1, r0
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	f7ff bf8d 	b.w	80060c4 <_puts_r>
 80061aa:	bf00      	nop
 80061ac:	200000f8 	.word	0x200000f8

080061b0 <siprintf>:
 80061b0:	b40e      	push	{r1, r2, r3}
 80061b2:	b500      	push	{lr}
 80061b4:	b09c      	sub	sp, #112	; 0x70
 80061b6:	ab1d      	add	r3, sp, #116	; 0x74
 80061b8:	9002      	str	r0, [sp, #8]
 80061ba:	9006      	str	r0, [sp, #24]
 80061bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061c0:	4809      	ldr	r0, [pc, #36]	; (80061e8 <siprintf+0x38>)
 80061c2:	9107      	str	r1, [sp, #28]
 80061c4:	9104      	str	r1, [sp, #16]
 80061c6:	4909      	ldr	r1, [pc, #36]	; (80061ec <siprintf+0x3c>)
 80061c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061cc:	9105      	str	r1, [sp, #20]
 80061ce:	6800      	ldr	r0, [r0, #0]
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	a902      	add	r1, sp, #8
 80061d4:	f001 ff06 	bl	8007fe4 <_svfiprintf_r>
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	b01c      	add	sp, #112	; 0x70
 80061e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061e4:	b003      	add	sp, #12
 80061e6:	4770      	bx	lr
 80061e8:	200000f8 	.word	0x200000f8
 80061ec:	ffff0208 	.word	0xffff0208

080061f0 <strcpy>:
 80061f0:	4603      	mov	r3, r0
 80061f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061f6:	f803 2b01 	strb.w	r2, [r3], #1
 80061fa:	2a00      	cmp	r2, #0
 80061fc:	d1f9      	bne.n	80061f2 <strcpy+0x2>
 80061fe:	4770      	bx	lr

08006200 <strncpy>:
 8006200:	b510      	push	{r4, lr}
 8006202:	3901      	subs	r1, #1
 8006204:	4603      	mov	r3, r0
 8006206:	b132      	cbz	r2, 8006216 <strncpy+0x16>
 8006208:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800620c:	f803 4b01 	strb.w	r4, [r3], #1
 8006210:	3a01      	subs	r2, #1
 8006212:	2c00      	cmp	r4, #0
 8006214:	d1f7      	bne.n	8006206 <strncpy+0x6>
 8006216:	441a      	add	r2, r3
 8006218:	2100      	movs	r1, #0
 800621a:	4293      	cmp	r3, r2
 800621c:	d100      	bne.n	8006220 <strncpy+0x20>
 800621e:	bd10      	pop	{r4, pc}
 8006220:	f803 1b01 	strb.w	r1, [r3], #1
 8006224:	e7f9      	b.n	800621a <strncpy+0x1a>

08006226 <strstr>:
 8006226:	780a      	ldrb	r2, [r1, #0]
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	b96a      	cbnz	r2, 8006248 <strstr+0x22>
 800622c:	bd70      	pop	{r4, r5, r6, pc}
 800622e:	429a      	cmp	r2, r3
 8006230:	d109      	bne.n	8006246 <strstr+0x20>
 8006232:	460c      	mov	r4, r1
 8006234:	4605      	mov	r5, r0
 8006236:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f6      	beq.n	800622c <strstr+0x6>
 800623e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006242:	429e      	cmp	r6, r3
 8006244:	d0f7      	beq.n	8006236 <strstr+0x10>
 8006246:	3001      	adds	r0, #1
 8006248:	7803      	ldrb	r3, [r0, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1ef      	bne.n	800622e <strstr+0x8>
 800624e:	4618      	mov	r0, r3
 8006250:	e7ec      	b.n	800622c <strstr+0x6>
	...

08006254 <strtok>:
 8006254:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <strtok+0x5c>)
 8006256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006258:	681e      	ldr	r6, [r3, #0]
 800625a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800625c:	4605      	mov	r5, r0
 800625e:	b9fc      	cbnz	r4, 80062a0 <strtok+0x4c>
 8006260:	2050      	movs	r0, #80	; 0x50
 8006262:	9101      	str	r1, [sp, #4]
 8006264:	f001 f9e0 	bl	8007628 <malloc>
 8006268:	9901      	ldr	r1, [sp, #4]
 800626a:	65b0      	str	r0, [r6, #88]	; 0x58
 800626c:	4602      	mov	r2, r0
 800626e:	b920      	cbnz	r0, 800627a <strtok+0x26>
 8006270:	4b10      	ldr	r3, [pc, #64]	; (80062b4 <strtok+0x60>)
 8006272:	4811      	ldr	r0, [pc, #68]	; (80062b8 <strtok+0x64>)
 8006274:	2157      	movs	r1, #87	; 0x57
 8006276:	f000 f909 	bl	800648c <__assert_func>
 800627a:	e9c0 4400 	strd	r4, r4, [r0]
 800627e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006282:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006286:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800628a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800628e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006292:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006296:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800629a:	6184      	str	r4, [r0, #24]
 800629c:	7704      	strb	r4, [r0, #28]
 800629e:	6244      	str	r4, [r0, #36]	; 0x24
 80062a0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80062a2:	2301      	movs	r3, #1
 80062a4:	4628      	mov	r0, r5
 80062a6:	b002      	add	sp, #8
 80062a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062ac:	f000 b806 	b.w	80062bc <__strtok_r>
 80062b0:	200000f8 	.word	0x200000f8
 80062b4:	080090a4 	.word	0x080090a4
 80062b8:	080090bb 	.word	0x080090bb

080062bc <__strtok_r>:
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062be:	b908      	cbnz	r0, 80062c4 <__strtok_r+0x8>
 80062c0:	6810      	ldr	r0, [r2, #0]
 80062c2:	b188      	cbz	r0, 80062e8 <__strtok_r+0x2c>
 80062c4:	4604      	mov	r4, r0
 80062c6:	4620      	mov	r0, r4
 80062c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80062cc:	460f      	mov	r7, r1
 80062ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80062d2:	b91e      	cbnz	r6, 80062dc <__strtok_r+0x20>
 80062d4:	b965      	cbnz	r5, 80062f0 <__strtok_r+0x34>
 80062d6:	6015      	str	r5, [r2, #0]
 80062d8:	4628      	mov	r0, r5
 80062da:	e005      	b.n	80062e8 <__strtok_r+0x2c>
 80062dc:	42b5      	cmp	r5, r6
 80062de:	d1f6      	bne.n	80062ce <__strtok_r+0x12>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1f0      	bne.n	80062c6 <__strtok_r+0xa>
 80062e4:	6014      	str	r4, [r2, #0]
 80062e6:	7003      	strb	r3, [r0, #0]
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ea:	461c      	mov	r4, r3
 80062ec:	e00c      	b.n	8006308 <__strtok_r+0x4c>
 80062ee:	b915      	cbnz	r5, 80062f6 <__strtok_r+0x3a>
 80062f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80062f4:	460e      	mov	r6, r1
 80062f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80062fa:	42ab      	cmp	r3, r5
 80062fc:	d1f7      	bne.n	80062ee <__strtok_r+0x32>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f3      	beq.n	80062ea <__strtok_r+0x2e>
 8006302:	2300      	movs	r3, #0
 8006304:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006308:	6014      	str	r4, [r2, #0]
 800630a:	e7ed      	b.n	80062e8 <__strtok_r+0x2c>

0800630c <__swbuf_r>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	460e      	mov	r6, r1
 8006310:	4614      	mov	r4, r2
 8006312:	4605      	mov	r5, r0
 8006314:	b118      	cbz	r0, 800631e <__swbuf_r+0x12>
 8006316:	6983      	ldr	r3, [r0, #24]
 8006318:	b90b      	cbnz	r3, 800631e <__swbuf_r+0x12>
 800631a:	f001 f869 	bl	80073f0 <__sinit>
 800631e:	4b21      	ldr	r3, [pc, #132]	; (80063a4 <__swbuf_r+0x98>)
 8006320:	429c      	cmp	r4, r3
 8006322:	d12b      	bne.n	800637c <__swbuf_r+0x70>
 8006324:	686c      	ldr	r4, [r5, #4]
 8006326:	69a3      	ldr	r3, [r4, #24]
 8006328:	60a3      	str	r3, [r4, #8]
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	071a      	lsls	r2, r3, #28
 800632e:	d52f      	bpl.n	8006390 <__swbuf_r+0x84>
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	b36b      	cbz	r3, 8006390 <__swbuf_r+0x84>
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	6820      	ldr	r0, [r4, #0]
 8006338:	1ac0      	subs	r0, r0, r3
 800633a:	6963      	ldr	r3, [r4, #20]
 800633c:	b2f6      	uxtb	r6, r6
 800633e:	4283      	cmp	r3, r0
 8006340:	4637      	mov	r7, r6
 8006342:	dc04      	bgt.n	800634e <__swbuf_r+0x42>
 8006344:	4621      	mov	r1, r4
 8006346:	4628      	mov	r0, r5
 8006348:	f000 ffbe 	bl	80072c8 <_fflush_r>
 800634c:	bb30      	cbnz	r0, 800639c <__swbuf_r+0x90>
 800634e:	68a3      	ldr	r3, [r4, #8]
 8006350:	3b01      	subs	r3, #1
 8006352:	60a3      	str	r3, [r4, #8]
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	6022      	str	r2, [r4, #0]
 800635a:	701e      	strb	r6, [r3, #0]
 800635c:	6963      	ldr	r3, [r4, #20]
 800635e:	3001      	adds	r0, #1
 8006360:	4283      	cmp	r3, r0
 8006362:	d004      	beq.n	800636e <__swbuf_r+0x62>
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	07db      	lsls	r3, r3, #31
 8006368:	d506      	bpl.n	8006378 <__swbuf_r+0x6c>
 800636a:	2e0a      	cmp	r6, #10
 800636c:	d104      	bne.n	8006378 <__swbuf_r+0x6c>
 800636e:	4621      	mov	r1, r4
 8006370:	4628      	mov	r0, r5
 8006372:	f000 ffa9 	bl	80072c8 <_fflush_r>
 8006376:	b988      	cbnz	r0, 800639c <__swbuf_r+0x90>
 8006378:	4638      	mov	r0, r7
 800637a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <__swbuf_r+0x9c>)
 800637e:	429c      	cmp	r4, r3
 8006380:	d101      	bne.n	8006386 <__swbuf_r+0x7a>
 8006382:	68ac      	ldr	r4, [r5, #8]
 8006384:	e7cf      	b.n	8006326 <__swbuf_r+0x1a>
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <__swbuf_r+0xa0>)
 8006388:	429c      	cmp	r4, r3
 800638a:	bf08      	it	eq
 800638c:	68ec      	ldreq	r4, [r5, #12]
 800638e:	e7ca      	b.n	8006326 <__swbuf_r+0x1a>
 8006390:	4621      	mov	r1, r4
 8006392:	4628      	mov	r0, r5
 8006394:	f000 f80c 	bl	80063b0 <__swsetup_r>
 8006398:	2800      	cmp	r0, #0
 800639a:	d0cb      	beq.n	8006334 <__swbuf_r+0x28>
 800639c:	f04f 37ff 	mov.w	r7, #4294967295
 80063a0:	e7ea      	b.n	8006378 <__swbuf_r+0x6c>
 80063a2:	bf00      	nop
 80063a4:	080091f0 	.word	0x080091f0
 80063a8:	08009210 	.word	0x08009210
 80063ac:	080091d0 	.word	0x080091d0

080063b0 <__swsetup_r>:
 80063b0:	4b32      	ldr	r3, [pc, #200]	; (800647c <__swsetup_r+0xcc>)
 80063b2:	b570      	push	{r4, r5, r6, lr}
 80063b4:	681d      	ldr	r5, [r3, #0]
 80063b6:	4606      	mov	r6, r0
 80063b8:	460c      	mov	r4, r1
 80063ba:	b125      	cbz	r5, 80063c6 <__swsetup_r+0x16>
 80063bc:	69ab      	ldr	r3, [r5, #24]
 80063be:	b913      	cbnz	r3, 80063c6 <__swsetup_r+0x16>
 80063c0:	4628      	mov	r0, r5
 80063c2:	f001 f815 	bl	80073f0 <__sinit>
 80063c6:	4b2e      	ldr	r3, [pc, #184]	; (8006480 <__swsetup_r+0xd0>)
 80063c8:	429c      	cmp	r4, r3
 80063ca:	d10f      	bne.n	80063ec <__swsetup_r+0x3c>
 80063cc:	686c      	ldr	r4, [r5, #4]
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063d4:	0719      	lsls	r1, r3, #28
 80063d6:	d42c      	bmi.n	8006432 <__swsetup_r+0x82>
 80063d8:	06dd      	lsls	r5, r3, #27
 80063da:	d411      	bmi.n	8006400 <__swsetup_r+0x50>
 80063dc:	2309      	movs	r3, #9
 80063de:	6033      	str	r3, [r6, #0]
 80063e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ea:	e03e      	b.n	800646a <__swsetup_r+0xba>
 80063ec:	4b25      	ldr	r3, [pc, #148]	; (8006484 <__swsetup_r+0xd4>)
 80063ee:	429c      	cmp	r4, r3
 80063f0:	d101      	bne.n	80063f6 <__swsetup_r+0x46>
 80063f2:	68ac      	ldr	r4, [r5, #8]
 80063f4:	e7eb      	b.n	80063ce <__swsetup_r+0x1e>
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <__swsetup_r+0xd8>)
 80063f8:	429c      	cmp	r4, r3
 80063fa:	bf08      	it	eq
 80063fc:	68ec      	ldreq	r4, [r5, #12]
 80063fe:	e7e6      	b.n	80063ce <__swsetup_r+0x1e>
 8006400:	0758      	lsls	r0, r3, #29
 8006402:	d512      	bpl.n	800642a <__swsetup_r+0x7a>
 8006404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006406:	b141      	cbz	r1, 800641a <__swsetup_r+0x6a>
 8006408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800640c:	4299      	cmp	r1, r3
 800640e:	d002      	beq.n	8006416 <__swsetup_r+0x66>
 8006410:	4630      	mov	r0, r6
 8006412:	f001 fcab 	bl	8007d6c <_free_r>
 8006416:	2300      	movs	r3, #0
 8006418:	6363      	str	r3, [r4, #52]	; 0x34
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	2300      	movs	r3, #0
 8006424:	6063      	str	r3, [r4, #4]
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f043 0308 	orr.w	r3, r3, #8
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	b94b      	cbnz	r3, 800644a <__swsetup_r+0x9a>
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800643c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006440:	d003      	beq.n	800644a <__swsetup_r+0x9a>
 8006442:	4621      	mov	r1, r4
 8006444:	4630      	mov	r0, r6
 8006446:	f001 f8af 	bl	80075a8 <__smakebuf_r>
 800644a:	89a0      	ldrh	r0, [r4, #12]
 800644c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006450:	f010 0301 	ands.w	r3, r0, #1
 8006454:	d00a      	beq.n	800646c <__swsetup_r+0xbc>
 8006456:	2300      	movs	r3, #0
 8006458:	60a3      	str	r3, [r4, #8]
 800645a:	6963      	ldr	r3, [r4, #20]
 800645c:	425b      	negs	r3, r3
 800645e:	61a3      	str	r3, [r4, #24]
 8006460:	6923      	ldr	r3, [r4, #16]
 8006462:	b943      	cbnz	r3, 8006476 <__swsetup_r+0xc6>
 8006464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006468:	d1ba      	bne.n	80063e0 <__swsetup_r+0x30>
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	0781      	lsls	r1, r0, #30
 800646e:	bf58      	it	pl
 8006470:	6963      	ldrpl	r3, [r4, #20]
 8006472:	60a3      	str	r3, [r4, #8]
 8006474:	e7f4      	b.n	8006460 <__swsetup_r+0xb0>
 8006476:	2000      	movs	r0, #0
 8006478:	e7f7      	b.n	800646a <__swsetup_r+0xba>
 800647a:	bf00      	nop
 800647c:	200000f8 	.word	0x200000f8
 8006480:	080091f0 	.word	0x080091f0
 8006484:	08009210 	.word	0x08009210
 8006488:	080091d0 	.word	0x080091d0

0800648c <__assert_func>:
 800648c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800648e:	4614      	mov	r4, r2
 8006490:	461a      	mov	r2, r3
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <__assert_func+0x2c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4605      	mov	r5, r0
 8006498:	68d8      	ldr	r0, [r3, #12]
 800649a:	b14c      	cbz	r4, 80064b0 <__assert_func+0x24>
 800649c:	4b07      	ldr	r3, [pc, #28]	; (80064bc <__assert_func+0x30>)
 800649e:	9100      	str	r1, [sp, #0]
 80064a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064a4:	4906      	ldr	r1, [pc, #24]	; (80064c0 <__assert_func+0x34>)
 80064a6:	462b      	mov	r3, r5
 80064a8:	f001 f820 	bl	80074ec <fiprintf>
 80064ac:	f002 f85a 	bl	8008564 <abort>
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <__assert_func+0x38>)
 80064b2:	461c      	mov	r4, r3
 80064b4:	e7f3      	b.n	800649e <__assert_func+0x12>
 80064b6:	bf00      	nop
 80064b8:	200000f8 	.word	0x200000f8
 80064bc:	08009118 	.word	0x08009118
 80064c0:	08009125 	.word	0x08009125
 80064c4:	08008ef9 	.word	0x08008ef9

080064c8 <quorem>:
 80064c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	6903      	ldr	r3, [r0, #16]
 80064ce:	690c      	ldr	r4, [r1, #16]
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	4607      	mov	r7, r0
 80064d4:	f2c0 8081 	blt.w	80065da <quorem+0x112>
 80064d8:	3c01      	subs	r4, #1
 80064da:	f101 0814 	add.w	r8, r1, #20
 80064de:	f100 0514 	add.w	r5, r0, #20
 80064e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064f0:	3301      	adds	r3, #1
 80064f2:	429a      	cmp	r2, r3
 80064f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006500:	d331      	bcc.n	8006566 <quorem+0x9e>
 8006502:	f04f 0e00 	mov.w	lr, #0
 8006506:	4640      	mov	r0, r8
 8006508:	46ac      	mov	ip, r5
 800650a:	46f2      	mov	sl, lr
 800650c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006510:	b293      	uxth	r3, r2
 8006512:	fb06 e303 	mla	r3, r6, r3, lr
 8006516:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800651a:	b29b      	uxth	r3, r3
 800651c:	ebaa 0303 	sub.w	r3, sl, r3
 8006520:	f8dc a000 	ldr.w	sl, [ip]
 8006524:	0c12      	lsrs	r2, r2, #16
 8006526:	fa13 f38a 	uxtah	r3, r3, sl
 800652a:	fb06 e202 	mla	r2, r6, r2, lr
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	9b00      	ldr	r3, [sp, #0]
 8006532:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006536:	b292      	uxth	r2, r2
 8006538:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800653c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006540:	f8bd 3000 	ldrh.w	r3, [sp]
 8006544:	4581      	cmp	r9, r0
 8006546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654a:	f84c 3b04 	str.w	r3, [ip], #4
 800654e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006552:	d2db      	bcs.n	800650c <quorem+0x44>
 8006554:	f855 300b 	ldr.w	r3, [r5, fp]
 8006558:	b92b      	cbnz	r3, 8006566 <quorem+0x9e>
 800655a:	9b01      	ldr	r3, [sp, #4]
 800655c:	3b04      	subs	r3, #4
 800655e:	429d      	cmp	r5, r3
 8006560:	461a      	mov	r2, r3
 8006562:	d32e      	bcc.n	80065c2 <quorem+0xfa>
 8006564:	613c      	str	r4, [r7, #16]
 8006566:	4638      	mov	r0, r7
 8006568:	f001 fae8 	bl	8007b3c <__mcmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	db24      	blt.n	80065ba <quorem+0xf2>
 8006570:	3601      	adds	r6, #1
 8006572:	4628      	mov	r0, r5
 8006574:	f04f 0c00 	mov.w	ip, #0
 8006578:	f858 2b04 	ldr.w	r2, [r8], #4
 800657c:	f8d0 e000 	ldr.w	lr, [r0]
 8006580:	b293      	uxth	r3, r2
 8006582:	ebac 0303 	sub.w	r3, ip, r3
 8006586:	0c12      	lsrs	r2, r2, #16
 8006588:	fa13 f38e 	uxtah	r3, r3, lr
 800658c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800659a:	45c1      	cmp	r9, r8
 800659c:	f840 3b04 	str.w	r3, [r0], #4
 80065a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065a4:	d2e8      	bcs.n	8006578 <quorem+0xb0>
 80065a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065ae:	b922      	cbnz	r2, 80065ba <quorem+0xf2>
 80065b0:	3b04      	subs	r3, #4
 80065b2:	429d      	cmp	r5, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	d30a      	bcc.n	80065ce <quorem+0x106>
 80065b8:	613c      	str	r4, [r7, #16]
 80065ba:	4630      	mov	r0, r6
 80065bc:	b003      	add	sp, #12
 80065be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d1cc      	bne.n	8006564 <quorem+0x9c>
 80065ca:	3c01      	subs	r4, #1
 80065cc:	e7c7      	b.n	800655e <quorem+0x96>
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	d1f0      	bne.n	80065b8 <quorem+0xf0>
 80065d6:	3c01      	subs	r4, #1
 80065d8:	e7eb      	b.n	80065b2 <quorem+0xea>
 80065da:	2000      	movs	r0, #0
 80065dc:	e7ee      	b.n	80065bc <quorem+0xf4>
	...

080065e0 <_dtoa_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	ed2d 8b04 	vpush	{d8-d9}
 80065e8:	ec57 6b10 	vmov	r6, r7, d0
 80065ec:	b093      	sub	sp, #76	; 0x4c
 80065ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065f4:	9106      	str	r1, [sp, #24]
 80065f6:	ee10 aa10 	vmov	sl, s0
 80065fa:	4604      	mov	r4, r0
 80065fc:	9209      	str	r2, [sp, #36]	; 0x24
 80065fe:	930c      	str	r3, [sp, #48]	; 0x30
 8006600:	46bb      	mov	fp, r7
 8006602:	b975      	cbnz	r5, 8006622 <_dtoa_r+0x42>
 8006604:	2010      	movs	r0, #16
 8006606:	f001 f80f 	bl	8007628 <malloc>
 800660a:	4602      	mov	r2, r0
 800660c:	6260      	str	r0, [r4, #36]	; 0x24
 800660e:	b920      	cbnz	r0, 800661a <_dtoa_r+0x3a>
 8006610:	4ba7      	ldr	r3, [pc, #668]	; (80068b0 <_dtoa_r+0x2d0>)
 8006612:	21ea      	movs	r1, #234	; 0xea
 8006614:	48a7      	ldr	r0, [pc, #668]	; (80068b4 <_dtoa_r+0x2d4>)
 8006616:	f7ff ff39 	bl	800648c <__assert_func>
 800661a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800661e:	6005      	str	r5, [r0, #0]
 8006620:	60c5      	str	r5, [r0, #12]
 8006622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006624:	6819      	ldr	r1, [r3, #0]
 8006626:	b151      	cbz	r1, 800663e <_dtoa_r+0x5e>
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	604a      	str	r2, [r1, #4]
 800662c:	2301      	movs	r3, #1
 800662e:	4093      	lsls	r3, r2
 8006630:	608b      	str	r3, [r1, #8]
 8006632:	4620      	mov	r0, r4
 8006634:	f001 f840 	bl	80076b8 <_Bfree>
 8006638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	1e3b      	subs	r3, r7, #0
 8006640:	bfaa      	itet	ge
 8006642:	2300      	movge	r3, #0
 8006644:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006648:	f8c8 3000 	strge.w	r3, [r8]
 800664c:	4b9a      	ldr	r3, [pc, #616]	; (80068b8 <_dtoa_r+0x2d8>)
 800664e:	bfbc      	itt	lt
 8006650:	2201      	movlt	r2, #1
 8006652:	f8c8 2000 	strlt.w	r2, [r8]
 8006656:	ea33 030b 	bics.w	r3, r3, fp
 800665a:	d11b      	bne.n	8006694 <_dtoa_r+0xb4>
 800665c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800665e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006668:	4333      	orrs	r3, r6
 800666a:	f000 8592 	beq.w	8007192 <_dtoa_r+0xbb2>
 800666e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006670:	b963      	cbnz	r3, 800668c <_dtoa_r+0xac>
 8006672:	4b92      	ldr	r3, [pc, #584]	; (80068bc <_dtoa_r+0x2dc>)
 8006674:	e022      	b.n	80066bc <_dtoa_r+0xdc>
 8006676:	4b92      	ldr	r3, [pc, #584]	; (80068c0 <_dtoa_r+0x2e0>)
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	3308      	adds	r3, #8
 800667c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	9801      	ldr	r0, [sp, #4]
 8006682:	b013      	add	sp, #76	; 0x4c
 8006684:	ecbd 8b04 	vpop	{d8-d9}
 8006688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668c:	4b8b      	ldr	r3, [pc, #556]	; (80068bc <_dtoa_r+0x2dc>)
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	3303      	adds	r3, #3
 8006692:	e7f3      	b.n	800667c <_dtoa_r+0x9c>
 8006694:	2200      	movs	r2, #0
 8006696:	2300      	movs	r3, #0
 8006698:	4650      	mov	r0, sl
 800669a:	4659      	mov	r1, fp
 800669c:	f7fa fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a0:	ec4b ab19 	vmov	d9, sl, fp
 80066a4:	4680      	mov	r8, r0
 80066a6:	b158      	cbz	r0, 80066c0 <_dtoa_r+0xe0>
 80066a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066aa:	2301      	movs	r3, #1
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 856b 	beq.w	800718c <_dtoa_r+0xbac>
 80066b6:	4883      	ldr	r0, [pc, #524]	; (80068c4 <_dtoa_r+0x2e4>)
 80066b8:	6018      	str	r0, [r3, #0]
 80066ba:	1e43      	subs	r3, r0, #1
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	e7df      	b.n	8006680 <_dtoa_r+0xa0>
 80066c0:	ec4b ab10 	vmov	d0, sl, fp
 80066c4:	aa10      	add	r2, sp, #64	; 0x40
 80066c6:	a911      	add	r1, sp, #68	; 0x44
 80066c8:	4620      	mov	r0, r4
 80066ca:	f001 fadd 	bl	8007c88 <__d2b>
 80066ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80066d2:	ee08 0a10 	vmov	s16, r0
 80066d6:	2d00      	cmp	r5, #0
 80066d8:	f000 8084 	beq.w	80067e4 <_dtoa_r+0x204>
 80066dc:	ee19 3a90 	vmov	r3, s19
 80066e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80066e8:	4656      	mov	r6, sl
 80066ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80066ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80066f6:	4b74      	ldr	r3, [pc, #464]	; (80068c8 <_dtoa_r+0x2e8>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	4630      	mov	r0, r6
 80066fc:	4639      	mov	r1, r7
 80066fe:	f7f9 fdc3 	bl	8000288 <__aeabi_dsub>
 8006702:	a365      	add	r3, pc, #404	; (adr r3, 8006898 <_dtoa_r+0x2b8>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7f9 ff76 	bl	80005f8 <__aeabi_dmul>
 800670c:	a364      	add	r3, pc, #400	; (adr r3, 80068a0 <_dtoa_r+0x2c0>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f7f9 fdbb 	bl	800028c <__adddf3>
 8006716:	4606      	mov	r6, r0
 8006718:	4628      	mov	r0, r5
 800671a:	460f      	mov	r7, r1
 800671c:	f7f9 ff02 	bl	8000524 <__aeabi_i2d>
 8006720:	a361      	add	r3, pc, #388	; (adr r3, 80068a8 <_dtoa_r+0x2c8>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	f7f9 ff67 	bl	80005f8 <__aeabi_dmul>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4630      	mov	r0, r6
 8006730:	4639      	mov	r1, r7
 8006732:	f7f9 fdab 	bl	800028c <__adddf3>
 8006736:	4606      	mov	r6, r0
 8006738:	460f      	mov	r7, r1
 800673a:	f7fa fa0d 	bl	8000b58 <__aeabi_d2iz>
 800673e:	2200      	movs	r2, #0
 8006740:	9000      	str	r0, [sp, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	4630      	mov	r0, r6
 8006746:	4639      	mov	r1, r7
 8006748:	f7fa f9c8 	bl	8000adc <__aeabi_dcmplt>
 800674c:	b150      	cbz	r0, 8006764 <_dtoa_r+0x184>
 800674e:	9800      	ldr	r0, [sp, #0]
 8006750:	f7f9 fee8 	bl	8000524 <__aeabi_i2d>
 8006754:	4632      	mov	r2, r6
 8006756:	463b      	mov	r3, r7
 8006758:	f7fa f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800675c:	b910      	cbnz	r0, 8006764 <_dtoa_r+0x184>
 800675e:	9b00      	ldr	r3, [sp, #0]
 8006760:	3b01      	subs	r3, #1
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	9b00      	ldr	r3, [sp, #0]
 8006766:	2b16      	cmp	r3, #22
 8006768:	d85a      	bhi.n	8006820 <_dtoa_r+0x240>
 800676a:	9a00      	ldr	r2, [sp, #0]
 800676c:	4b57      	ldr	r3, [pc, #348]	; (80068cc <_dtoa_r+0x2ec>)
 800676e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	ec51 0b19 	vmov	r0, r1, d9
 800677a:	f7fa f9af 	bl	8000adc <__aeabi_dcmplt>
 800677e:	2800      	cmp	r0, #0
 8006780:	d050      	beq.n	8006824 <_dtoa_r+0x244>
 8006782:	9b00      	ldr	r3, [sp, #0]
 8006784:	3b01      	subs	r3, #1
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	2300      	movs	r3, #0
 800678a:	930b      	str	r3, [sp, #44]	; 0x2c
 800678c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800678e:	1b5d      	subs	r5, r3, r5
 8006790:	1e6b      	subs	r3, r5, #1
 8006792:	9305      	str	r3, [sp, #20]
 8006794:	bf45      	ittet	mi
 8006796:	f1c5 0301 	rsbmi	r3, r5, #1
 800679a:	9304      	strmi	r3, [sp, #16]
 800679c:	2300      	movpl	r3, #0
 800679e:	2300      	movmi	r3, #0
 80067a0:	bf4c      	ite	mi
 80067a2:	9305      	strmi	r3, [sp, #20]
 80067a4:	9304      	strpl	r3, [sp, #16]
 80067a6:	9b00      	ldr	r3, [sp, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	db3d      	blt.n	8006828 <_dtoa_r+0x248>
 80067ac:	9b05      	ldr	r3, [sp, #20]
 80067ae:	9a00      	ldr	r2, [sp, #0]
 80067b0:	920a      	str	r2, [sp, #40]	; 0x28
 80067b2:	4413      	add	r3, r2
 80067b4:	9305      	str	r3, [sp, #20]
 80067b6:	2300      	movs	r3, #0
 80067b8:	9307      	str	r3, [sp, #28]
 80067ba:	9b06      	ldr	r3, [sp, #24]
 80067bc:	2b09      	cmp	r3, #9
 80067be:	f200 8089 	bhi.w	80068d4 <_dtoa_r+0x2f4>
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	bfc4      	itt	gt
 80067c6:	3b04      	subgt	r3, #4
 80067c8:	9306      	strgt	r3, [sp, #24]
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	f1a3 0302 	sub.w	r3, r3, #2
 80067d0:	bfcc      	ite	gt
 80067d2:	2500      	movgt	r5, #0
 80067d4:	2501      	movle	r5, #1
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	f200 8087 	bhi.w	80068ea <_dtoa_r+0x30a>
 80067dc:	e8df f003 	tbb	[pc, r3]
 80067e0:	59383a2d 	.word	0x59383a2d
 80067e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80067e8:	441d      	add	r5, r3
 80067ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	bfc1      	itttt	gt
 80067f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80067fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006802:	bfda      	itte	le
 8006804:	f1c3 0320 	rsble	r3, r3, #32
 8006808:	fa06 f003 	lslle.w	r0, r6, r3
 800680c:	4318      	orrgt	r0, r3
 800680e:	f7f9 fe79 	bl	8000504 <__aeabi_ui2d>
 8006812:	2301      	movs	r3, #1
 8006814:	4606      	mov	r6, r0
 8006816:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800681a:	3d01      	subs	r5, #1
 800681c:	930e      	str	r3, [sp, #56]	; 0x38
 800681e:	e76a      	b.n	80066f6 <_dtoa_r+0x116>
 8006820:	2301      	movs	r3, #1
 8006822:	e7b2      	b.n	800678a <_dtoa_r+0x1aa>
 8006824:	900b      	str	r0, [sp, #44]	; 0x2c
 8006826:	e7b1      	b.n	800678c <_dtoa_r+0x1ac>
 8006828:	9b04      	ldr	r3, [sp, #16]
 800682a:	9a00      	ldr	r2, [sp, #0]
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	9304      	str	r3, [sp, #16]
 8006830:	4253      	negs	r3, r2
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	2300      	movs	r3, #0
 8006836:	930a      	str	r3, [sp, #40]	; 0x28
 8006838:	e7bf      	b.n	80067ba <_dtoa_r+0x1da>
 800683a:	2300      	movs	r3, #0
 800683c:	9308      	str	r3, [sp, #32]
 800683e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc55      	bgt.n	80068f0 <_dtoa_r+0x310>
 8006844:	2301      	movs	r3, #1
 8006846:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800684a:	461a      	mov	r2, r3
 800684c:	9209      	str	r2, [sp, #36]	; 0x24
 800684e:	e00c      	b.n	800686a <_dtoa_r+0x28a>
 8006850:	2301      	movs	r3, #1
 8006852:	e7f3      	b.n	800683c <_dtoa_r+0x25c>
 8006854:	2300      	movs	r3, #0
 8006856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006858:	9308      	str	r3, [sp, #32]
 800685a:	9b00      	ldr	r3, [sp, #0]
 800685c:	4413      	add	r3, r2
 800685e:	9302      	str	r3, [sp, #8]
 8006860:	3301      	adds	r3, #1
 8006862:	2b01      	cmp	r3, #1
 8006864:	9303      	str	r3, [sp, #12]
 8006866:	bfb8      	it	lt
 8006868:	2301      	movlt	r3, #1
 800686a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800686c:	2200      	movs	r2, #0
 800686e:	6042      	str	r2, [r0, #4]
 8006870:	2204      	movs	r2, #4
 8006872:	f102 0614 	add.w	r6, r2, #20
 8006876:	429e      	cmp	r6, r3
 8006878:	6841      	ldr	r1, [r0, #4]
 800687a:	d93d      	bls.n	80068f8 <_dtoa_r+0x318>
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fedb 	bl	8007638 <_Balloc>
 8006882:	9001      	str	r0, [sp, #4]
 8006884:	2800      	cmp	r0, #0
 8006886:	d13b      	bne.n	8006900 <_dtoa_r+0x320>
 8006888:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <_dtoa_r+0x2f0>)
 800688a:	4602      	mov	r2, r0
 800688c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006890:	e6c0      	b.n	8006614 <_dtoa_r+0x34>
 8006892:	2301      	movs	r3, #1
 8006894:	e7df      	b.n	8006856 <_dtoa_r+0x276>
 8006896:	bf00      	nop
 8006898:	636f4361 	.word	0x636f4361
 800689c:	3fd287a7 	.word	0x3fd287a7
 80068a0:	8b60c8b3 	.word	0x8b60c8b3
 80068a4:	3fc68a28 	.word	0x3fc68a28
 80068a8:	509f79fb 	.word	0x509f79fb
 80068ac:	3fd34413 	.word	0x3fd34413
 80068b0:	080090a4 	.word	0x080090a4
 80068b4:	08009161 	.word	0x08009161
 80068b8:	7ff00000 	.word	0x7ff00000
 80068bc:	0800915d 	.word	0x0800915d
 80068c0:	08009154 	.word	0x08009154
 80068c4:	08009081 	.word	0x08009081
 80068c8:	3ff80000 	.word	0x3ff80000
 80068cc:	080092b8 	.word	0x080092b8
 80068d0:	080091bc 	.word	0x080091bc
 80068d4:	2501      	movs	r5, #1
 80068d6:	2300      	movs	r3, #0
 80068d8:	9306      	str	r3, [sp, #24]
 80068da:	9508      	str	r5, [sp, #32]
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068e4:	2200      	movs	r2, #0
 80068e6:	2312      	movs	r3, #18
 80068e8:	e7b0      	b.n	800684c <_dtoa_r+0x26c>
 80068ea:	2301      	movs	r3, #1
 80068ec:	9308      	str	r3, [sp, #32]
 80068ee:	e7f5      	b.n	80068dc <_dtoa_r+0x2fc>
 80068f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068f6:	e7b8      	b.n	800686a <_dtoa_r+0x28a>
 80068f8:	3101      	adds	r1, #1
 80068fa:	6041      	str	r1, [r0, #4]
 80068fc:	0052      	lsls	r2, r2, #1
 80068fe:	e7b8      	b.n	8006872 <_dtoa_r+0x292>
 8006900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006902:	9a01      	ldr	r2, [sp, #4]
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	2b0e      	cmp	r3, #14
 800690a:	f200 809d 	bhi.w	8006a48 <_dtoa_r+0x468>
 800690e:	2d00      	cmp	r5, #0
 8006910:	f000 809a 	beq.w	8006a48 <_dtoa_r+0x468>
 8006914:	9b00      	ldr	r3, [sp, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	dd32      	ble.n	8006980 <_dtoa_r+0x3a0>
 800691a:	4ab7      	ldr	r2, [pc, #732]	; (8006bf8 <_dtoa_r+0x618>)
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006924:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006928:	9b00      	ldr	r3, [sp, #0]
 800692a:	05d8      	lsls	r0, r3, #23
 800692c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006930:	d516      	bpl.n	8006960 <_dtoa_r+0x380>
 8006932:	4bb2      	ldr	r3, [pc, #712]	; (8006bfc <_dtoa_r+0x61c>)
 8006934:	ec51 0b19 	vmov	r0, r1, d9
 8006938:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800693c:	f7f9 ff86 	bl	800084c <__aeabi_ddiv>
 8006940:	f007 070f 	and.w	r7, r7, #15
 8006944:	4682      	mov	sl, r0
 8006946:	468b      	mov	fp, r1
 8006948:	2503      	movs	r5, #3
 800694a:	4eac      	ldr	r6, [pc, #688]	; (8006bfc <_dtoa_r+0x61c>)
 800694c:	b957      	cbnz	r7, 8006964 <_dtoa_r+0x384>
 800694e:	4642      	mov	r2, r8
 8006950:	464b      	mov	r3, r9
 8006952:	4650      	mov	r0, sl
 8006954:	4659      	mov	r1, fp
 8006956:	f7f9 ff79 	bl	800084c <__aeabi_ddiv>
 800695a:	4682      	mov	sl, r0
 800695c:	468b      	mov	fp, r1
 800695e:	e028      	b.n	80069b2 <_dtoa_r+0x3d2>
 8006960:	2502      	movs	r5, #2
 8006962:	e7f2      	b.n	800694a <_dtoa_r+0x36a>
 8006964:	07f9      	lsls	r1, r7, #31
 8006966:	d508      	bpl.n	800697a <_dtoa_r+0x39a>
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006970:	f7f9 fe42 	bl	80005f8 <__aeabi_dmul>
 8006974:	3501      	adds	r5, #1
 8006976:	4680      	mov	r8, r0
 8006978:	4689      	mov	r9, r1
 800697a:	107f      	asrs	r7, r7, #1
 800697c:	3608      	adds	r6, #8
 800697e:	e7e5      	b.n	800694c <_dtoa_r+0x36c>
 8006980:	f000 809b 	beq.w	8006aba <_dtoa_r+0x4da>
 8006984:	9b00      	ldr	r3, [sp, #0]
 8006986:	4f9d      	ldr	r7, [pc, #628]	; (8006bfc <_dtoa_r+0x61c>)
 8006988:	425e      	negs	r6, r3
 800698a:	4b9b      	ldr	r3, [pc, #620]	; (8006bf8 <_dtoa_r+0x618>)
 800698c:	f006 020f 	and.w	r2, r6, #15
 8006990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	ec51 0b19 	vmov	r0, r1, d9
 800699c:	f7f9 fe2c 	bl	80005f8 <__aeabi_dmul>
 80069a0:	1136      	asrs	r6, r6, #4
 80069a2:	4682      	mov	sl, r0
 80069a4:	468b      	mov	fp, r1
 80069a6:	2300      	movs	r3, #0
 80069a8:	2502      	movs	r5, #2
 80069aa:	2e00      	cmp	r6, #0
 80069ac:	d17a      	bne.n	8006aa4 <_dtoa_r+0x4c4>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1d3      	bne.n	800695a <_dtoa_r+0x37a>
 80069b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8082 	beq.w	8006abe <_dtoa_r+0x4de>
 80069ba:	4b91      	ldr	r3, [pc, #580]	; (8006c00 <_dtoa_r+0x620>)
 80069bc:	2200      	movs	r2, #0
 80069be:	4650      	mov	r0, sl
 80069c0:	4659      	mov	r1, fp
 80069c2:	f7fa f88b 	bl	8000adc <__aeabi_dcmplt>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d079      	beq.n	8006abe <_dtoa_r+0x4de>
 80069ca:	9b03      	ldr	r3, [sp, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d076      	beq.n	8006abe <_dtoa_r+0x4de>
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dd36      	ble.n	8006a44 <_dtoa_r+0x464>
 80069d6:	9b00      	ldr	r3, [sp, #0]
 80069d8:	4650      	mov	r0, sl
 80069da:	4659      	mov	r1, fp
 80069dc:	1e5f      	subs	r7, r3, #1
 80069de:	2200      	movs	r2, #0
 80069e0:	4b88      	ldr	r3, [pc, #544]	; (8006c04 <_dtoa_r+0x624>)
 80069e2:	f7f9 fe09 	bl	80005f8 <__aeabi_dmul>
 80069e6:	9e02      	ldr	r6, [sp, #8]
 80069e8:	4682      	mov	sl, r0
 80069ea:	468b      	mov	fp, r1
 80069ec:	3501      	adds	r5, #1
 80069ee:	4628      	mov	r0, r5
 80069f0:	f7f9 fd98 	bl	8000524 <__aeabi_i2d>
 80069f4:	4652      	mov	r2, sl
 80069f6:	465b      	mov	r3, fp
 80069f8:	f7f9 fdfe 	bl	80005f8 <__aeabi_dmul>
 80069fc:	4b82      	ldr	r3, [pc, #520]	; (8006c08 <_dtoa_r+0x628>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	f7f9 fc44 	bl	800028c <__adddf3>
 8006a04:	46d0      	mov	r8, sl
 8006a06:	46d9      	mov	r9, fp
 8006a08:	4682      	mov	sl, r0
 8006a0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a0e:	2e00      	cmp	r6, #0
 8006a10:	d158      	bne.n	8006ac4 <_dtoa_r+0x4e4>
 8006a12:	4b7e      	ldr	r3, [pc, #504]	; (8006c0c <_dtoa_r+0x62c>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	4640      	mov	r0, r8
 8006a18:	4649      	mov	r1, r9
 8006a1a:	f7f9 fc35 	bl	8000288 <__aeabi_dsub>
 8006a1e:	4652      	mov	r2, sl
 8006a20:	465b      	mov	r3, fp
 8006a22:	4680      	mov	r8, r0
 8006a24:	4689      	mov	r9, r1
 8006a26:	f7fa f877 	bl	8000b18 <__aeabi_dcmpgt>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f040 8295 	bne.w	8006f5a <_dtoa_r+0x97a>
 8006a30:	4652      	mov	r2, sl
 8006a32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a36:	4640      	mov	r0, r8
 8006a38:	4649      	mov	r1, r9
 8006a3a:	f7fa f84f 	bl	8000adc <__aeabi_dcmplt>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f040 8289 	bne.w	8006f56 <_dtoa_r+0x976>
 8006a44:	ec5b ab19 	vmov	sl, fp, d9
 8006a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f2c0 8148 	blt.w	8006ce0 <_dtoa_r+0x700>
 8006a50:	9a00      	ldr	r2, [sp, #0]
 8006a52:	2a0e      	cmp	r2, #14
 8006a54:	f300 8144 	bgt.w	8006ce0 <_dtoa_r+0x700>
 8006a58:	4b67      	ldr	r3, [pc, #412]	; (8006bf8 <_dtoa_r+0x618>)
 8006a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f280 80d5 	bge.w	8006c14 <_dtoa_r+0x634>
 8006a6a:	9b03      	ldr	r3, [sp, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f300 80d1 	bgt.w	8006c14 <_dtoa_r+0x634>
 8006a72:	f040 826f 	bne.w	8006f54 <_dtoa_r+0x974>
 8006a76:	4b65      	ldr	r3, [pc, #404]	; (8006c0c <_dtoa_r+0x62c>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	f7f9 fdbb 	bl	80005f8 <__aeabi_dmul>
 8006a82:	4652      	mov	r2, sl
 8006a84:	465b      	mov	r3, fp
 8006a86:	f7fa f83d 	bl	8000b04 <__aeabi_dcmpge>
 8006a8a:	9e03      	ldr	r6, [sp, #12]
 8006a8c:	4637      	mov	r7, r6
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f040 8245 	bne.w	8006f1e <_dtoa_r+0x93e>
 8006a94:	9d01      	ldr	r5, [sp, #4]
 8006a96:	2331      	movs	r3, #49	; 0x31
 8006a98:	f805 3b01 	strb.w	r3, [r5], #1
 8006a9c:	9b00      	ldr	r3, [sp, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	e240      	b.n	8006f26 <_dtoa_r+0x946>
 8006aa4:	07f2      	lsls	r2, r6, #31
 8006aa6:	d505      	bpl.n	8006ab4 <_dtoa_r+0x4d4>
 8006aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aac:	f7f9 fda4 	bl	80005f8 <__aeabi_dmul>
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	1076      	asrs	r6, r6, #1
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	e777      	b.n	80069aa <_dtoa_r+0x3ca>
 8006aba:	2502      	movs	r5, #2
 8006abc:	e779      	b.n	80069b2 <_dtoa_r+0x3d2>
 8006abe:	9f00      	ldr	r7, [sp, #0]
 8006ac0:	9e03      	ldr	r6, [sp, #12]
 8006ac2:	e794      	b.n	80069ee <_dtoa_r+0x40e>
 8006ac4:	9901      	ldr	r1, [sp, #4]
 8006ac6:	4b4c      	ldr	r3, [pc, #304]	; (8006bf8 <_dtoa_r+0x618>)
 8006ac8:	4431      	add	r1, r6
 8006aca:	910d      	str	r1, [sp, #52]	; 0x34
 8006acc:	9908      	ldr	r1, [sp, #32]
 8006ace:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ad2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ad6:	2900      	cmp	r1, #0
 8006ad8:	d043      	beq.n	8006b62 <_dtoa_r+0x582>
 8006ada:	494d      	ldr	r1, [pc, #308]	; (8006c10 <_dtoa_r+0x630>)
 8006adc:	2000      	movs	r0, #0
 8006ade:	f7f9 feb5 	bl	800084c <__aeabi_ddiv>
 8006ae2:	4652      	mov	r2, sl
 8006ae4:	465b      	mov	r3, fp
 8006ae6:	f7f9 fbcf 	bl	8000288 <__aeabi_dsub>
 8006aea:	9d01      	ldr	r5, [sp, #4]
 8006aec:	4682      	mov	sl, r0
 8006aee:	468b      	mov	fp, r1
 8006af0:	4649      	mov	r1, r9
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7fa f830 	bl	8000b58 <__aeabi_d2iz>
 8006af8:	4606      	mov	r6, r0
 8006afa:	f7f9 fd13 	bl	8000524 <__aeabi_i2d>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	f7f9 fbbf 	bl	8000288 <__aeabi_dsub>
 8006b0a:	3630      	adds	r6, #48	; 0x30
 8006b0c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b10:	4652      	mov	r2, sl
 8006b12:	465b      	mov	r3, fp
 8006b14:	4680      	mov	r8, r0
 8006b16:	4689      	mov	r9, r1
 8006b18:	f7f9 ffe0 	bl	8000adc <__aeabi_dcmplt>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d163      	bne.n	8006be8 <_dtoa_r+0x608>
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	4936      	ldr	r1, [pc, #216]	; (8006c00 <_dtoa_r+0x620>)
 8006b26:	2000      	movs	r0, #0
 8006b28:	f7f9 fbae 	bl	8000288 <__aeabi_dsub>
 8006b2c:	4652      	mov	r2, sl
 8006b2e:	465b      	mov	r3, fp
 8006b30:	f7f9 ffd4 	bl	8000adc <__aeabi_dcmplt>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f040 80b5 	bne.w	8006ca4 <_dtoa_r+0x6c4>
 8006b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3c:	429d      	cmp	r5, r3
 8006b3e:	d081      	beq.n	8006a44 <_dtoa_r+0x464>
 8006b40:	4b30      	ldr	r3, [pc, #192]	; (8006c04 <_dtoa_r+0x624>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	4650      	mov	r0, sl
 8006b46:	4659      	mov	r1, fp
 8006b48:	f7f9 fd56 	bl	80005f8 <__aeabi_dmul>
 8006b4c:	4b2d      	ldr	r3, [pc, #180]	; (8006c04 <_dtoa_r+0x624>)
 8006b4e:	4682      	mov	sl, r0
 8006b50:	468b      	mov	fp, r1
 8006b52:	4640      	mov	r0, r8
 8006b54:	4649      	mov	r1, r9
 8006b56:	2200      	movs	r2, #0
 8006b58:	f7f9 fd4e 	bl	80005f8 <__aeabi_dmul>
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	4689      	mov	r9, r1
 8006b60:	e7c6      	b.n	8006af0 <_dtoa_r+0x510>
 8006b62:	4650      	mov	r0, sl
 8006b64:	4659      	mov	r1, fp
 8006b66:	f7f9 fd47 	bl	80005f8 <__aeabi_dmul>
 8006b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b6c:	9d01      	ldr	r5, [sp, #4]
 8006b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b70:	4682      	mov	sl, r0
 8006b72:	468b      	mov	fp, r1
 8006b74:	4649      	mov	r1, r9
 8006b76:	4640      	mov	r0, r8
 8006b78:	f7f9 ffee 	bl	8000b58 <__aeabi_d2iz>
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	f7f9 fcd1 	bl	8000524 <__aeabi_i2d>
 8006b82:	3630      	adds	r6, #48	; 0x30
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4640      	mov	r0, r8
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	f7f9 fb7c 	bl	8000288 <__aeabi_dsub>
 8006b90:	f805 6b01 	strb.w	r6, [r5], #1
 8006b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b96:	429d      	cmp	r5, r3
 8006b98:	4680      	mov	r8, r0
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	d124      	bne.n	8006bec <_dtoa_r+0x60c>
 8006ba2:	4b1b      	ldr	r3, [pc, #108]	; (8006c10 <_dtoa_r+0x630>)
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	f7f9 fb70 	bl	800028c <__adddf3>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	f7f9 ffb0 	bl	8000b18 <__aeabi_dcmpgt>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d173      	bne.n	8006ca4 <_dtoa_r+0x6c4>
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	465b      	mov	r3, fp
 8006bc0:	4913      	ldr	r1, [pc, #76]	; (8006c10 <_dtoa_r+0x630>)
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f7f9 fb60 	bl	8000288 <__aeabi_dsub>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4649      	mov	r1, r9
 8006bd0:	f7f9 ff84 	bl	8000adc <__aeabi_dcmplt>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f43f af35 	beq.w	8006a44 <_dtoa_r+0x464>
 8006bda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006bdc:	1e6b      	subs	r3, r5, #1
 8006bde:	930f      	str	r3, [sp, #60]	; 0x3c
 8006be0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006be4:	2b30      	cmp	r3, #48	; 0x30
 8006be6:	d0f8      	beq.n	8006bda <_dtoa_r+0x5fa>
 8006be8:	9700      	str	r7, [sp, #0]
 8006bea:	e049      	b.n	8006c80 <_dtoa_r+0x6a0>
 8006bec:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <_dtoa_r+0x624>)
 8006bee:	f7f9 fd03 	bl	80005f8 <__aeabi_dmul>
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	4689      	mov	r9, r1
 8006bf6:	e7bd      	b.n	8006b74 <_dtoa_r+0x594>
 8006bf8:	080092b8 	.word	0x080092b8
 8006bfc:	08009290 	.word	0x08009290
 8006c00:	3ff00000 	.word	0x3ff00000
 8006c04:	40240000 	.word	0x40240000
 8006c08:	401c0000 	.word	0x401c0000
 8006c0c:	40140000 	.word	0x40140000
 8006c10:	3fe00000 	.word	0x3fe00000
 8006c14:	9d01      	ldr	r5, [sp, #4]
 8006c16:	4656      	mov	r6, sl
 8006c18:	465f      	mov	r7, fp
 8006c1a:	4642      	mov	r2, r8
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	4630      	mov	r0, r6
 8006c20:	4639      	mov	r1, r7
 8006c22:	f7f9 fe13 	bl	800084c <__aeabi_ddiv>
 8006c26:	f7f9 ff97 	bl	8000b58 <__aeabi_d2iz>
 8006c2a:	4682      	mov	sl, r0
 8006c2c:	f7f9 fc7a 	bl	8000524 <__aeabi_i2d>
 8006c30:	4642      	mov	r2, r8
 8006c32:	464b      	mov	r3, r9
 8006c34:	f7f9 fce0 	bl	80005f8 <__aeabi_dmul>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	4639      	mov	r1, r7
 8006c40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006c44:	f7f9 fb20 	bl	8000288 <__aeabi_dsub>
 8006c48:	f805 6b01 	strb.w	r6, [r5], #1
 8006c4c:	9e01      	ldr	r6, [sp, #4]
 8006c4e:	9f03      	ldr	r7, [sp, #12]
 8006c50:	1bae      	subs	r6, r5, r6
 8006c52:	42b7      	cmp	r7, r6
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	d135      	bne.n	8006cc6 <_dtoa_r+0x6e6>
 8006c5a:	f7f9 fb17 	bl	800028c <__adddf3>
 8006c5e:	4642      	mov	r2, r8
 8006c60:	464b      	mov	r3, r9
 8006c62:	4606      	mov	r6, r0
 8006c64:	460f      	mov	r7, r1
 8006c66:	f7f9 ff57 	bl	8000b18 <__aeabi_dcmpgt>
 8006c6a:	b9d0      	cbnz	r0, 8006ca2 <_dtoa_r+0x6c2>
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	4630      	mov	r0, r6
 8006c72:	4639      	mov	r1, r7
 8006c74:	f7f9 ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c78:	b110      	cbz	r0, 8006c80 <_dtoa_r+0x6a0>
 8006c7a:	f01a 0f01 	tst.w	sl, #1
 8006c7e:	d110      	bne.n	8006ca2 <_dtoa_r+0x6c2>
 8006c80:	4620      	mov	r0, r4
 8006c82:	ee18 1a10 	vmov	r1, s16
 8006c86:	f000 fd17 	bl	80076b8 <_Bfree>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9800      	ldr	r0, [sp, #0]
 8006c8e:	702b      	strb	r3, [r5, #0]
 8006c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c92:	3001      	adds	r0, #1
 8006c94:	6018      	str	r0, [r3, #0]
 8006c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f43f acf1 	beq.w	8006680 <_dtoa_r+0xa0>
 8006c9e:	601d      	str	r5, [r3, #0]
 8006ca0:	e4ee      	b.n	8006680 <_dtoa_r+0xa0>
 8006ca2:	9f00      	ldr	r7, [sp, #0]
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	461d      	mov	r5, r3
 8006ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cac:	2a39      	cmp	r2, #57	; 0x39
 8006cae:	d106      	bne.n	8006cbe <_dtoa_r+0x6de>
 8006cb0:	9a01      	ldr	r2, [sp, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d1f7      	bne.n	8006ca6 <_dtoa_r+0x6c6>
 8006cb6:	9901      	ldr	r1, [sp, #4]
 8006cb8:	2230      	movs	r2, #48	; 0x30
 8006cba:	3701      	adds	r7, #1
 8006cbc:	700a      	strb	r2, [r1, #0]
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	3201      	adds	r2, #1
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e790      	b.n	8006be8 <_dtoa_r+0x608>
 8006cc6:	4ba6      	ldr	r3, [pc, #664]	; (8006f60 <_dtoa_r+0x980>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f7f9 fc95 	bl	80005f8 <__aeabi_dmul>
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	f7f9 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d09d      	beq.n	8006c1a <_dtoa_r+0x63a>
 8006cde:	e7cf      	b.n	8006c80 <_dtoa_r+0x6a0>
 8006ce0:	9a08      	ldr	r2, [sp, #32]
 8006ce2:	2a00      	cmp	r2, #0
 8006ce4:	f000 80d7 	beq.w	8006e96 <_dtoa_r+0x8b6>
 8006ce8:	9a06      	ldr	r2, [sp, #24]
 8006cea:	2a01      	cmp	r2, #1
 8006cec:	f300 80ba 	bgt.w	8006e64 <_dtoa_r+0x884>
 8006cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	f000 80b2 	beq.w	8006e5c <_dtoa_r+0x87c>
 8006cf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cfc:	9e07      	ldr	r6, [sp, #28]
 8006cfe:	9d04      	ldr	r5, [sp, #16]
 8006d00:	9a04      	ldr	r2, [sp, #16]
 8006d02:	441a      	add	r2, r3
 8006d04:	9204      	str	r2, [sp, #16]
 8006d06:	9a05      	ldr	r2, [sp, #20]
 8006d08:	2101      	movs	r1, #1
 8006d0a:	441a      	add	r2, r3
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	9205      	str	r2, [sp, #20]
 8006d10:	f000 fd8a 	bl	8007828 <__i2b>
 8006d14:	4607      	mov	r7, r0
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	dd0c      	ble.n	8006d34 <_dtoa_r+0x754>
 8006d1a:	9b05      	ldr	r3, [sp, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dd09      	ble.n	8006d34 <_dtoa_r+0x754>
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	9a04      	ldr	r2, [sp, #16]
 8006d24:	bfa8      	it	ge
 8006d26:	462b      	movge	r3, r5
 8006d28:	1ad2      	subs	r2, r2, r3
 8006d2a:	9204      	str	r2, [sp, #16]
 8006d2c:	9a05      	ldr	r2, [sp, #20]
 8006d2e:	1aed      	subs	r5, r5, r3
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	9b07      	ldr	r3, [sp, #28]
 8006d36:	b31b      	cbz	r3, 8006d80 <_dtoa_r+0x7a0>
 8006d38:	9b08      	ldr	r3, [sp, #32]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80af 	beq.w	8006e9e <_dtoa_r+0x8be>
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	dd13      	ble.n	8006d6c <_dtoa_r+0x78c>
 8006d44:	4639      	mov	r1, r7
 8006d46:	4632      	mov	r2, r6
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fe2d 	bl	80079a8 <__pow5mult>
 8006d4e:	ee18 2a10 	vmov	r2, s16
 8006d52:	4601      	mov	r1, r0
 8006d54:	4607      	mov	r7, r0
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 fd7c 	bl	8007854 <__multiply>
 8006d5c:	ee18 1a10 	vmov	r1, s16
 8006d60:	4680      	mov	r8, r0
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 fca8 	bl	80076b8 <_Bfree>
 8006d68:	ee08 8a10 	vmov	s16, r8
 8006d6c:	9b07      	ldr	r3, [sp, #28]
 8006d6e:	1b9a      	subs	r2, r3, r6
 8006d70:	d006      	beq.n	8006d80 <_dtoa_r+0x7a0>
 8006d72:	ee18 1a10 	vmov	r1, s16
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 fe16 	bl	80079a8 <__pow5mult>
 8006d7c:	ee08 0a10 	vmov	s16, r0
 8006d80:	2101      	movs	r1, #1
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 fd50 	bl	8007828 <__i2b>
 8006d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	f340 8088 	ble.w	8006ea2 <_dtoa_r+0x8c2>
 8006d92:	461a      	mov	r2, r3
 8006d94:	4601      	mov	r1, r0
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 fe06 	bl	80079a8 <__pow5mult>
 8006d9c:	9b06      	ldr	r3, [sp, #24]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	4606      	mov	r6, r0
 8006da2:	f340 8081 	ble.w	8006ea8 <_dtoa_r+0x8c8>
 8006da6:	f04f 0800 	mov.w	r8, #0
 8006daa:	6933      	ldr	r3, [r6, #16]
 8006dac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006db0:	6918      	ldr	r0, [r3, #16]
 8006db2:	f000 fce9 	bl	8007788 <__hi0bits>
 8006db6:	f1c0 0020 	rsb	r0, r0, #32
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	4418      	add	r0, r3
 8006dbe:	f010 001f 	ands.w	r0, r0, #31
 8006dc2:	f000 8092 	beq.w	8006eea <_dtoa_r+0x90a>
 8006dc6:	f1c0 0320 	rsb	r3, r0, #32
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	f340 808a 	ble.w	8006ee4 <_dtoa_r+0x904>
 8006dd0:	f1c0 001c 	rsb	r0, r0, #28
 8006dd4:	9b04      	ldr	r3, [sp, #16]
 8006dd6:	4403      	add	r3, r0
 8006dd8:	9304      	str	r3, [sp, #16]
 8006dda:	9b05      	ldr	r3, [sp, #20]
 8006ddc:	4403      	add	r3, r0
 8006dde:	4405      	add	r5, r0
 8006de0:	9305      	str	r3, [sp, #20]
 8006de2:	9b04      	ldr	r3, [sp, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dd07      	ble.n	8006df8 <_dtoa_r+0x818>
 8006de8:	ee18 1a10 	vmov	r1, s16
 8006dec:	461a      	mov	r2, r3
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fe34 	bl	8007a5c <__lshift>
 8006df4:	ee08 0a10 	vmov	s16, r0
 8006df8:	9b05      	ldr	r3, [sp, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	dd05      	ble.n	8006e0a <_dtoa_r+0x82a>
 8006dfe:	4631      	mov	r1, r6
 8006e00:	461a      	mov	r2, r3
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 fe2a 	bl	8007a5c <__lshift>
 8006e08:	4606      	mov	r6, r0
 8006e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d06e      	beq.n	8006eee <_dtoa_r+0x90e>
 8006e10:	ee18 0a10 	vmov	r0, s16
 8006e14:	4631      	mov	r1, r6
 8006e16:	f000 fe91 	bl	8007b3c <__mcmp>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	da67      	bge.n	8006eee <_dtoa_r+0x90e>
 8006e1e:	9b00      	ldr	r3, [sp, #0]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	ee18 1a10 	vmov	r1, s16
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	220a      	movs	r2, #10
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 fc65 	bl	80076fc <__multadd>
 8006e32:	9b08      	ldr	r3, [sp, #32]
 8006e34:	ee08 0a10 	vmov	s16, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 81b1 	beq.w	80071a0 <_dtoa_r+0xbc0>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4639      	mov	r1, r7
 8006e42:	220a      	movs	r2, #10
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fc59 	bl	80076fc <__multadd>
 8006e4a:	9b02      	ldr	r3, [sp, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	4607      	mov	r7, r0
 8006e50:	f300 808e 	bgt.w	8006f70 <_dtoa_r+0x990>
 8006e54:	9b06      	ldr	r3, [sp, #24]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	dc51      	bgt.n	8006efe <_dtoa_r+0x91e>
 8006e5a:	e089      	b.n	8006f70 <_dtoa_r+0x990>
 8006e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e62:	e74b      	b.n	8006cfc <_dtoa_r+0x71c>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	1e5e      	subs	r6, r3, #1
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	42b3      	cmp	r3, r6
 8006e6c:	bfbf      	itttt	lt
 8006e6e:	9b07      	ldrlt	r3, [sp, #28]
 8006e70:	9607      	strlt	r6, [sp, #28]
 8006e72:	1af2      	sublt	r2, r6, r3
 8006e74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e76:	bfb6      	itet	lt
 8006e78:	189b      	addlt	r3, r3, r2
 8006e7a:	1b9e      	subge	r6, r3, r6
 8006e7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e7e:	9b03      	ldr	r3, [sp, #12]
 8006e80:	bfb8      	it	lt
 8006e82:	2600      	movlt	r6, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bfb7      	itett	lt
 8006e88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e90:	1a9d      	sublt	r5, r3, r2
 8006e92:	2300      	movlt	r3, #0
 8006e94:	e734      	b.n	8006d00 <_dtoa_r+0x720>
 8006e96:	9e07      	ldr	r6, [sp, #28]
 8006e98:	9d04      	ldr	r5, [sp, #16]
 8006e9a:	9f08      	ldr	r7, [sp, #32]
 8006e9c:	e73b      	b.n	8006d16 <_dtoa_r+0x736>
 8006e9e:	9a07      	ldr	r2, [sp, #28]
 8006ea0:	e767      	b.n	8006d72 <_dtoa_r+0x792>
 8006ea2:	9b06      	ldr	r3, [sp, #24]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	dc18      	bgt.n	8006eda <_dtoa_r+0x8fa>
 8006ea8:	f1ba 0f00 	cmp.w	sl, #0
 8006eac:	d115      	bne.n	8006eda <_dtoa_r+0x8fa>
 8006eae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006eb2:	b993      	cbnz	r3, 8006eda <_dtoa_r+0x8fa>
 8006eb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006eb8:	0d1b      	lsrs	r3, r3, #20
 8006eba:	051b      	lsls	r3, r3, #20
 8006ebc:	b183      	cbz	r3, 8006ee0 <_dtoa_r+0x900>
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	9b05      	ldr	r3, [sp, #20]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	9305      	str	r3, [sp, #20]
 8006eca:	f04f 0801 	mov.w	r8, #1
 8006ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f47f af6a 	bne.w	8006daa <_dtoa_r+0x7ca>
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	e76f      	b.n	8006dba <_dtoa_r+0x7da>
 8006eda:	f04f 0800 	mov.w	r8, #0
 8006ede:	e7f6      	b.n	8006ece <_dtoa_r+0x8ee>
 8006ee0:	4698      	mov	r8, r3
 8006ee2:	e7f4      	b.n	8006ece <_dtoa_r+0x8ee>
 8006ee4:	f43f af7d 	beq.w	8006de2 <_dtoa_r+0x802>
 8006ee8:	4618      	mov	r0, r3
 8006eea:	301c      	adds	r0, #28
 8006eec:	e772      	b.n	8006dd4 <_dtoa_r+0x7f4>
 8006eee:	9b03      	ldr	r3, [sp, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	dc37      	bgt.n	8006f64 <_dtoa_r+0x984>
 8006ef4:	9b06      	ldr	r3, [sp, #24]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	dd34      	ble.n	8006f64 <_dtoa_r+0x984>
 8006efa:	9b03      	ldr	r3, [sp, #12]
 8006efc:	9302      	str	r3, [sp, #8]
 8006efe:	9b02      	ldr	r3, [sp, #8]
 8006f00:	b96b      	cbnz	r3, 8006f1e <_dtoa_r+0x93e>
 8006f02:	4631      	mov	r1, r6
 8006f04:	2205      	movs	r2, #5
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 fbf8 	bl	80076fc <__multadd>
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	4606      	mov	r6, r0
 8006f10:	ee18 0a10 	vmov	r0, s16
 8006f14:	f000 fe12 	bl	8007b3c <__mcmp>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f73f adbb 	bgt.w	8006a94 <_dtoa_r+0x4b4>
 8006f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f20:	9d01      	ldr	r5, [sp, #4]
 8006f22:	43db      	mvns	r3, r3
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 fbc3 	bl	80076b8 <_Bfree>
 8006f32:	2f00      	cmp	r7, #0
 8006f34:	f43f aea4 	beq.w	8006c80 <_dtoa_r+0x6a0>
 8006f38:	f1b8 0f00 	cmp.w	r8, #0
 8006f3c:	d005      	beq.n	8006f4a <_dtoa_r+0x96a>
 8006f3e:	45b8      	cmp	r8, r7
 8006f40:	d003      	beq.n	8006f4a <_dtoa_r+0x96a>
 8006f42:	4641      	mov	r1, r8
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 fbb7 	bl	80076b8 <_Bfree>
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 fbb3 	bl	80076b8 <_Bfree>
 8006f52:	e695      	b.n	8006c80 <_dtoa_r+0x6a0>
 8006f54:	2600      	movs	r6, #0
 8006f56:	4637      	mov	r7, r6
 8006f58:	e7e1      	b.n	8006f1e <_dtoa_r+0x93e>
 8006f5a:	9700      	str	r7, [sp, #0]
 8006f5c:	4637      	mov	r7, r6
 8006f5e:	e599      	b.n	8006a94 <_dtoa_r+0x4b4>
 8006f60:	40240000 	.word	0x40240000
 8006f64:	9b08      	ldr	r3, [sp, #32]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 80ca 	beq.w	8007100 <_dtoa_r+0xb20>
 8006f6c:	9b03      	ldr	r3, [sp, #12]
 8006f6e:	9302      	str	r3, [sp, #8]
 8006f70:	2d00      	cmp	r5, #0
 8006f72:	dd05      	ble.n	8006f80 <_dtoa_r+0x9a0>
 8006f74:	4639      	mov	r1, r7
 8006f76:	462a      	mov	r2, r5
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fd6f 	bl	8007a5c <__lshift>
 8006f7e:	4607      	mov	r7, r0
 8006f80:	f1b8 0f00 	cmp.w	r8, #0
 8006f84:	d05b      	beq.n	800703e <_dtoa_r+0xa5e>
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 fb55 	bl	8007638 <_Balloc>
 8006f8e:	4605      	mov	r5, r0
 8006f90:	b928      	cbnz	r0, 8006f9e <_dtoa_r+0x9be>
 8006f92:	4b87      	ldr	r3, [pc, #540]	; (80071b0 <_dtoa_r+0xbd0>)
 8006f94:	4602      	mov	r2, r0
 8006f96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f9a:	f7ff bb3b 	b.w	8006614 <_dtoa_r+0x34>
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	3202      	adds	r2, #2
 8006fa2:	0092      	lsls	r2, r2, #2
 8006fa4:	f107 010c 	add.w	r1, r7, #12
 8006fa8:	300c      	adds	r0, #12
 8006faa:	f7fe fbf3 	bl	8005794 <memcpy>
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fd52 	bl	8007a5c <__lshift>
 8006fb8:	9b01      	ldr	r3, [sp, #4]
 8006fba:	f103 0901 	add.w	r9, r3, #1
 8006fbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	9305      	str	r3, [sp, #20]
 8006fc6:	f00a 0301 	and.w	r3, sl, #1
 8006fca:	46b8      	mov	r8, r7
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	4607      	mov	r7, r0
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	ee18 0a10 	vmov	r0, s16
 8006fd6:	f7ff fa77 	bl	80064c8 <quorem>
 8006fda:	4641      	mov	r1, r8
 8006fdc:	9002      	str	r0, [sp, #8]
 8006fde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fe2:	ee18 0a10 	vmov	r0, s16
 8006fe6:	f000 fda9 	bl	8007b3c <__mcmp>
 8006fea:	463a      	mov	r2, r7
 8006fec:	9003      	str	r0, [sp, #12]
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 fdbf 	bl	8007b74 <__mdiff>
 8006ff6:	68c2      	ldr	r2, [r0, #12]
 8006ff8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	bb02      	cbnz	r2, 8007042 <_dtoa_r+0xa62>
 8007000:	4601      	mov	r1, r0
 8007002:	ee18 0a10 	vmov	r0, s16
 8007006:	f000 fd99 	bl	8007b3c <__mcmp>
 800700a:	4602      	mov	r2, r0
 800700c:	4629      	mov	r1, r5
 800700e:	4620      	mov	r0, r4
 8007010:	9207      	str	r2, [sp, #28]
 8007012:	f000 fb51 	bl	80076b8 <_Bfree>
 8007016:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800701a:	ea43 0102 	orr.w	r1, r3, r2
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	430b      	orrs	r3, r1
 8007022:	464d      	mov	r5, r9
 8007024:	d10f      	bne.n	8007046 <_dtoa_r+0xa66>
 8007026:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800702a:	d02a      	beq.n	8007082 <_dtoa_r+0xaa2>
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	dd02      	ble.n	8007038 <_dtoa_r+0xa58>
 8007032:	9b02      	ldr	r3, [sp, #8]
 8007034:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007038:	f88b a000 	strb.w	sl, [fp]
 800703c:	e775      	b.n	8006f2a <_dtoa_r+0x94a>
 800703e:	4638      	mov	r0, r7
 8007040:	e7ba      	b.n	8006fb8 <_dtoa_r+0x9d8>
 8007042:	2201      	movs	r2, #1
 8007044:	e7e2      	b.n	800700c <_dtoa_r+0xa2c>
 8007046:	9b03      	ldr	r3, [sp, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	db04      	blt.n	8007056 <_dtoa_r+0xa76>
 800704c:	9906      	ldr	r1, [sp, #24]
 800704e:	430b      	orrs	r3, r1
 8007050:	9904      	ldr	r1, [sp, #16]
 8007052:	430b      	orrs	r3, r1
 8007054:	d122      	bne.n	800709c <_dtoa_r+0xabc>
 8007056:	2a00      	cmp	r2, #0
 8007058:	ddee      	ble.n	8007038 <_dtoa_r+0xa58>
 800705a:	ee18 1a10 	vmov	r1, s16
 800705e:	2201      	movs	r2, #1
 8007060:	4620      	mov	r0, r4
 8007062:	f000 fcfb 	bl	8007a5c <__lshift>
 8007066:	4631      	mov	r1, r6
 8007068:	ee08 0a10 	vmov	s16, r0
 800706c:	f000 fd66 	bl	8007b3c <__mcmp>
 8007070:	2800      	cmp	r0, #0
 8007072:	dc03      	bgt.n	800707c <_dtoa_r+0xa9c>
 8007074:	d1e0      	bne.n	8007038 <_dtoa_r+0xa58>
 8007076:	f01a 0f01 	tst.w	sl, #1
 800707a:	d0dd      	beq.n	8007038 <_dtoa_r+0xa58>
 800707c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007080:	d1d7      	bne.n	8007032 <_dtoa_r+0xa52>
 8007082:	2339      	movs	r3, #57	; 0x39
 8007084:	f88b 3000 	strb.w	r3, [fp]
 8007088:	462b      	mov	r3, r5
 800708a:	461d      	mov	r5, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007092:	2a39      	cmp	r2, #57	; 0x39
 8007094:	d071      	beq.n	800717a <_dtoa_r+0xb9a>
 8007096:	3201      	adds	r2, #1
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	e746      	b.n	8006f2a <_dtoa_r+0x94a>
 800709c:	2a00      	cmp	r2, #0
 800709e:	dd07      	ble.n	80070b0 <_dtoa_r+0xad0>
 80070a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070a4:	d0ed      	beq.n	8007082 <_dtoa_r+0xaa2>
 80070a6:	f10a 0301 	add.w	r3, sl, #1
 80070aa:	f88b 3000 	strb.w	r3, [fp]
 80070ae:	e73c      	b.n	8006f2a <_dtoa_r+0x94a>
 80070b0:	9b05      	ldr	r3, [sp, #20]
 80070b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80070b6:	4599      	cmp	r9, r3
 80070b8:	d047      	beq.n	800714a <_dtoa_r+0xb6a>
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	2300      	movs	r3, #0
 80070c0:	220a      	movs	r2, #10
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 fb1a 	bl	80076fc <__multadd>
 80070c8:	45b8      	cmp	r8, r7
 80070ca:	ee08 0a10 	vmov	s16, r0
 80070ce:	f04f 0300 	mov.w	r3, #0
 80070d2:	f04f 020a 	mov.w	r2, #10
 80070d6:	4641      	mov	r1, r8
 80070d8:	4620      	mov	r0, r4
 80070da:	d106      	bne.n	80070ea <_dtoa_r+0xb0a>
 80070dc:	f000 fb0e 	bl	80076fc <__multadd>
 80070e0:	4680      	mov	r8, r0
 80070e2:	4607      	mov	r7, r0
 80070e4:	f109 0901 	add.w	r9, r9, #1
 80070e8:	e772      	b.n	8006fd0 <_dtoa_r+0x9f0>
 80070ea:	f000 fb07 	bl	80076fc <__multadd>
 80070ee:	4639      	mov	r1, r7
 80070f0:	4680      	mov	r8, r0
 80070f2:	2300      	movs	r3, #0
 80070f4:	220a      	movs	r2, #10
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 fb00 	bl	80076fc <__multadd>
 80070fc:	4607      	mov	r7, r0
 80070fe:	e7f1      	b.n	80070e4 <_dtoa_r+0xb04>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	9302      	str	r3, [sp, #8]
 8007104:	9d01      	ldr	r5, [sp, #4]
 8007106:	ee18 0a10 	vmov	r0, s16
 800710a:	4631      	mov	r1, r6
 800710c:	f7ff f9dc 	bl	80064c8 <quorem>
 8007110:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007114:	9b01      	ldr	r3, [sp, #4]
 8007116:	f805 ab01 	strb.w	sl, [r5], #1
 800711a:	1aea      	subs	r2, r5, r3
 800711c:	9b02      	ldr	r3, [sp, #8]
 800711e:	4293      	cmp	r3, r2
 8007120:	dd09      	ble.n	8007136 <_dtoa_r+0xb56>
 8007122:	ee18 1a10 	vmov	r1, s16
 8007126:	2300      	movs	r3, #0
 8007128:	220a      	movs	r2, #10
 800712a:	4620      	mov	r0, r4
 800712c:	f000 fae6 	bl	80076fc <__multadd>
 8007130:	ee08 0a10 	vmov	s16, r0
 8007134:	e7e7      	b.n	8007106 <_dtoa_r+0xb26>
 8007136:	9b02      	ldr	r3, [sp, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	bfc8      	it	gt
 800713c:	461d      	movgt	r5, r3
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	bfd8      	it	le
 8007142:	2501      	movle	r5, #1
 8007144:	441d      	add	r5, r3
 8007146:	f04f 0800 	mov.w	r8, #0
 800714a:	ee18 1a10 	vmov	r1, s16
 800714e:	2201      	movs	r2, #1
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fc83 	bl	8007a5c <__lshift>
 8007156:	4631      	mov	r1, r6
 8007158:	ee08 0a10 	vmov	s16, r0
 800715c:	f000 fcee 	bl	8007b3c <__mcmp>
 8007160:	2800      	cmp	r0, #0
 8007162:	dc91      	bgt.n	8007088 <_dtoa_r+0xaa8>
 8007164:	d102      	bne.n	800716c <_dtoa_r+0xb8c>
 8007166:	f01a 0f01 	tst.w	sl, #1
 800716a:	d18d      	bne.n	8007088 <_dtoa_r+0xaa8>
 800716c:	462b      	mov	r3, r5
 800716e:	461d      	mov	r5, r3
 8007170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007174:	2a30      	cmp	r2, #48	; 0x30
 8007176:	d0fa      	beq.n	800716e <_dtoa_r+0xb8e>
 8007178:	e6d7      	b.n	8006f2a <_dtoa_r+0x94a>
 800717a:	9a01      	ldr	r2, [sp, #4]
 800717c:	429a      	cmp	r2, r3
 800717e:	d184      	bne.n	800708a <_dtoa_r+0xaaa>
 8007180:	9b00      	ldr	r3, [sp, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	2331      	movs	r3, #49	; 0x31
 8007188:	7013      	strb	r3, [r2, #0]
 800718a:	e6ce      	b.n	8006f2a <_dtoa_r+0x94a>
 800718c:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <_dtoa_r+0xbd4>)
 800718e:	f7ff ba95 	b.w	80066bc <_dtoa_r+0xdc>
 8007192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007194:	2b00      	cmp	r3, #0
 8007196:	f47f aa6e 	bne.w	8006676 <_dtoa_r+0x96>
 800719a:	4b07      	ldr	r3, [pc, #28]	; (80071b8 <_dtoa_r+0xbd8>)
 800719c:	f7ff ba8e 	b.w	80066bc <_dtoa_r+0xdc>
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dcae      	bgt.n	8007104 <_dtoa_r+0xb24>
 80071a6:	9b06      	ldr	r3, [sp, #24]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	f73f aea8 	bgt.w	8006efe <_dtoa_r+0x91e>
 80071ae:	e7a9      	b.n	8007104 <_dtoa_r+0xb24>
 80071b0:	080091bc 	.word	0x080091bc
 80071b4:	08009080 	.word	0x08009080
 80071b8:	08009154 	.word	0x08009154

080071bc <__sflush_r>:
 80071bc:	898a      	ldrh	r2, [r1, #12]
 80071be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c2:	4605      	mov	r5, r0
 80071c4:	0710      	lsls	r0, r2, #28
 80071c6:	460c      	mov	r4, r1
 80071c8:	d458      	bmi.n	800727c <__sflush_r+0xc0>
 80071ca:	684b      	ldr	r3, [r1, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dc05      	bgt.n	80071dc <__sflush_r+0x20>
 80071d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dc02      	bgt.n	80071dc <__sflush_r+0x20>
 80071d6:	2000      	movs	r0, #0
 80071d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071de:	2e00      	cmp	r6, #0
 80071e0:	d0f9      	beq.n	80071d6 <__sflush_r+0x1a>
 80071e2:	2300      	movs	r3, #0
 80071e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071e8:	682f      	ldr	r7, [r5, #0]
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	d032      	beq.n	8007254 <__sflush_r+0x98>
 80071ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	075a      	lsls	r2, r3, #29
 80071f4:	d505      	bpl.n	8007202 <__sflush_r+0x46>
 80071f6:	6863      	ldr	r3, [r4, #4]
 80071f8:	1ac0      	subs	r0, r0, r3
 80071fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071fc:	b10b      	cbz	r3, 8007202 <__sflush_r+0x46>
 80071fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007200:	1ac0      	subs	r0, r0, r3
 8007202:	2300      	movs	r3, #0
 8007204:	4602      	mov	r2, r0
 8007206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007208:	6a21      	ldr	r1, [r4, #32]
 800720a:	4628      	mov	r0, r5
 800720c:	47b0      	blx	r6
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	d106      	bne.n	8007222 <__sflush_r+0x66>
 8007214:	6829      	ldr	r1, [r5, #0]
 8007216:	291d      	cmp	r1, #29
 8007218:	d82c      	bhi.n	8007274 <__sflush_r+0xb8>
 800721a:	4a2a      	ldr	r2, [pc, #168]	; (80072c4 <__sflush_r+0x108>)
 800721c:	40ca      	lsrs	r2, r1
 800721e:	07d6      	lsls	r6, r2, #31
 8007220:	d528      	bpl.n	8007274 <__sflush_r+0xb8>
 8007222:	2200      	movs	r2, #0
 8007224:	6062      	str	r2, [r4, #4]
 8007226:	04d9      	lsls	r1, r3, #19
 8007228:	6922      	ldr	r2, [r4, #16]
 800722a:	6022      	str	r2, [r4, #0]
 800722c:	d504      	bpl.n	8007238 <__sflush_r+0x7c>
 800722e:	1c42      	adds	r2, r0, #1
 8007230:	d101      	bne.n	8007236 <__sflush_r+0x7a>
 8007232:	682b      	ldr	r3, [r5, #0]
 8007234:	b903      	cbnz	r3, 8007238 <__sflush_r+0x7c>
 8007236:	6560      	str	r0, [r4, #84]	; 0x54
 8007238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800723a:	602f      	str	r7, [r5, #0]
 800723c:	2900      	cmp	r1, #0
 800723e:	d0ca      	beq.n	80071d6 <__sflush_r+0x1a>
 8007240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007244:	4299      	cmp	r1, r3
 8007246:	d002      	beq.n	800724e <__sflush_r+0x92>
 8007248:	4628      	mov	r0, r5
 800724a:	f000 fd8f 	bl	8007d6c <_free_r>
 800724e:	2000      	movs	r0, #0
 8007250:	6360      	str	r0, [r4, #52]	; 0x34
 8007252:	e7c1      	b.n	80071d8 <__sflush_r+0x1c>
 8007254:	6a21      	ldr	r1, [r4, #32]
 8007256:	2301      	movs	r3, #1
 8007258:	4628      	mov	r0, r5
 800725a:	47b0      	blx	r6
 800725c:	1c41      	adds	r1, r0, #1
 800725e:	d1c7      	bne.n	80071f0 <__sflush_r+0x34>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0c4      	beq.n	80071f0 <__sflush_r+0x34>
 8007266:	2b1d      	cmp	r3, #29
 8007268:	d001      	beq.n	800726e <__sflush_r+0xb2>
 800726a:	2b16      	cmp	r3, #22
 800726c:	d101      	bne.n	8007272 <__sflush_r+0xb6>
 800726e:	602f      	str	r7, [r5, #0]
 8007270:	e7b1      	b.n	80071d6 <__sflush_r+0x1a>
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	e7ad      	b.n	80071d8 <__sflush_r+0x1c>
 800727c:	690f      	ldr	r7, [r1, #16]
 800727e:	2f00      	cmp	r7, #0
 8007280:	d0a9      	beq.n	80071d6 <__sflush_r+0x1a>
 8007282:	0793      	lsls	r3, r2, #30
 8007284:	680e      	ldr	r6, [r1, #0]
 8007286:	bf08      	it	eq
 8007288:	694b      	ldreq	r3, [r1, #20]
 800728a:	600f      	str	r7, [r1, #0]
 800728c:	bf18      	it	ne
 800728e:	2300      	movne	r3, #0
 8007290:	eba6 0807 	sub.w	r8, r6, r7
 8007294:	608b      	str	r3, [r1, #8]
 8007296:	f1b8 0f00 	cmp.w	r8, #0
 800729a:	dd9c      	ble.n	80071d6 <__sflush_r+0x1a>
 800729c:	6a21      	ldr	r1, [r4, #32]
 800729e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072a0:	4643      	mov	r3, r8
 80072a2:	463a      	mov	r2, r7
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b0      	blx	r6
 80072a8:	2800      	cmp	r0, #0
 80072aa:	dc06      	bgt.n	80072ba <__sflush_r+0xfe>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b2:	81a3      	strh	r3, [r4, #12]
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	e78e      	b.n	80071d8 <__sflush_r+0x1c>
 80072ba:	4407      	add	r7, r0
 80072bc:	eba8 0800 	sub.w	r8, r8, r0
 80072c0:	e7e9      	b.n	8007296 <__sflush_r+0xda>
 80072c2:	bf00      	nop
 80072c4:	20400001 	.word	0x20400001

080072c8 <_fflush_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	690b      	ldr	r3, [r1, #16]
 80072cc:	4605      	mov	r5, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	b913      	cbnz	r3, 80072d8 <_fflush_r+0x10>
 80072d2:	2500      	movs	r5, #0
 80072d4:	4628      	mov	r0, r5
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	b118      	cbz	r0, 80072e2 <_fflush_r+0x1a>
 80072da:	6983      	ldr	r3, [r0, #24]
 80072dc:	b90b      	cbnz	r3, 80072e2 <_fflush_r+0x1a>
 80072de:	f000 f887 	bl	80073f0 <__sinit>
 80072e2:	4b14      	ldr	r3, [pc, #80]	; (8007334 <_fflush_r+0x6c>)
 80072e4:	429c      	cmp	r4, r3
 80072e6:	d11b      	bne.n	8007320 <_fflush_r+0x58>
 80072e8:	686c      	ldr	r4, [r5, #4]
 80072ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0ef      	beq.n	80072d2 <_fflush_r+0xa>
 80072f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072f4:	07d0      	lsls	r0, r2, #31
 80072f6:	d404      	bmi.n	8007302 <_fflush_r+0x3a>
 80072f8:	0599      	lsls	r1, r3, #22
 80072fa:	d402      	bmi.n	8007302 <_fflush_r+0x3a>
 80072fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072fe:	f000 f92c 	bl	800755a <__retarget_lock_acquire_recursive>
 8007302:	4628      	mov	r0, r5
 8007304:	4621      	mov	r1, r4
 8007306:	f7ff ff59 	bl	80071bc <__sflush_r>
 800730a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800730c:	07da      	lsls	r2, r3, #31
 800730e:	4605      	mov	r5, r0
 8007310:	d4e0      	bmi.n	80072d4 <_fflush_r+0xc>
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	059b      	lsls	r3, r3, #22
 8007316:	d4dd      	bmi.n	80072d4 <_fflush_r+0xc>
 8007318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800731a:	f000 f91f 	bl	800755c <__retarget_lock_release_recursive>
 800731e:	e7d9      	b.n	80072d4 <_fflush_r+0xc>
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <_fflush_r+0x70>)
 8007322:	429c      	cmp	r4, r3
 8007324:	d101      	bne.n	800732a <_fflush_r+0x62>
 8007326:	68ac      	ldr	r4, [r5, #8]
 8007328:	e7df      	b.n	80072ea <_fflush_r+0x22>
 800732a:	4b04      	ldr	r3, [pc, #16]	; (800733c <_fflush_r+0x74>)
 800732c:	429c      	cmp	r4, r3
 800732e:	bf08      	it	eq
 8007330:	68ec      	ldreq	r4, [r5, #12]
 8007332:	e7da      	b.n	80072ea <_fflush_r+0x22>
 8007334:	080091f0 	.word	0x080091f0
 8007338:	08009210 	.word	0x08009210
 800733c:	080091d0 	.word	0x080091d0

08007340 <std>:
 8007340:	2300      	movs	r3, #0
 8007342:	b510      	push	{r4, lr}
 8007344:	4604      	mov	r4, r0
 8007346:	e9c0 3300 	strd	r3, r3, [r0]
 800734a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800734e:	6083      	str	r3, [r0, #8]
 8007350:	8181      	strh	r1, [r0, #12]
 8007352:	6643      	str	r3, [r0, #100]	; 0x64
 8007354:	81c2      	strh	r2, [r0, #14]
 8007356:	6183      	str	r3, [r0, #24]
 8007358:	4619      	mov	r1, r3
 800735a:	2208      	movs	r2, #8
 800735c:	305c      	adds	r0, #92	; 0x5c
 800735e:	f7fe fa27 	bl	80057b0 <memset>
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <std+0x38>)
 8007364:	6263      	str	r3, [r4, #36]	; 0x24
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <std+0x3c>)
 8007368:	62a3      	str	r3, [r4, #40]	; 0x28
 800736a:	4b05      	ldr	r3, [pc, #20]	; (8007380 <std+0x40>)
 800736c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <std+0x44>)
 8007370:	6224      	str	r4, [r4, #32]
 8007372:	6323      	str	r3, [r4, #48]	; 0x30
 8007374:	bd10      	pop	{r4, pc}
 8007376:	bf00      	nop
 8007378:	080084b9 	.word	0x080084b9
 800737c:	080084db 	.word	0x080084db
 8007380:	08008513 	.word	0x08008513
 8007384:	08008537 	.word	0x08008537

08007388 <_cleanup_r>:
 8007388:	4901      	ldr	r1, [pc, #4]	; (8007390 <_cleanup_r+0x8>)
 800738a:	f000 b8c1 	b.w	8007510 <_fwalk_reent>
 800738e:	bf00      	nop
 8007390:	080072c9 	.word	0x080072c9

08007394 <__sfmoreglue>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	2268      	movs	r2, #104	; 0x68
 8007398:	1e4d      	subs	r5, r1, #1
 800739a:	4355      	muls	r5, r2
 800739c:	460e      	mov	r6, r1
 800739e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073a2:	f000 fd4f 	bl	8007e44 <_malloc_r>
 80073a6:	4604      	mov	r4, r0
 80073a8:	b140      	cbz	r0, 80073bc <__sfmoreglue+0x28>
 80073aa:	2100      	movs	r1, #0
 80073ac:	e9c0 1600 	strd	r1, r6, [r0]
 80073b0:	300c      	adds	r0, #12
 80073b2:	60a0      	str	r0, [r4, #8]
 80073b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073b8:	f7fe f9fa 	bl	80057b0 <memset>
 80073bc:	4620      	mov	r0, r4
 80073be:	bd70      	pop	{r4, r5, r6, pc}

080073c0 <__sfp_lock_acquire>:
 80073c0:	4801      	ldr	r0, [pc, #4]	; (80073c8 <__sfp_lock_acquire+0x8>)
 80073c2:	f000 b8ca 	b.w	800755a <__retarget_lock_acquire_recursive>
 80073c6:	bf00      	nop
 80073c8:	20000f71 	.word	0x20000f71

080073cc <__sfp_lock_release>:
 80073cc:	4801      	ldr	r0, [pc, #4]	; (80073d4 <__sfp_lock_release+0x8>)
 80073ce:	f000 b8c5 	b.w	800755c <__retarget_lock_release_recursive>
 80073d2:	bf00      	nop
 80073d4:	20000f71 	.word	0x20000f71

080073d8 <__sinit_lock_acquire>:
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <__sinit_lock_acquire+0x8>)
 80073da:	f000 b8be 	b.w	800755a <__retarget_lock_acquire_recursive>
 80073de:	bf00      	nop
 80073e0:	20000f72 	.word	0x20000f72

080073e4 <__sinit_lock_release>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__sinit_lock_release+0x8>)
 80073e6:	f000 b8b9 	b.w	800755c <__retarget_lock_release_recursive>
 80073ea:	bf00      	nop
 80073ec:	20000f72 	.word	0x20000f72

080073f0 <__sinit>:
 80073f0:	b510      	push	{r4, lr}
 80073f2:	4604      	mov	r4, r0
 80073f4:	f7ff fff0 	bl	80073d8 <__sinit_lock_acquire>
 80073f8:	69a3      	ldr	r3, [r4, #24]
 80073fa:	b11b      	cbz	r3, 8007404 <__sinit+0x14>
 80073fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007400:	f7ff bff0 	b.w	80073e4 <__sinit_lock_release>
 8007404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007408:	6523      	str	r3, [r4, #80]	; 0x50
 800740a:	4b13      	ldr	r3, [pc, #76]	; (8007458 <__sinit+0x68>)
 800740c:	4a13      	ldr	r2, [pc, #76]	; (800745c <__sinit+0x6c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	62a2      	str	r2, [r4, #40]	; 0x28
 8007412:	42a3      	cmp	r3, r4
 8007414:	bf04      	itt	eq
 8007416:	2301      	moveq	r3, #1
 8007418:	61a3      	streq	r3, [r4, #24]
 800741a:	4620      	mov	r0, r4
 800741c:	f000 f820 	bl	8007460 <__sfp>
 8007420:	6060      	str	r0, [r4, #4]
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f81c 	bl	8007460 <__sfp>
 8007428:	60a0      	str	r0, [r4, #8]
 800742a:	4620      	mov	r0, r4
 800742c:	f000 f818 	bl	8007460 <__sfp>
 8007430:	2200      	movs	r2, #0
 8007432:	60e0      	str	r0, [r4, #12]
 8007434:	2104      	movs	r1, #4
 8007436:	6860      	ldr	r0, [r4, #4]
 8007438:	f7ff ff82 	bl	8007340 <std>
 800743c:	68a0      	ldr	r0, [r4, #8]
 800743e:	2201      	movs	r2, #1
 8007440:	2109      	movs	r1, #9
 8007442:	f7ff ff7d 	bl	8007340 <std>
 8007446:	68e0      	ldr	r0, [r4, #12]
 8007448:	2202      	movs	r2, #2
 800744a:	2112      	movs	r1, #18
 800744c:	f7ff ff78 	bl	8007340 <std>
 8007450:	2301      	movs	r3, #1
 8007452:	61a3      	str	r3, [r4, #24]
 8007454:	e7d2      	b.n	80073fc <__sinit+0xc>
 8007456:	bf00      	nop
 8007458:	0800906c 	.word	0x0800906c
 800745c:	08007389 	.word	0x08007389

08007460 <__sfp>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	4607      	mov	r7, r0
 8007464:	f7ff ffac 	bl	80073c0 <__sfp_lock_acquire>
 8007468:	4b1e      	ldr	r3, [pc, #120]	; (80074e4 <__sfp+0x84>)
 800746a:	681e      	ldr	r6, [r3, #0]
 800746c:	69b3      	ldr	r3, [r6, #24]
 800746e:	b913      	cbnz	r3, 8007476 <__sfp+0x16>
 8007470:	4630      	mov	r0, r6
 8007472:	f7ff ffbd 	bl	80073f0 <__sinit>
 8007476:	3648      	adds	r6, #72	; 0x48
 8007478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800747c:	3b01      	subs	r3, #1
 800747e:	d503      	bpl.n	8007488 <__sfp+0x28>
 8007480:	6833      	ldr	r3, [r6, #0]
 8007482:	b30b      	cbz	r3, 80074c8 <__sfp+0x68>
 8007484:	6836      	ldr	r6, [r6, #0]
 8007486:	e7f7      	b.n	8007478 <__sfp+0x18>
 8007488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800748c:	b9d5      	cbnz	r5, 80074c4 <__sfp+0x64>
 800748e:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <__sfp+0x88>)
 8007490:	60e3      	str	r3, [r4, #12]
 8007492:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007496:	6665      	str	r5, [r4, #100]	; 0x64
 8007498:	f000 f85e 	bl	8007558 <__retarget_lock_init_recursive>
 800749c:	f7ff ff96 	bl	80073cc <__sfp_lock_release>
 80074a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074a8:	6025      	str	r5, [r4, #0]
 80074aa:	61a5      	str	r5, [r4, #24]
 80074ac:	2208      	movs	r2, #8
 80074ae:	4629      	mov	r1, r5
 80074b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074b4:	f7fe f97c 	bl	80057b0 <memset>
 80074b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074c0:	4620      	mov	r0, r4
 80074c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074c4:	3468      	adds	r4, #104	; 0x68
 80074c6:	e7d9      	b.n	800747c <__sfp+0x1c>
 80074c8:	2104      	movs	r1, #4
 80074ca:	4638      	mov	r0, r7
 80074cc:	f7ff ff62 	bl	8007394 <__sfmoreglue>
 80074d0:	4604      	mov	r4, r0
 80074d2:	6030      	str	r0, [r6, #0]
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d1d5      	bne.n	8007484 <__sfp+0x24>
 80074d8:	f7ff ff78 	bl	80073cc <__sfp_lock_release>
 80074dc:	230c      	movs	r3, #12
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	e7ee      	b.n	80074c0 <__sfp+0x60>
 80074e2:	bf00      	nop
 80074e4:	0800906c 	.word	0x0800906c
 80074e8:	ffff0001 	.word	0xffff0001

080074ec <fiprintf>:
 80074ec:	b40e      	push	{r1, r2, r3}
 80074ee:	b503      	push	{r0, r1, lr}
 80074f0:	4601      	mov	r1, r0
 80074f2:	ab03      	add	r3, sp, #12
 80074f4:	4805      	ldr	r0, [pc, #20]	; (800750c <fiprintf+0x20>)
 80074f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	9301      	str	r3, [sp, #4]
 80074fe:	f000 fe9b 	bl	8008238 <_vfiprintf_r>
 8007502:	b002      	add	sp, #8
 8007504:	f85d eb04 	ldr.w	lr, [sp], #4
 8007508:	b003      	add	sp, #12
 800750a:	4770      	bx	lr
 800750c:	200000f8 	.word	0x200000f8

08007510 <_fwalk_reent>:
 8007510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007514:	4606      	mov	r6, r0
 8007516:	4688      	mov	r8, r1
 8007518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800751c:	2700      	movs	r7, #0
 800751e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007522:	f1b9 0901 	subs.w	r9, r9, #1
 8007526:	d505      	bpl.n	8007534 <_fwalk_reent+0x24>
 8007528:	6824      	ldr	r4, [r4, #0]
 800752a:	2c00      	cmp	r4, #0
 800752c:	d1f7      	bne.n	800751e <_fwalk_reent+0xe>
 800752e:	4638      	mov	r0, r7
 8007530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007534:	89ab      	ldrh	r3, [r5, #12]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d907      	bls.n	800754a <_fwalk_reent+0x3a>
 800753a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800753e:	3301      	adds	r3, #1
 8007540:	d003      	beq.n	800754a <_fwalk_reent+0x3a>
 8007542:	4629      	mov	r1, r5
 8007544:	4630      	mov	r0, r6
 8007546:	47c0      	blx	r8
 8007548:	4307      	orrs	r7, r0
 800754a:	3568      	adds	r5, #104	; 0x68
 800754c:	e7e9      	b.n	8007522 <_fwalk_reent+0x12>
	...

08007550 <_localeconv_r>:
 8007550:	4800      	ldr	r0, [pc, #0]	; (8007554 <_localeconv_r+0x4>)
 8007552:	4770      	bx	lr
 8007554:	2000024c 	.word	0x2000024c

08007558 <__retarget_lock_init_recursive>:
 8007558:	4770      	bx	lr

0800755a <__retarget_lock_acquire_recursive>:
 800755a:	4770      	bx	lr

0800755c <__retarget_lock_release_recursive>:
 800755c:	4770      	bx	lr

0800755e <__swhatbuf_r>:
 800755e:	b570      	push	{r4, r5, r6, lr}
 8007560:	460e      	mov	r6, r1
 8007562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007566:	2900      	cmp	r1, #0
 8007568:	b096      	sub	sp, #88	; 0x58
 800756a:	4614      	mov	r4, r2
 800756c:	461d      	mov	r5, r3
 800756e:	da08      	bge.n	8007582 <__swhatbuf_r+0x24>
 8007570:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	602a      	str	r2, [r5, #0]
 8007578:	061a      	lsls	r2, r3, #24
 800757a:	d410      	bmi.n	800759e <__swhatbuf_r+0x40>
 800757c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007580:	e00e      	b.n	80075a0 <__swhatbuf_r+0x42>
 8007582:	466a      	mov	r2, sp
 8007584:	f001 f806 	bl	8008594 <_fstat_r>
 8007588:	2800      	cmp	r0, #0
 800758a:	dbf1      	blt.n	8007570 <__swhatbuf_r+0x12>
 800758c:	9a01      	ldr	r2, [sp, #4]
 800758e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007592:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007596:	425a      	negs	r2, r3
 8007598:	415a      	adcs	r2, r3
 800759a:	602a      	str	r2, [r5, #0]
 800759c:	e7ee      	b.n	800757c <__swhatbuf_r+0x1e>
 800759e:	2340      	movs	r3, #64	; 0x40
 80075a0:	2000      	movs	r0, #0
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	b016      	add	sp, #88	; 0x58
 80075a6:	bd70      	pop	{r4, r5, r6, pc}

080075a8 <__smakebuf_r>:
 80075a8:	898b      	ldrh	r3, [r1, #12]
 80075aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075ac:	079d      	lsls	r5, r3, #30
 80075ae:	4606      	mov	r6, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	d507      	bpl.n	80075c4 <__smakebuf_r+0x1c>
 80075b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	2301      	movs	r3, #1
 80075be:	6163      	str	r3, [r4, #20]
 80075c0:	b002      	add	sp, #8
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	ab01      	add	r3, sp, #4
 80075c6:	466a      	mov	r2, sp
 80075c8:	f7ff ffc9 	bl	800755e <__swhatbuf_r>
 80075cc:	9900      	ldr	r1, [sp, #0]
 80075ce:	4605      	mov	r5, r0
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 fc37 	bl	8007e44 <_malloc_r>
 80075d6:	b948      	cbnz	r0, 80075ec <__smakebuf_r+0x44>
 80075d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075dc:	059a      	lsls	r2, r3, #22
 80075de:	d4ef      	bmi.n	80075c0 <__smakebuf_r+0x18>
 80075e0:	f023 0303 	bic.w	r3, r3, #3
 80075e4:	f043 0302 	orr.w	r3, r3, #2
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	e7e3      	b.n	80075b4 <__smakebuf_r+0xc>
 80075ec:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <__smakebuf_r+0x7c>)
 80075ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	6020      	str	r0, [r4, #0]
 80075f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	9b00      	ldr	r3, [sp, #0]
 80075fc:	6163      	str	r3, [r4, #20]
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	6120      	str	r0, [r4, #16]
 8007602:	b15b      	cbz	r3, 800761c <__smakebuf_r+0x74>
 8007604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007608:	4630      	mov	r0, r6
 800760a:	f000 ffd5 	bl	80085b8 <_isatty_r>
 800760e:	b128      	cbz	r0, 800761c <__smakebuf_r+0x74>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f023 0303 	bic.w	r3, r3, #3
 8007616:	f043 0301 	orr.w	r3, r3, #1
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	89a0      	ldrh	r0, [r4, #12]
 800761e:	4305      	orrs	r5, r0
 8007620:	81a5      	strh	r5, [r4, #12]
 8007622:	e7cd      	b.n	80075c0 <__smakebuf_r+0x18>
 8007624:	08007389 	.word	0x08007389

08007628 <malloc>:
 8007628:	4b02      	ldr	r3, [pc, #8]	; (8007634 <malloc+0xc>)
 800762a:	4601      	mov	r1, r0
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	f000 bc09 	b.w	8007e44 <_malloc_r>
 8007632:	bf00      	nop
 8007634:	200000f8 	.word	0x200000f8

08007638 <_Balloc>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800763c:	4604      	mov	r4, r0
 800763e:	460d      	mov	r5, r1
 8007640:	b976      	cbnz	r6, 8007660 <_Balloc+0x28>
 8007642:	2010      	movs	r0, #16
 8007644:	f7ff fff0 	bl	8007628 <malloc>
 8007648:	4602      	mov	r2, r0
 800764a:	6260      	str	r0, [r4, #36]	; 0x24
 800764c:	b920      	cbnz	r0, 8007658 <_Balloc+0x20>
 800764e:	4b18      	ldr	r3, [pc, #96]	; (80076b0 <_Balloc+0x78>)
 8007650:	4818      	ldr	r0, [pc, #96]	; (80076b4 <_Balloc+0x7c>)
 8007652:	2166      	movs	r1, #102	; 0x66
 8007654:	f7fe ff1a 	bl	800648c <__assert_func>
 8007658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800765c:	6006      	str	r6, [r0, #0]
 800765e:	60c6      	str	r6, [r0, #12]
 8007660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007662:	68f3      	ldr	r3, [r6, #12]
 8007664:	b183      	cbz	r3, 8007688 <_Balloc+0x50>
 8007666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800766e:	b9b8      	cbnz	r0, 80076a0 <_Balloc+0x68>
 8007670:	2101      	movs	r1, #1
 8007672:	fa01 f605 	lsl.w	r6, r1, r5
 8007676:	1d72      	adds	r2, r6, #5
 8007678:	0092      	lsls	r2, r2, #2
 800767a:	4620      	mov	r0, r4
 800767c:	f000 fb60 	bl	8007d40 <_calloc_r>
 8007680:	b160      	cbz	r0, 800769c <_Balloc+0x64>
 8007682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007686:	e00e      	b.n	80076a6 <_Balloc+0x6e>
 8007688:	2221      	movs	r2, #33	; 0x21
 800768a:	2104      	movs	r1, #4
 800768c:	4620      	mov	r0, r4
 800768e:	f000 fb57 	bl	8007d40 <_calloc_r>
 8007692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007694:	60f0      	str	r0, [r6, #12]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e4      	bne.n	8007666 <_Balloc+0x2e>
 800769c:	2000      	movs	r0, #0
 800769e:	bd70      	pop	{r4, r5, r6, pc}
 80076a0:	6802      	ldr	r2, [r0, #0]
 80076a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076a6:	2300      	movs	r3, #0
 80076a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076ac:	e7f7      	b.n	800769e <_Balloc+0x66>
 80076ae:	bf00      	nop
 80076b0:	080090a4 	.word	0x080090a4
 80076b4:	08009230 	.word	0x08009230

080076b8 <_Bfree>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076bc:	4605      	mov	r5, r0
 80076be:	460c      	mov	r4, r1
 80076c0:	b976      	cbnz	r6, 80076e0 <_Bfree+0x28>
 80076c2:	2010      	movs	r0, #16
 80076c4:	f7ff ffb0 	bl	8007628 <malloc>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6268      	str	r0, [r5, #36]	; 0x24
 80076cc:	b920      	cbnz	r0, 80076d8 <_Bfree+0x20>
 80076ce:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <_Bfree+0x3c>)
 80076d0:	4809      	ldr	r0, [pc, #36]	; (80076f8 <_Bfree+0x40>)
 80076d2:	218a      	movs	r1, #138	; 0x8a
 80076d4:	f7fe feda 	bl	800648c <__assert_func>
 80076d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076dc:	6006      	str	r6, [r0, #0]
 80076de:	60c6      	str	r6, [r0, #12]
 80076e0:	b13c      	cbz	r4, 80076f2 <_Bfree+0x3a>
 80076e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076e4:	6862      	ldr	r2, [r4, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076ec:	6021      	str	r1, [r4, #0]
 80076ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	080090a4 	.word	0x080090a4
 80076f8:	08009230 	.word	0x08009230

080076fc <__multadd>:
 80076fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	690d      	ldr	r5, [r1, #16]
 8007702:	4607      	mov	r7, r0
 8007704:	460c      	mov	r4, r1
 8007706:	461e      	mov	r6, r3
 8007708:	f101 0c14 	add.w	ip, r1, #20
 800770c:	2000      	movs	r0, #0
 800770e:	f8dc 3000 	ldr.w	r3, [ip]
 8007712:	b299      	uxth	r1, r3
 8007714:	fb02 6101 	mla	r1, r2, r1, r6
 8007718:	0c1e      	lsrs	r6, r3, #16
 800771a:	0c0b      	lsrs	r3, r1, #16
 800771c:	fb02 3306 	mla	r3, r2, r6, r3
 8007720:	b289      	uxth	r1, r1
 8007722:	3001      	adds	r0, #1
 8007724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007728:	4285      	cmp	r5, r0
 800772a:	f84c 1b04 	str.w	r1, [ip], #4
 800772e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007732:	dcec      	bgt.n	800770e <__multadd+0x12>
 8007734:	b30e      	cbz	r6, 800777a <__multadd+0x7e>
 8007736:	68a3      	ldr	r3, [r4, #8]
 8007738:	42ab      	cmp	r3, r5
 800773a:	dc19      	bgt.n	8007770 <__multadd+0x74>
 800773c:	6861      	ldr	r1, [r4, #4]
 800773e:	4638      	mov	r0, r7
 8007740:	3101      	adds	r1, #1
 8007742:	f7ff ff79 	bl	8007638 <_Balloc>
 8007746:	4680      	mov	r8, r0
 8007748:	b928      	cbnz	r0, 8007756 <__multadd+0x5a>
 800774a:	4602      	mov	r2, r0
 800774c:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <__multadd+0x84>)
 800774e:	480d      	ldr	r0, [pc, #52]	; (8007784 <__multadd+0x88>)
 8007750:	21b5      	movs	r1, #181	; 0xb5
 8007752:	f7fe fe9b 	bl	800648c <__assert_func>
 8007756:	6922      	ldr	r2, [r4, #16]
 8007758:	3202      	adds	r2, #2
 800775a:	f104 010c 	add.w	r1, r4, #12
 800775e:	0092      	lsls	r2, r2, #2
 8007760:	300c      	adds	r0, #12
 8007762:	f7fe f817 	bl	8005794 <memcpy>
 8007766:	4621      	mov	r1, r4
 8007768:	4638      	mov	r0, r7
 800776a:	f7ff ffa5 	bl	80076b8 <_Bfree>
 800776e:	4644      	mov	r4, r8
 8007770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007774:	3501      	adds	r5, #1
 8007776:	615e      	str	r6, [r3, #20]
 8007778:	6125      	str	r5, [r4, #16]
 800777a:	4620      	mov	r0, r4
 800777c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007780:	080091bc 	.word	0x080091bc
 8007784:	08009230 	.word	0x08009230

08007788 <__hi0bits>:
 8007788:	0c03      	lsrs	r3, r0, #16
 800778a:	041b      	lsls	r3, r3, #16
 800778c:	b9d3      	cbnz	r3, 80077c4 <__hi0bits+0x3c>
 800778e:	0400      	lsls	r0, r0, #16
 8007790:	2310      	movs	r3, #16
 8007792:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007796:	bf04      	itt	eq
 8007798:	0200      	lsleq	r0, r0, #8
 800779a:	3308      	addeq	r3, #8
 800779c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80077a0:	bf04      	itt	eq
 80077a2:	0100      	lsleq	r0, r0, #4
 80077a4:	3304      	addeq	r3, #4
 80077a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80077aa:	bf04      	itt	eq
 80077ac:	0080      	lsleq	r0, r0, #2
 80077ae:	3302      	addeq	r3, #2
 80077b0:	2800      	cmp	r0, #0
 80077b2:	db05      	blt.n	80077c0 <__hi0bits+0x38>
 80077b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80077b8:	f103 0301 	add.w	r3, r3, #1
 80077bc:	bf08      	it	eq
 80077be:	2320      	moveq	r3, #32
 80077c0:	4618      	mov	r0, r3
 80077c2:	4770      	bx	lr
 80077c4:	2300      	movs	r3, #0
 80077c6:	e7e4      	b.n	8007792 <__hi0bits+0xa>

080077c8 <__lo0bits>:
 80077c8:	6803      	ldr	r3, [r0, #0]
 80077ca:	f013 0207 	ands.w	r2, r3, #7
 80077ce:	4601      	mov	r1, r0
 80077d0:	d00b      	beq.n	80077ea <__lo0bits+0x22>
 80077d2:	07da      	lsls	r2, r3, #31
 80077d4:	d423      	bmi.n	800781e <__lo0bits+0x56>
 80077d6:	0798      	lsls	r0, r3, #30
 80077d8:	bf49      	itett	mi
 80077da:	085b      	lsrmi	r3, r3, #1
 80077dc:	089b      	lsrpl	r3, r3, #2
 80077de:	2001      	movmi	r0, #1
 80077e0:	600b      	strmi	r3, [r1, #0]
 80077e2:	bf5c      	itt	pl
 80077e4:	600b      	strpl	r3, [r1, #0]
 80077e6:	2002      	movpl	r0, #2
 80077e8:	4770      	bx	lr
 80077ea:	b298      	uxth	r0, r3
 80077ec:	b9a8      	cbnz	r0, 800781a <__lo0bits+0x52>
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	2010      	movs	r0, #16
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	b90a      	cbnz	r2, 80077fa <__lo0bits+0x32>
 80077f6:	3008      	adds	r0, #8
 80077f8:	0a1b      	lsrs	r3, r3, #8
 80077fa:	071a      	lsls	r2, r3, #28
 80077fc:	bf04      	itt	eq
 80077fe:	091b      	lsreq	r3, r3, #4
 8007800:	3004      	addeq	r0, #4
 8007802:	079a      	lsls	r2, r3, #30
 8007804:	bf04      	itt	eq
 8007806:	089b      	lsreq	r3, r3, #2
 8007808:	3002      	addeq	r0, #2
 800780a:	07da      	lsls	r2, r3, #31
 800780c:	d403      	bmi.n	8007816 <__lo0bits+0x4e>
 800780e:	085b      	lsrs	r3, r3, #1
 8007810:	f100 0001 	add.w	r0, r0, #1
 8007814:	d005      	beq.n	8007822 <__lo0bits+0x5a>
 8007816:	600b      	str	r3, [r1, #0]
 8007818:	4770      	bx	lr
 800781a:	4610      	mov	r0, r2
 800781c:	e7e9      	b.n	80077f2 <__lo0bits+0x2a>
 800781e:	2000      	movs	r0, #0
 8007820:	4770      	bx	lr
 8007822:	2020      	movs	r0, #32
 8007824:	4770      	bx	lr
	...

08007828 <__i2b>:
 8007828:	b510      	push	{r4, lr}
 800782a:	460c      	mov	r4, r1
 800782c:	2101      	movs	r1, #1
 800782e:	f7ff ff03 	bl	8007638 <_Balloc>
 8007832:	4602      	mov	r2, r0
 8007834:	b928      	cbnz	r0, 8007842 <__i2b+0x1a>
 8007836:	4b05      	ldr	r3, [pc, #20]	; (800784c <__i2b+0x24>)
 8007838:	4805      	ldr	r0, [pc, #20]	; (8007850 <__i2b+0x28>)
 800783a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800783e:	f7fe fe25 	bl	800648c <__assert_func>
 8007842:	2301      	movs	r3, #1
 8007844:	6144      	str	r4, [r0, #20]
 8007846:	6103      	str	r3, [r0, #16]
 8007848:	bd10      	pop	{r4, pc}
 800784a:	bf00      	nop
 800784c:	080091bc 	.word	0x080091bc
 8007850:	08009230 	.word	0x08009230

08007854 <__multiply>:
 8007854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007858:	4691      	mov	r9, r2
 800785a:	690a      	ldr	r2, [r1, #16]
 800785c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007860:	429a      	cmp	r2, r3
 8007862:	bfb8      	it	lt
 8007864:	460b      	movlt	r3, r1
 8007866:	460c      	mov	r4, r1
 8007868:	bfbc      	itt	lt
 800786a:	464c      	movlt	r4, r9
 800786c:	4699      	movlt	r9, r3
 800786e:	6927      	ldr	r7, [r4, #16]
 8007870:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007874:	68a3      	ldr	r3, [r4, #8]
 8007876:	6861      	ldr	r1, [r4, #4]
 8007878:	eb07 060a 	add.w	r6, r7, sl
 800787c:	42b3      	cmp	r3, r6
 800787e:	b085      	sub	sp, #20
 8007880:	bfb8      	it	lt
 8007882:	3101      	addlt	r1, #1
 8007884:	f7ff fed8 	bl	8007638 <_Balloc>
 8007888:	b930      	cbnz	r0, 8007898 <__multiply+0x44>
 800788a:	4602      	mov	r2, r0
 800788c:	4b44      	ldr	r3, [pc, #272]	; (80079a0 <__multiply+0x14c>)
 800788e:	4845      	ldr	r0, [pc, #276]	; (80079a4 <__multiply+0x150>)
 8007890:	f240 115d 	movw	r1, #349	; 0x15d
 8007894:	f7fe fdfa 	bl	800648c <__assert_func>
 8007898:	f100 0514 	add.w	r5, r0, #20
 800789c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078a0:	462b      	mov	r3, r5
 80078a2:	2200      	movs	r2, #0
 80078a4:	4543      	cmp	r3, r8
 80078a6:	d321      	bcc.n	80078ec <__multiply+0x98>
 80078a8:	f104 0314 	add.w	r3, r4, #20
 80078ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80078b0:	f109 0314 	add.w	r3, r9, #20
 80078b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80078b8:	9202      	str	r2, [sp, #8]
 80078ba:	1b3a      	subs	r2, r7, r4
 80078bc:	3a15      	subs	r2, #21
 80078be:	f022 0203 	bic.w	r2, r2, #3
 80078c2:	3204      	adds	r2, #4
 80078c4:	f104 0115 	add.w	r1, r4, #21
 80078c8:	428f      	cmp	r7, r1
 80078ca:	bf38      	it	cc
 80078cc:	2204      	movcc	r2, #4
 80078ce:	9201      	str	r2, [sp, #4]
 80078d0:	9a02      	ldr	r2, [sp, #8]
 80078d2:	9303      	str	r3, [sp, #12]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d80c      	bhi.n	80078f2 <__multiply+0x9e>
 80078d8:	2e00      	cmp	r6, #0
 80078da:	dd03      	ble.n	80078e4 <__multiply+0x90>
 80078dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d05a      	beq.n	800799a <__multiply+0x146>
 80078e4:	6106      	str	r6, [r0, #16]
 80078e6:	b005      	add	sp, #20
 80078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	f843 2b04 	str.w	r2, [r3], #4
 80078f0:	e7d8      	b.n	80078a4 <__multiply+0x50>
 80078f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80078f6:	f1ba 0f00 	cmp.w	sl, #0
 80078fa:	d024      	beq.n	8007946 <__multiply+0xf2>
 80078fc:	f104 0e14 	add.w	lr, r4, #20
 8007900:	46a9      	mov	r9, r5
 8007902:	f04f 0c00 	mov.w	ip, #0
 8007906:	f85e 2b04 	ldr.w	r2, [lr], #4
 800790a:	f8d9 1000 	ldr.w	r1, [r9]
 800790e:	fa1f fb82 	uxth.w	fp, r2
 8007912:	b289      	uxth	r1, r1
 8007914:	fb0a 110b 	mla	r1, sl, fp, r1
 8007918:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800791c:	f8d9 2000 	ldr.w	r2, [r9]
 8007920:	4461      	add	r1, ip
 8007922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007926:	fb0a c20b 	mla	r2, sl, fp, ip
 800792a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800792e:	b289      	uxth	r1, r1
 8007930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007934:	4577      	cmp	r7, lr
 8007936:	f849 1b04 	str.w	r1, [r9], #4
 800793a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800793e:	d8e2      	bhi.n	8007906 <__multiply+0xb2>
 8007940:	9a01      	ldr	r2, [sp, #4]
 8007942:	f845 c002 	str.w	ip, [r5, r2]
 8007946:	9a03      	ldr	r2, [sp, #12]
 8007948:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800794c:	3304      	adds	r3, #4
 800794e:	f1b9 0f00 	cmp.w	r9, #0
 8007952:	d020      	beq.n	8007996 <__multiply+0x142>
 8007954:	6829      	ldr	r1, [r5, #0]
 8007956:	f104 0c14 	add.w	ip, r4, #20
 800795a:	46ae      	mov	lr, r5
 800795c:	f04f 0a00 	mov.w	sl, #0
 8007960:	f8bc b000 	ldrh.w	fp, [ip]
 8007964:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007968:	fb09 220b 	mla	r2, r9, fp, r2
 800796c:	4492      	add	sl, r2
 800796e:	b289      	uxth	r1, r1
 8007970:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007974:	f84e 1b04 	str.w	r1, [lr], #4
 8007978:	f85c 2b04 	ldr.w	r2, [ip], #4
 800797c:	f8be 1000 	ldrh.w	r1, [lr]
 8007980:	0c12      	lsrs	r2, r2, #16
 8007982:	fb09 1102 	mla	r1, r9, r2, r1
 8007986:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800798a:	4567      	cmp	r7, ip
 800798c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007990:	d8e6      	bhi.n	8007960 <__multiply+0x10c>
 8007992:	9a01      	ldr	r2, [sp, #4]
 8007994:	50a9      	str	r1, [r5, r2]
 8007996:	3504      	adds	r5, #4
 8007998:	e79a      	b.n	80078d0 <__multiply+0x7c>
 800799a:	3e01      	subs	r6, #1
 800799c:	e79c      	b.n	80078d8 <__multiply+0x84>
 800799e:	bf00      	nop
 80079a0:	080091bc 	.word	0x080091bc
 80079a4:	08009230 	.word	0x08009230

080079a8 <__pow5mult>:
 80079a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ac:	4615      	mov	r5, r2
 80079ae:	f012 0203 	ands.w	r2, r2, #3
 80079b2:	4606      	mov	r6, r0
 80079b4:	460f      	mov	r7, r1
 80079b6:	d007      	beq.n	80079c8 <__pow5mult+0x20>
 80079b8:	4c25      	ldr	r4, [pc, #148]	; (8007a50 <__pow5mult+0xa8>)
 80079ba:	3a01      	subs	r2, #1
 80079bc:	2300      	movs	r3, #0
 80079be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079c2:	f7ff fe9b 	bl	80076fc <__multadd>
 80079c6:	4607      	mov	r7, r0
 80079c8:	10ad      	asrs	r5, r5, #2
 80079ca:	d03d      	beq.n	8007a48 <__pow5mult+0xa0>
 80079cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079ce:	b97c      	cbnz	r4, 80079f0 <__pow5mult+0x48>
 80079d0:	2010      	movs	r0, #16
 80079d2:	f7ff fe29 	bl	8007628 <malloc>
 80079d6:	4602      	mov	r2, r0
 80079d8:	6270      	str	r0, [r6, #36]	; 0x24
 80079da:	b928      	cbnz	r0, 80079e8 <__pow5mult+0x40>
 80079dc:	4b1d      	ldr	r3, [pc, #116]	; (8007a54 <__pow5mult+0xac>)
 80079de:	481e      	ldr	r0, [pc, #120]	; (8007a58 <__pow5mult+0xb0>)
 80079e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80079e4:	f7fe fd52 	bl	800648c <__assert_func>
 80079e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079ec:	6004      	str	r4, [r0, #0]
 80079ee:	60c4      	str	r4, [r0, #12]
 80079f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079f8:	b94c      	cbnz	r4, 8007a0e <__pow5mult+0x66>
 80079fa:	f240 2171 	movw	r1, #625	; 0x271
 80079fe:	4630      	mov	r0, r6
 8007a00:	f7ff ff12 	bl	8007828 <__i2b>
 8007a04:	2300      	movs	r3, #0
 8007a06:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	6003      	str	r3, [r0, #0]
 8007a0e:	f04f 0900 	mov.w	r9, #0
 8007a12:	07eb      	lsls	r3, r5, #31
 8007a14:	d50a      	bpl.n	8007a2c <__pow5mult+0x84>
 8007a16:	4639      	mov	r1, r7
 8007a18:	4622      	mov	r2, r4
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f7ff ff1a 	bl	8007854 <__multiply>
 8007a20:	4639      	mov	r1, r7
 8007a22:	4680      	mov	r8, r0
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7ff fe47 	bl	80076b8 <_Bfree>
 8007a2a:	4647      	mov	r7, r8
 8007a2c:	106d      	asrs	r5, r5, #1
 8007a2e:	d00b      	beq.n	8007a48 <__pow5mult+0xa0>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	b938      	cbnz	r0, 8007a44 <__pow5mult+0x9c>
 8007a34:	4622      	mov	r2, r4
 8007a36:	4621      	mov	r1, r4
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f7ff ff0b 	bl	8007854 <__multiply>
 8007a3e:	6020      	str	r0, [r4, #0]
 8007a40:	f8c0 9000 	str.w	r9, [r0]
 8007a44:	4604      	mov	r4, r0
 8007a46:	e7e4      	b.n	8007a12 <__pow5mult+0x6a>
 8007a48:	4638      	mov	r0, r7
 8007a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a4e:	bf00      	nop
 8007a50:	08009380 	.word	0x08009380
 8007a54:	080090a4 	.word	0x080090a4
 8007a58:	08009230 	.word	0x08009230

08007a5c <__lshift>:
 8007a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	460c      	mov	r4, r1
 8007a62:	6849      	ldr	r1, [r1, #4]
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a6a:	68a3      	ldr	r3, [r4, #8]
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	4691      	mov	r9, r2
 8007a70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a74:	f108 0601 	add.w	r6, r8, #1
 8007a78:	42b3      	cmp	r3, r6
 8007a7a:	db0b      	blt.n	8007a94 <__lshift+0x38>
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	f7ff fddb 	bl	8007638 <_Balloc>
 8007a82:	4605      	mov	r5, r0
 8007a84:	b948      	cbnz	r0, 8007a9a <__lshift+0x3e>
 8007a86:	4602      	mov	r2, r0
 8007a88:	4b2a      	ldr	r3, [pc, #168]	; (8007b34 <__lshift+0xd8>)
 8007a8a:	482b      	ldr	r0, [pc, #172]	; (8007b38 <__lshift+0xdc>)
 8007a8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a90:	f7fe fcfc 	bl	800648c <__assert_func>
 8007a94:	3101      	adds	r1, #1
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	e7ee      	b.n	8007a78 <__lshift+0x1c>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f100 0114 	add.w	r1, r0, #20
 8007aa0:	f100 0210 	add.w	r2, r0, #16
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	4553      	cmp	r3, sl
 8007aa8:	db37      	blt.n	8007b1a <__lshift+0xbe>
 8007aaa:	6920      	ldr	r0, [r4, #16]
 8007aac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ab0:	f104 0314 	add.w	r3, r4, #20
 8007ab4:	f019 091f 	ands.w	r9, r9, #31
 8007ab8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007abc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ac0:	d02f      	beq.n	8007b22 <__lshift+0xc6>
 8007ac2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ac6:	468a      	mov	sl, r1
 8007ac8:	f04f 0c00 	mov.w	ip, #0
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	fa02 f209 	lsl.w	r2, r2, r9
 8007ad2:	ea42 020c 	orr.w	r2, r2, ip
 8007ad6:	f84a 2b04 	str.w	r2, [sl], #4
 8007ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ade:	4298      	cmp	r0, r3
 8007ae0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007ae4:	d8f2      	bhi.n	8007acc <__lshift+0x70>
 8007ae6:	1b03      	subs	r3, r0, r4
 8007ae8:	3b15      	subs	r3, #21
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	3304      	adds	r3, #4
 8007af0:	f104 0215 	add.w	r2, r4, #21
 8007af4:	4290      	cmp	r0, r2
 8007af6:	bf38      	it	cc
 8007af8:	2304      	movcc	r3, #4
 8007afa:	f841 c003 	str.w	ip, [r1, r3]
 8007afe:	f1bc 0f00 	cmp.w	ip, #0
 8007b02:	d001      	beq.n	8007b08 <__lshift+0xac>
 8007b04:	f108 0602 	add.w	r6, r8, #2
 8007b08:	3e01      	subs	r6, #1
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	612e      	str	r6, [r5, #16]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	f7ff fdd2 	bl	80076b8 <_Bfree>
 8007b14:	4628      	mov	r0, r5
 8007b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b1e:	3301      	adds	r3, #1
 8007b20:	e7c1      	b.n	8007aa6 <__lshift+0x4a>
 8007b22:	3904      	subs	r1, #4
 8007b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b28:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b2c:	4298      	cmp	r0, r3
 8007b2e:	d8f9      	bhi.n	8007b24 <__lshift+0xc8>
 8007b30:	e7ea      	b.n	8007b08 <__lshift+0xac>
 8007b32:	bf00      	nop
 8007b34:	080091bc 	.word	0x080091bc
 8007b38:	08009230 	.word	0x08009230

08007b3c <__mcmp>:
 8007b3c:	b530      	push	{r4, r5, lr}
 8007b3e:	6902      	ldr	r2, [r0, #16]
 8007b40:	690c      	ldr	r4, [r1, #16]
 8007b42:	1b12      	subs	r2, r2, r4
 8007b44:	d10e      	bne.n	8007b64 <__mcmp+0x28>
 8007b46:	f100 0314 	add.w	r3, r0, #20
 8007b4a:	3114      	adds	r1, #20
 8007b4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b5c:	42a5      	cmp	r5, r4
 8007b5e:	d003      	beq.n	8007b68 <__mcmp+0x2c>
 8007b60:	d305      	bcc.n	8007b6e <__mcmp+0x32>
 8007b62:	2201      	movs	r2, #1
 8007b64:	4610      	mov	r0, r2
 8007b66:	bd30      	pop	{r4, r5, pc}
 8007b68:	4283      	cmp	r3, r0
 8007b6a:	d3f3      	bcc.n	8007b54 <__mcmp+0x18>
 8007b6c:	e7fa      	b.n	8007b64 <__mcmp+0x28>
 8007b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b72:	e7f7      	b.n	8007b64 <__mcmp+0x28>

08007b74 <__mdiff>:
 8007b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b78:	460c      	mov	r4, r1
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4690      	mov	r8, r2
 8007b82:	f7ff ffdb 	bl	8007b3c <__mcmp>
 8007b86:	1e05      	subs	r5, r0, #0
 8007b88:	d110      	bne.n	8007bac <__mdiff+0x38>
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7ff fd53 	bl	8007638 <_Balloc>
 8007b92:	b930      	cbnz	r0, 8007ba2 <__mdiff+0x2e>
 8007b94:	4b3a      	ldr	r3, [pc, #232]	; (8007c80 <__mdiff+0x10c>)
 8007b96:	4602      	mov	r2, r0
 8007b98:	f240 2132 	movw	r1, #562	; 0x232
 8007b9c:	4839      	ldr	r0, [pc, #228]	; (8007c84 <__mdiff+0x110>)
 8007b9e:	f7fe fc75 	bl	800648c <__assert_func>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bac:	bfa4      	itt	ge
 8007bae:	4643      	movge	r3, r8
 8007bb0:	46a0      	movge	r8, r4
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007bb8:	bfa6      	itte	ge
 8007bba:	461c      	movge	r4, r3
 8007bbc:	2500      	movge	r5, #0
 8007bbe:	2501      	movlt	r5, #1
 8007bc0:	f7ff fd3a 	bl	8007638 <_Balloc>
 8007bc4:	b920      	cbnz	r0, 8007bd0 <__mdiff+0x5c>
 8007bc6:	4b2e      	ldr	r3, [pc, #184]	; (8007c80 <__mdiff+0x10c>)
 8007bc8:	4602      	mov	r2, r0
 8007bca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007bce:	e7e5      	b.n	8007b9c <__mdiff+0x28>
 8007bd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007bd4:	6926      	ldr	r6, [r4, #16]
 8007bd6:	60c5      	str	r5, [r0, #12]
 8007bd8:	f104 0914 	add.w	r9, r4, #20
 8007bdc:	f108 0514 	add.w	r5, r8, #20
 8007be0:	f100 0e14 	add.w	lr, r0, #20
 8007be4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007be8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007bec:	f108 0210 	add.w	r2, r8, #16
 8007bf0:	46f2      	mov	sl, lr
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007bfc:	fa1f f883 	uxth.w	r8, r3
 8007c00:	fa11 f18b 	uxtah	r1, r1, fp
 8007c04:	0c1b      	lsrs	r3, r3, #16
 8007c06:	eba1 0808 	sub.w	r8, r1, r8
 8007c0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007c12:	fa1f f888 	uxth.w	r8, r8
 8007c16:	1419      	asrs	r1, r3, #16
 8007c18:	454e      	cmp	r6, r9
 8007c1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007c1e:	f84a 3b04 	str.w	r3, [sl], #4
 8007c22:	d8e7      	bhi.n	8007bf4 <__mdiff+0x80>
 8007c24:	1b33      	subs	r3, r6, r4
 8007c26:	3b15      	subs	r3, #21
 8007c28:	f023 0303 	bic.w	r3, r3, #3
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	3415      	adds	r4, #21
 8007c30:	42a6      	cmp	r6, r4
 8007c32:	bf38      	it	cc
 8007c34:	2304      	movcc	r3, #4
 8007c36:	441d      	add	r5, r3
 8007c38:	4473      	add	r3, lr
 8007c3a:	469e      	mov	lr, r3
 8007c3c:	462e      	mov	r6, r5
 8007c3e:	4566      	cmp	r6, ip
 8007c40:	d30e      	bcc.n	8007c60 <__mdiff+0xec>
 8007c42:	f10c 0203 	add.w	r2, ip, #3
 8007c46:	1b52      	subs	r2, r2, r5
 8007c48:	f022 0203 	bic.w	r2, r2, #3
 8007c4c:	3d03      	subs	r5, #3
 8007c4e:	45ac      	cmp	ip, r5
 8007c50:	bf38      	it	cc
 8007c52:	2200      	movcc	r2, #0
 8007c54:	441a      	add	r2, r3
 8007c56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007c5a:	b17b      	cbz	r3, 8007c7c <__mdiff+0x108>
 8007c5c:	6107      	str	r7, [r0, #16]
 8007c5e:	e7a3      	b.n	8007ba8 <__mdiff+0x34>
 8007c60:	f856 8b04 	ldr.w	r8, [r6], #4
 8007c64:	fa11 f288 	uxtah	r2, r1, r8
 8007c68:	1414      	asrs	r4, r2, #16
 8007c6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c6e:	b292      	uxth	r2, r2
 8007c70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c74:	f84e 2b04 	str.w	r2, [lr], #4
 8007c78:	1421      	asrs	r1, r4, #16
 8007c7a:	e7e0      	b.n	8007c3e <__mdiff+0xca>
 8007c7c:	3f01      	subs	r7, #1
 8007c7e:	e7ea      	b.n	8007c56 <__mdiff+0xe2>
 8007c80:	080091bc 	.word	0x080091bc
 8007c84:	08009230 	.word	0x08009230

08007c88 <__d2b>:
 8007c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c8c:	4689      	mov	r9, r1
 8007c8e:	2101      	movs	r1, #1
 8007c90:	ec57 6b10 	vmov	r6, r7, d0
 8007c94:	4690      	mov	r8, r2
 8007c96:	f7ff fccf 	bl	8007638 <_Balloc>
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	b930      	cbnz	r0, 8007cac <__d2b+0x24>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	4b25      	ldr	r3, [pc, #148]	; (8007d38 <__d2b+0xb0>)
 8007ca2:	4826      	ldr	r0, [pc, #152]	; (8007d3c <__d2b+0xb4>)
 8007ca4:	f240 310a 	movw	r1, #778	; 0x30a
 8007ca8:	f7fe fbf0 	bl	800648c <__assert_func>
 8007cac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cb4:	bb35      	cbnz	r5, 8007d04 <__d2b+0x7c>
 8007cb6:	2e00      	cmp	r6, #0
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	d028      	beq.n	8007d0e <__d2b+0x86>
 8007cbc:	4668      	mov	r0, sp
 8007cbe:	9600      	str	r6, [sp, #0]
 8007cc0:	f7ff fd82 	bl	80077c8 <__lo0bits>
 8007cc4:	9900      	ldr	r1, [sp, #0]
 8007cc6:	b300      	cbz	r0, 8007d0a <__d2b+0x82>
 8007cc8:	9a01      	ldr	r2, [sp, #4]
 8007cca:	f1c0 0320 	rsb	r3, r0, #32
 8007cce:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	40c2      	lsrs	r2, r0
 8007cd6:	6163      	str	r3, [r4, #20]
 8007cd8:	9201      	str	r2, [sp, #4]
 8007cda:	9b01      	ldr	r3, [sp, #4]
 8007cdc:	61a3      	str	r3, [r4, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bf14      	ite	ne
 8007ce2:	2202      	movne	r2, #2
 8007ce4:	2201      	moveq	r2, #1
 8007ce6:	6122      	str	r2, [r4, #16]
 8007ce8:	b1d5      	cbz	r5, 8007d20 <__d2b+0x98>
 8007cea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cee:	4405      	add	r5, r0
 8007cf0:	f8c9 5000 	str.w	r5, [r9]
 8007cf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cf8:	f8c8 0000 	str.w	r0, [r8]
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	b003      	add	sp, #12
 8007d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d08:	e7d5      	b.n	8007cb6 <__d2b+0x2e>
 8007d0a:	6161      	str	r1, [r4, #20]
 8007d0c:	e7e5      	b.n	8007cda <__d2b+0x52>
 8007d0e:	a801      	add	r0, sp, #4
 8007d10:	f7ff fd5a 	bl	80077c8 <__lo0bits>
 8007d14:	9b01      	ldr	r3, [sp, #4]
 8007d16:	6163      	str	r3, [r4, #20]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	6122      	str	r2, [r4, #16]
 8007d1c:	3020      	adds	r0, #32
 8007d1e:	e7e3      	b.n	8007ce8 <__d2b+0x60>
 8007d20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d28:	f8c9 0000 	str.w	r0, [r9]
 8007d2c:	6918      	ldr	r0, [r3, #16]
 8007d2e:	f7ff fd2b 	bl	8007788 <__hi0bits>
 8007d32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d36:	e7df      	b.n	8007cf8 <__d2b+0x70>
 8007d38:	080091bc 	.word	0x080091bc
 8007d3c:	08009230 	.word	0x08009230

08007d40 <_calloc_r>:
 8007d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d42:	fba1 2402 	umull	r2, r4, r1, r2
 8007d46:	b94c      	cbnz	r4, 8007d5c <_calloc_r+0x1c>
 8007d48:	4611      	mov	r1, r2
 8007d4a:	9201      	str	r2, [sp, #4]
 8007d4c:	f000 f87a 	bl	8007e44 <_malloc_r>
 8007d50:	9a01      	ldr	r2, [sp, #4]
 8007d52:	4605      	mov	r5, r0
 8007d54:	b930      	cbnz	r0, 8007d64 <_calloc_r+0x24>
 8007d56:	4628      	mov	r0, r5
 8007d58:	b003      	add	sp, #12
 8007d5a:	bd30      	pop	{r4, r5, pc}
 8007d5c:	220c      	movs	r2, #12
 8007d5e:	6002      	str	r2, [r0, #0]
 8007d60:	2500      	movs	r5, #0
 8007d62:	e7f8      	b.n	8007d56 <_calloc_r+0x16>
 8007d64:	4621      	mov	r1, r4
 8007d66:	f7fd fd23 	bl	80057b0 <memset>
 8007d6a:	e7f4      	b.n	8007d56 <_calloc_r+0x16>

08007d6c <_free_r>:
 8007d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d6e:	2900      	cmp	r1, #0
 8007d70:	d044      	beq.n	8007dfc <_free_r+0x90>
 8007d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d76:	9001      	str	r0, [sp, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d7e:	bfb8      	it	lt
 8007d80:	18e4      	addlt	r4, r4, r3
 8007d82:	f000 fc67 	bl	8008654 <__malloc_lock>
 8007d86:	4a1e      	ldr	r2, [pc, #120]	; (8007e00 <_free_r+0x94>)
 8007d88:	9801      	ldr	r0, [sp, #4]
 8007d8a:	6813      	ldr	r3, [r2, #0]
 8007d8c:	b933      	cbnz	r3, 8007d9c <_free_r+0x30>
 8007d8e:	6063      	str	r3, [r4, #4]
 8007d90:	6014      	str	r4, [r2, #0]
 8007d92:	b003      	add	sp, #12
 8007d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d98:	f000 bc62 	b.w	8008660 <__malloc_unlock>
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	d908      	bls.n	8007db2 <_free_r+0x46>
 8007da0:	6825      	ldr	r5, [r4, #0]
 8007da2:	1961      	adds	r1, r4, r5
 8007da4:	428b      	cmp	r3, r1
 8007da6:	bf01      	itttt	eq
 8007da8:	6819      	ldreq	r1, [r3, #0]
 8007daa:	685b      	ldreq	r3, [r3, #4]
 8007dac:	1949      	addeq	r1, r1, r5
 8007dae:	6021      	streq	r1, [r4, #0]
 8007db0:	e7ed      	b.n	8007d8e <_free_r+0x22>
 8007db2:	461a      	mov	r2, r3
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	b10b      	cbz	r3, 8007dbc <_free_r+0x50>
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	d9fa      	bls.n	8007db2 <_free_r+0x46>
 8007dbc:	6811      	ldr	r1, [r2, #0]
 8007dbe:	1855      	adds	r5, r2, r1
 8007dc0:	42a5      	cmp	r5, r4
 8007dc2:	d10b      	bne.n	8007ddc <_free_r+0x70>
 8007dc4:	6824      	ldr	r4, [r4, #0]
 8007dc6:	4421      	add	r1, r4
 8007dc8:	1854      	adds	r4, r2, r1
 8007dca:	42a3      	cmp	r3, r4
 8007dcc:	6011      	str	r1, [r2, #0]
 8007dce:	d1e0      	bne.n	8007d92 <_free_r+0x26>
 8007dd0:	681c      	ldr	r4, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	6053      	str	r3, [r2, #4]
 8007dd6:	4421      	add	r1, r4
 8007dd8:	6011      	str	r1, [r2, #0]
 8007dda:	e7da      	b.n	8007d92 <_free_r+0x26>
 8007ddc:	d902      	bls.n	8007de4 <_free_r+0x78>
 8007dde:	230c      	movs	r3, #12
 8007de0:	6003      	str	r3, [r0, #0]
 8007de2:	e7d6      	b.n	8007d92 <_free_r+0x26>
 8007de4:	6825      	ldr	r5, [r4, #0]
 8007de6:	1961      	adds	r1, r4, r5
 8007de8:	428b      	cmp	r3, r1
 8007dea:	bf04      	itt	eq
 8007dec:	6819      	ldreq	r1, [r3, #0]
 8007dee:	685b      	ldreq	r3, [r3, #4]
 8007df0:	6063      	str	r3, [r4, #4]
 8007df2:	bf04      	itt	eq
 8007df4:	1949      	addeq	r1, r1, r5
 8007df6:	6021      	streq	r1, [r4, #0]
 8007df8:	6054      	str	r4, [r2, #4]
 8007dfa:	e7ca      	b.n	8007d92 <_free_r+0x26>
 8007dfc:	b003      	add	sp, #12
 8007dfe:	bd30      	pop	{r4, r5, pc}
 8007e00:	20000f74 	.word	0x20000f74

08007e04 <sbrk_aligned>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4e0e      	ldr	r6, [pc, #56]	; (8007e40 <sbrk_aligned+0x3c>)
 8007e08:	460c      	mov	r4, r1
 8007e0a:	6831      	ldr	r1, [r6, #0]
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	b911      	cbnz	r1, 8007e16 <sbrk_aligned+0x12>
 8007e10:	f000 fb42 	bl	8008498 <_sbrk_r>
 8007e14:	6030      	str	r0, [r6, #0]
 8007e16:	4621      	mov	r1, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 fb3d 	bl	8008498 <_sbrk_r>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d00a      	beq.n	8007e38 <sbrk_aligned+0x34>
 8007e22:	1cc4      	adds	r4, r0, #3
 8007e24:	f024 0403 	bic.w	r4, r4, #3
 8007e28:	42a0      	cmp	r0, r4
 8007e2a:	d007      	beq.n	8007e3c <sbrk_aligned+0x38>
 8007e2c:	1a21      	subs	r1, r4, r0
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 fb32 	bl	8008498 <_sbrk_r>
 8007e34:	3001      	adds	r0, #1
 8007e36:	d101      	bne.n	8007e3c <sbrk_aligned+0x38>
 8007e38:	f04f 34ff 	mov.w	r4, #4294967295
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	20000f78 	.word	0x20000f78

08007e44 <_malloc_r>:
 8007e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e48:	1ccd      	adds	r5, r1, #3
 8007e4a:	f025 0503 	bic.w	r5, r5, #3
 8007e4e:	3508      	adds	r5, #8
 8007e50:	2d0c      	cmp	r5, #12
 8007e52:	bf38      	it	cc
 8007e54:	250c      	movcc	r5, #12
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	4607      	mov	r7, r0
 8007e5a:	db01      	blt.n	8007e60 <_malloc_r+0x1c>
 8007e5c:	42a9      	cmp	r1, r5
 8007e5e:	d905      	bls.n	8007e6c <_malloc_r+0x28>
 8007e60:	230c      	movs	r3, #12
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	2600      	movs	r6, #0
 8007e66:	4630      	mov	r0, r6
 8007e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e6c:	4e2e      	ldr	r6, [pc, #184]	; (8007f28 <_malloc_r+0xe4>)
 8007e6e:	f000 fbf1 	bl	8008654 <__malloc_lock>
 8007e72:	6833      	ldr	r3, [r6, #0]
 8007e74:	461c      	mov	r4, r3
 8007e76:	bb34      	cbnz	r4, 8007ec6 <_malloc_r+0x82>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7ff ffc2 	bl	8007e04 <sbrk_aligned>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	4604      	mov	r4, r0
 8007e84:	d14d      	bne.n	8007f22 <_malloc_r+0xde>
 8007e86:	6834      	ldr	r4, [r6, #0]
 8007e88:	4626      	mov	r6, r4
 8007e8a:	2e00      	cmp	r6, #0
 8007e8c:	d140      	bne.n	8007f10 <_malloc_r+0xcc>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	4631      	mov	r1, r6
 8007e92:	4638      	mov	r0, r7
 8007e94:	eb04 0803 	add.w	r8, r4, r3
 8007e98:	f000 fafe 	bl	8008498 <_sbrk_r>
 8007e9c:	4580      	cmp	r8, r0
 8007e9e:	d13a      	bne.n	8007f16 <_malloc_r+0xd2>
 8007ea0:	6821      	ldr	r1, [r4, #0]
 8007ea2:	3503      	adds	r5, #3
 8007ea4:	1a6d      	subs	r5, r5, r1
 8007ea6:	f025 0503 	bic.w	r5, r5, #3
 8007eaa:	3508      	adds	r5, #8
 8007eac:	2d0c      	cmp	r5, #12
 8007eae:	bf38      	it	cc
 8007eb0:	250c      	movcc	r5, #12
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7ff ffa5 	bl	8007e04 <sbrk_aligned>
 8007eba:	3001      	adds	r0, #1
 8007ebc:	d02b      	beq.n	8007f16 <_malloc_r+0xd2>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	442b      	add	r3, r5
 8007ec2:	6023      	str	r3, [r4, #0]
 8007ec4:	e00e      	b.n	8007ee4 <_malloc_r+0xa0>
 8007ec6:	6822      	ldr	r2, [r4, #0]
 8007ec8:	1b52      	subs	r2, r2, r5
 8007eca:	d41e      	bmi.n	8007f0a <_malloc_r+0xc6>
 8007ecc:	2a0b      	cmp	r2, #11
 8007ece:	d916      	bls.n	8007efe <_malloc_r+0xba>
 8007ed0:	1961      	adds	r1, r4, r5
 8007ed2:	42a3      	cmp	r3, r4
 8007ed4:	6025      	str	r5, [r4, #0]
 8007ed6:	bf18      	it	ne
 8007ed8:	6059      	strne	r1, [r3, #4]
 8007eda:	6863      	ldr	r3, [r4, #4]
 8007edc:	bf08      	it	eq
 8007ede:	6031      	streq	r1, [r6, #0]
 8007ee0:	5162      	str	r2, [r4, r5]
 8007ee2:	604b      	str	r3, [r1, #4]
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f104 060b 	add.w	r6, r4, #11
 8007eea:	f000 fbb9 	bl	8008660 <__malloc_unlock>
 8007eee:	f026 0607 	bic.w	r6, r6, #7
 8007ef2:	1d23      	adds	r3, r4, #4
 8007ef4:	1af2      	subs	r2, r6, r3
 8007ef6:	d0b6      	beq.n	8007e66 <_malloc_r+0x22>
 8007ef8:	1b9b      	subs	r3, r3, r6
 8007efa:	50a3      	str	r3, [r4, r2]
 8007efc:	e7b3      	b.n	8007e66 <_malloc_r+0x22>
 8007efe:	6862      	ldr	r2, [r4, #4]
 8007f00:	42a3      	cmp	r3, r4
 8007f02:	bf0c      	ite	eq
 8007f04:	6032      	streq	r2, [r6, #0]
 8007f06:	605a      	strne	r2, [r3, #4]
 8007f08:	e7ec      	b.n	8007ee4 <_malloc_r+0xa0>
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	6864      	ldr	r4, [r4, #4]
 8007f0e:	e7b2      	b.n	8007e76 <_malloc_r+0x32>
 8007f10:	4634      	mov	r4, r6
 8007f12:	6876      	ldr	r6, [r6, #4]
 8007f14:	e7b9      	b.n	8007e8a <_malloc_r+0x46>
 8007f16:	230c      	movs	r3, #12
 8007f18:	603b      	str	r3, [r7, #0]
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	f000 fba0 	bl	8008660 <__malloc_unlock>
 8007f20:	e7a1      	b.n	8007e66 <_malloc_r+0x22>
 8007f22:	6025      	str	r5, [r4, #0]
 8007f24:	e7de      	b.n	8007ee4 <_malloc_r+0xa0>
 8007f26:	bf00      	nop
 8007f28:	20000f74 	.word	0x20000f74

08007f2c <__ssputs_r>:
 8007f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	688e      	ldr	r6, [r1, #8]
 8007f32:	429e      	cmp	r6, r3
 8007f34:	4682      	mov	sl, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	4690      	mov	r8, r2
 8007f3a:	461f      	mov	r7, r3
 8007f3c:	d838      	bhi.n	8007fb0 <__ssputs_r+0x84>
 8007f3e:	898a      	ldrh	r2, [r1, #12]
 8007f40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f44:	d032      	beq.n	8007fac <__ssputs_r+0x80>
 8007f46:	6825      	ldr	r5, [r4, #0]
 8007f48:	6909      	ldr	r1, [r1, #16]
 8007f4a:	eba5 0901 	sub.w	r9, r5, r1
 8007f4e:	6965      	ldr	r5, [r4, #20]
 8007f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f58:	3301      	adds	r3, #1
 8007f5a:	444b      	add	r3, r9
 8007f5c:	106d      	asrs	r5, r5, #1
 8007f5e:	429d      	cmp	r5, r3
 8007f60:	bf38      	it	cc
 8007f62:	461d      	movcc	r5, r3
 8007f64:	0553      	lsls	r3, r2, #21
 8007f66:	d531      	bpl.n	8007fcc <__ssputs_r+0xa0>
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7ff ff6b 	bl	8007e44 <_malloc_r>
 8007f6e:	4606      	mov	r6, r0
 8007f70:	b950      	cbnz	r0, 8007f88 <__ssputs_r+0x5c>
 8007f72:	230c      	movs	r3, #12
 8007f74:	f8ca 3000 	str.w	r3, [sl]
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295
 8007f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f88:	6921      	ldr	r1, [r4, #16]
 8007f8a:	464a      	mov	r2, r9
 8007f8c:	f7fd fc02 	bl	8005794 <memcpy>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	6126      	str	r6, [r4, #16]
 8007f9e:	6165      	str	r5, [r4, #20]
 8007fa0:	444e      	add	r6, r9
 8007fa2:	eba5 0509 	sub.w	r5, r5, r9
 8007fa6:	6026      	str	r6, [r4, #0]
 8007fa8:	60a5      	str	r5, [r4, #8]
 8007faa:	463e      	mov	r6, r7
 8007fac:	42be      	cmp	r6, r7
 8007fae:	d900      	bls.n	8007fb2 <__ssputs_r+0x86>
 8007fb0:	463e      	mov	r6, r7
 8007fb2:	6820      	ldr	r0, [r4, #0]
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	4641      	mov	r1, r8
 8007fb8:	f000 fb32 	bl	8008620 <memmove>
 8007fbc:	68a3      	ldr	r3, [r4, #8]
 8007fbe:	1b9b      	subs	r3, r3, r6
 8007fc0:	60a3      	str	r3, [r4, #8]
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	4433      	add	r3, r6
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	2000      	movs	r0, #0
 8007fca:	e7db      	b.n	8007f84 <__ssputs_r+0x58>
 8007fcc:	462a      	mov	r2, r5
 8007fce:	f000 fb4d 	bl	800866c <_realloc_r>
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d1e1      	bne.n	8007f9c <__ssputs_r+0x70>
 8007fd8:	6921      	ldr	r1, [r4, #16]
 8007fda:	4650      	mov	r0, sl
 8007fdc:	f7ff fec6 	bl	8007d6c <_free_r>
 8007fe0:	e7c7      	b.n	8007f72 <__ssputs_r+0x46>
	...

08007fe4 <_svfiprintf_r>:
 8007fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	4698      	mov	r8, r3
 8007fea:	898b      	ldrh	r3, [r1, #12]
 8007fec:	061b      	lsls	r3, r3, #24
 8007fee:	b09d      	sub	sp, #116	; 0x74
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	4614      	mov	r4, r2
 8007ff6:	d50e      	bpl.n	8008016 <_svfiprintf_r+0x32>
 8007ff8:	690b      	ldr	r3, [r1, #16]
 8007ffa:	b963      	cbnz	r3, 8008016 <_svfiprintf_r+0x32>
 8007ffc:	2140      	movs	r1, #64	; 0x40
 8007ffe:	f7ff ff21 	bl	8007e44 <_malloc_r>
 8008002:	6028      	str	r0, [r5, #0]
 8008004:	6128      	str	r0, [r5, #16]
 8008006:	b920      	cbnz	r0, 8008012 <_svfiprintf_r+0x2e>
 8008008:	230c      	movs	r3, #12
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	e0d1      	b.n	80081b6 <_svfiprintf_r+0x1d2>
 8008012:	2340      	movs	r3, #64	; 0x40
 8008014:	616b      	str	r3, [r5, #20]
 8008016:	2300      	movs	r3, #0
 8008018:	9309      	str	r3, [sp, #36]	; 0x24
 800801a:	2320      	movs	r3, #32
 800801c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008020:	f8cd 800c 	str.w	r8, [sp, #12]
 8008024:	2330      	movs	r3, #48	; 0x30
 8008026:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081d0 <_svfiprintf_r+0x1ec>
 800802a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800802e:	f04f 0901 	mov.w	r9, #1
 8008032:	4623      	mov	r3, r4
 8008034:	469a      	mov	sl, r3
 8008036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800803a:	b10a      	cbz	r2, 8008040 <_svfiprintf_r+0x5c>
 800803c:	2a25      	cmp	r2, #37	; 0x25
 800803e:	d1f9      	bne.n	8008034 <_svfiprintf_r+0x50>
 8008040:	ebba 0b04 	subs.w	fp, sl, r4
 8008044:	d00b      	beq.n	800805e <_svfiprintf_r+0x7a>
 8008046:	465b      	mov	r3, fp
 8008048:	4622      	mov	r2, r4
 800804a:	4629      	mov	r1, r5
 800804c:	4638      	mov	r0, r7
 800804e:	f7ff ff6d 	bl	8007f2c <__ssputs_r>
 8008052:	3001      	adds	r0, #1
 8008054:	f000 80aa 	beq.w	80081ac <_svfiprintf_r+0x1c8>
 8008058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800805a:	445a      	add	r2, fp
 800805c:	9209      	str	r2, [sp, #36]	; 0x24
 800805e:	f89a 3000 	ldrb.w	r3, [sl]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 80a2 	beq.w	80081ac <_svfiprintf_r+0x1c8>
 8008068:	2300      	movs	r3, #0
 800806a:	f04f 32ff 	mov.w	r2, #4294967295
 800806e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008072:	f10a 0a01 	add.w	sl, sl, #1
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	9307      	str	r3, [sp, #28]
 800807a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800807e:	931a      	str	r3, [sp, #104]	; 0x68
 8008080:	4654      	mov	r4, sl
 8008082:	2205      	movs	r2, #5
 8008084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008088:	4851      	ldr	r0, [pc, #324]	; (80081d0 <_svfiprintf_r+0x1ec>)
 800808a:	f7f8 f8a9 	bl	80001e0 <memchr>
 800808e:	9a04      	ldr	r2, [sp, #16]
 8008090:	b9d8      	cbnz	r0, 80080ca <_svfiprintf_r+0xe6>
 8008092:	06d0      	lsls	r0, r2, #27
 8008094:	bf44      	itt	mi
 8008096:	2320      	movmi	r3, #32
 8008098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800809c:	0711      	lsls	r1, r2, #28
 800809e:	bf44      	itt	mi
 80080a0:	232b      	movmi	r3, #43	; 0x2b
 80080a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a6:	f89a 3000 	ldrb.w	r3, [sl]
 80080aa:	2b2a      	cmp	r3, #42	; 0x2a
 80080ac:	d015      	beq.n	80080da <_svfiprintf_r+0xf6>
 80080ae:	9a07      	ldr	r2, [sp, #28]
 80080b0:	4654      	mov	r4, sl
 80080b2:	2000      	movs	r0, #0
 80080b4:	f04f 0c0a 	mov.w	ip, #10
 80080b8:	4621      	mov	r1, r4
 80080ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080be:	3b30      	subs	r3, #48	; 0x30
 80080c0:	2b09      	cmp	r3, #9
 80080c2:	d94e      	bls.n	8008162 <_svfiprintf_r+0x17e>
 80080c4:	b1b0      	cbz	r0, 80080f4 <_svfiprintf_r+0x110>
 80080c6:	9207      	str	r2, [sp, #28]
 80080c8:	e014      	b.n	80080f4 <_svfiprintf_r+0x110>
 80080ca:	eba0 0308 	sub.w	r3, r0, r8
 80080ce:	fa09 f303 	lsl.w	r3, r9, r3
 80080d2:	4313      	orrs	r3, r2
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	46a2      	mov	sl, r4
 80080d8:	e7d2      	b.n	8008080 <_svfiprintf_r+0x9c>
 80080da:	9b03      	ldr	r3, [sp, #12]
 80080dc:	1d19      	adds	r1, r3, #4
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	9103      	str	r1, [sp, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	bfbb      	ittet	lt
 80080e6:	425b      	neglt	r3, r3
 80080e8:	f042 0202 	orrlt.w	r2, r2, #2
 80080ec:	9307      	strge	r3, [sp, #28]
 80080ee:	9307      	strlt	r3, [sp, #28]
 80080f0:	bfb8      	it	lt
 80080f2:	9204      	strlt	r2, [sp, #16]
 80080f4:	7823      	ldrb	r3, [r4, #0]
 80080f6:	2b2e      	cmp	r3, #46	; 0x2e
 80080f8:	d10c      	bne.n	8008114 <_svfiprintf_r+0x130>
 80080fa:	7863      	ldrb	r3, [r4, #1]
 80080fc:	2b2a      	cmp	r3, #42	; 0x2a
 80080fe:	d135      	bne.n	800816c <_svfiprintf_r+0x188>
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	1d1a      	adds	r2, r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	9203      	str	r2, [sp, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	bfb8      	it	lt
 800810c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008110:	3402      	adds	r4, #2
 8008112:	9305      	str	r3, [sp, #20]
 8008114:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081e0 <_svfiprintf_r+0x1fc>
 8008118:	7821      	ldrb	r1, [r4, #0]
 800811a:	2203      	movs	r2, #3
 800811c:	4650      	mov	r0, sl
 800811e:	f7f8 f85f 	bl	80001e0 <memchr>
 8008122:	b140      	cbz	r0, 8008136 <_svfiprintf_r+0x152>
 8008124:	2340      	movs	r3, #64	; 0x40
 8008126:	eba0 000a 	sub.w	r0, r0, sl
 800812a:	fa03 f000 	lsl.w	r0, r3, r0
 800812e:	9b04      	ldr	r3, [sp, #16]
 8008130:	4303      	orrs	r3, r0
 8008132:	3401      	adds	r4, #1
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813a:	4826      	ldr	r0, [pc, #152]	; (80081d4 <_svfiprintf_r+0x1f0>)
 800813c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008140:	2206      	movs	r2, #6
 8008142:	f7f8 f84d 	bl	80001e0 <memchr>
 8008146:	2800      	cmp	r0, #0
 8008148:	d038      	beq.n	80081bc <_svfiprintf_r+0x1d8>
 800814a:	4b23      	ldr	r3, [pc, #140]	; (80081d8 <_svfiprintf_r+0x1f4>)
 800814c:	bb1b      	cbnz	r3, 8008196 <_svfiprintf_r+0x1b2>
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	3307      	adds	r3, #7
 8008152:	f023 0307 	bic.w	r3, r3, #7
 8008156:	3308      	adds	r3, #8
 8008158:	9303      	str	r3, [sp, #12]
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	4433      	add	r3, r6
 800815e:	9309      	str	r3, [sp, #36]	; 0x24
 8008160:	e767      	b.n	8008032 <_svfiprintf_r+0x4e>
 8008162:	fb0c 3202 	mla	r2, ip, r2, r3
 8008166:	460c      	mov	r4, r1
 8008168:	2001      	movs	r0, #1
 800816a:	e7a5      	b.n	80080b8 <_svfiprintf_r+0xd4>
 800816c:	2300      	movs	r3, #0
 800816e:	3401      	adds	r4, #1
 8008170:	9305      	str	r3, [sp, #20]
 8008172:	4619      	mov	r1, r3
 8008174:	f04f 0c0a 	mov.w	ip, #10
 8008178:	4620      	mov	r0, r4
 800817a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800817e:	3a30      	subs	r2, #48	; 0x30
 8008180:	2a09      	cmp	r2, #9
 8008182:	d903      	bls.n	800818c <_svfiprintf_r+0x1a8>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0c5      	beq.n	8008114 <_svfiprintf_r+0x130>
 8008188:	9105      	str	r1, [sp, #20]
 800818a:	e7c3      	b.n	8008114 <_svfiprintf_r+0x130>
 800818c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008190:	4604      	mov	r4, r0
 8008192:	2301      	movs	r3, #1
 8008194:	e7f0      	b.n	8008178 <_svfiprintf_r+0x194>
 8008196:	ab03      	add	r3, sp, #12
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	462a      	mov	r2, r5
 800819c:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <_svfiprintf_r+0x1f8>)
 800819e:	a904      	add	r1, sp, #16
 80081a0:	4638      	mov	r0, r7
 80081a2:	f7fd fbad 	bl	8005900 <_printf_float>
 80081a6:	1c42      	adds	r2, r0, #1
 80081a8:	4606      	mov	r6, r0
 80081aa:	d1d6      	bne.n	800815a <_svfiprintf_r+0x176>
 80081ac:	89ab      	ldrh	r3, [r5, #12]
 80081ae:	065b      	lsls	r3, r3, #25
 80081b0:	f53f af2c 	bmi.w	800800c <_svfiprintf_r+0x28>
 80081b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081b6:	b01d      	add	sp, #116	; 0x74
 80081b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081bc:	ab03      	add	r3, sp, #12
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	462a      	mov	r2, r5
 80081c2:	4b06      	ldr	r3, [pc, #24]	; (80081dc <_svfiprintf_r+0x1f8>)
 80081c4:	a904      	add	r1, sp, #16
 80081c6:	4638      	mov	r0, r7
 80081c8:	f7fd fe3e 	bl	8005e48 <_printf_i>
 80081cc:	e7eb      	b.n	80081a6 <_svfiprintf_r+0x1c2>
 80081ce:	bf00      	nop
 80081d0:	0800938c 	.word	0x0800938c
 80081d4:	08009396 	.word	0x08009396
 80081d8:	08005901 	.word	0x08005901
 80081dc:	08007f2d 	.word	0x08007f2d
 80081e0:	08009392 	.word	0x08009392

080081e4 <__sfputc_r>:
 80081e4:	6893      	ldr	r3, [r2, #8]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	b410      	push	{r4}
 80081ec:	6093      	str	r3, [r2, #8]
 80081ee:	da08      	bge.n	8008202 <__sfputc_r+0x1e>
 80081f0:	6994      	ldr	r4, [r2, #24]
 80081f2:	42a3      	cmp	r3, r4
 80081f4:	db01      	blt.n	80081fa <__sfputc_r+0x16>
 80081f6:	290a      	cmp	r1, #10
 80081f8:	d103      	bne.n	8008202 <__sfputc_r+0x1e>
 80081fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081fe:	f7fe b885 	b.w	800630c <__swbuf_r>
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	1c58      	adds	r0, r3, #1
 8008206:	6010      	str	r0, [r2, #0]
 8008208:	7019      	strb	r1, [r3, #0]
 800820a:	4608      	mov	r0, r1
 800820c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008210:	4770      	bx	lr

08008212 <__sfputs_r>:
 8008212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008214:	4606      	mov	r6, r0
 8008216:	460f      	mov	r7, r1
 8008218:	4614      	mov	r4, r2
 800821a:	18d5      	adds	r5, r2, r3
 800821c:	42ac      	cmp	r4, r5
 800821e:	d101      	bne.n	8008224 <__sfputs_r+0x12>
 8008220:	2000      	movs	r0, #0
 8008222:	e007      	b.n	8008234 <__sfputs_r+0x22>
 8008224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008228:	463a      	mov	r2, r7
 800822a:	4630      	mov	r0, r6
 800822c:	f7ff ffda 	bl	80081e4 <__sfputc_r>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d1f3      	bne.n	800821c <__sfputs_r+0xa>
 8008234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008238 <_vfiprintf_r>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	460d      	mov	r5, r1
 800823e:	b09d      	sub	sp, #116	; 0x74
 8008240:	4614      	mov	r4, r2
 8008242:	4698      	mov	r8, r3
 8008244:	4606      	mov	r6, r0
 8008246:	b118      	cbz	r0, 8008250 <_vfiprintf_r+0x18>
 8008248:	6983      	ldr	r3, [r0, #24]
 800824a:	b90b      	cbnz	r3, 8008250 <_vfiprintf_r+0x18>
 800824c:	f7ff f8d0 	bl	80073f0 <__sinit>
 8008250:	4b89      	ldr	r3, [pc, #548]	; (8008478 <_vfiprintf_r+0x240>)
 8008252:	429d      	cmp	r5, r3
 8008254:	d11b      	bne.n	800828e <_vfiprintf_r+0x56>
 8008256:	6875      	ldr	r5, [r6, #4]
 8008258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800825a:	07d9      	lsls	r1, r3, #31
 800825c:	d405      	bmi.n	800826a <_vfiprintf_r+0x32>
 800825e:	89ab      	ldrh	r3, [r5, #12]
 8008260:	059a      	lsls	r2, r3, #22
 8008262:	d402      	bmi.n	800826a <_vfiprintf_r+0x32>
 8008264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008266:	f7ff f978 	bl	800755a <__retarget_lock_acquire_recursive>
 800826a:	89ab      	ldrh	r3, [r5, #12]
 800826c:	071b      	lsls	r3, r3, #28
 800826e:	d501      	bpl.n	8008274 <_vfiprintf_r+0x3c>
 8008270:	692b      	ldr	r3, [r5, #16]
 8008272:	b9eb      	cbnz	r3, 80082b0 <_vfiprintf_r+0x78>
 8008274:	4629      	mov	r1, r5
 8008276:	4630      	mov	r0, r6
 8008278:	f7fe f89a 	bl	80063b0 <__swsetup_r>
 800827c:	b1c0      	cbz	r0, 80082b0 <_vfiprintf_r+0x78>
 800827e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008280:	07dc      	lsls	r4, r3, #31
 8008282:	d50e      	bpl.n	80082a2 <_vfiprintf_r+0x6a>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	b01d      	add	sp, #116	; 0x74
 800828a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828e:	4b7b      	ldr	r3, [pc, #492]	; (800847c <_vfiprintf_r+0x244>)
 8008290:	429d      	cmp	r5, r3
 8008292:	d101      	bne.n	8008298 <_vfiprintf_r+0x60>
 8008294:	68b5      	ldr	r5, [r6, #8]
 8008296:	e7df      	b.n	8008258 <_vfiprintf_r+0x20>
 8008298:	4b79      	ldr	r3, [pc, #484]	; (8008480 <_vfiprintf_r+0x248>)
 800829a:	429d      	cmp	r5, r3
 800829c:	bf08      	it	eq
 800829e:	68f5      	ldreq	r5, [r6, #12]
 80082a0:	e7da      	b.n	8008258 <_vfiprintf_r+0x20>
 80082a2:	89ab      	ldrh	r3, [r5, #12]
 80082a4:	0598      	lsls	r0, r3, #22
 80082a6:	d4ed      	bmi.n	8008284 <_vfiprintf_r+0x4c>
 80082a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082aa:	f7ff f957 	bl	800755c <__retarget_lock_release_recursive>
 80082ae:	e7e9      	b.n	8008284 <_vfiprintf_r+0x4c>
 80082b0:	2300      	movs	r3, #0
 80082b2:	9309      	str	r3, [sp, #36]	; 0x24
 80082b4:	2320      	movs	r3, #32
 80082b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80082be:	2330      	movs	r3, #48	; 0x30
 80082c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008484 <_vfiprintf_r+0x24c>
 80082c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082c8:	f04f 0901 	mov.w	r9, #1
 80082cc:	4623      	mov	r3, r4
 80082ce:	469a      	mov	sl, r3
 80082d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d4:	b10a      	cbz	r2, 80082da <_vfiprintf_r+0xa2>
 80082d6:	2a25      	cmp	r2, #37	; 0x25
 80082d8:	d1f9      	bne.n	80082ce <_vfiprintf_r+0x96>
 80082da:	ebba 0b04 	subs.w	fp, sl, r4
 80082de:	d00b      	beq.n	80082f8 <_vfiprintf_r+0xc0>
 80082e0:	465b      	mov	r3, fp
 80082e2:	4622      	mov	r2, r4
 80082e4:	4629      	mov	r1, r5
 80082e6:	4630      	mov	r0, r6
 80082e8:	f7ff ff93 	bl	8008212 <__sfputs_r>
 80082ec:	3001      	adds	r0, #1
 80082ee:	f000 80aa 	beq.w	8008446 <_vfiprintf_r+0x20e>
 80082f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082f4:	445a      	add	r2, fp
 80082f6:	9209      	str	r2, [sp, #36]	; 0x24
 80082f8:	f89a 3000 	ldrb.w	r3, [sl]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80a2 	beq.w	8008446 <_vfiprintf_r+0x20e>
 8008302:	2300      	movs	r3, #0
 8008304:	f04f 32ff 	mov.w	r2, #4294967295
 8008308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800830c:	f10a 0a01 	add.w	sl, sl, #1
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	9307      	str	r3, [sp, #28]
 8008314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008318:	931a      	str	r3, [sp, #104]	; 0x68
 800831a:	4654      	mov	r4, sl
 800831c:	2205      	movs	r2, #5
 800831e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008322:	4858      	ldr	r0, [pc, #352]	; (8008484 <_vfiprintf_r+0x24c>)
 8008324:	f7f7 ff5c 	bl	80001e0 <memchr>
 8008328:	9a04      	ldr	r2, [sp, #16]
 800832a:	b9d8      	cbnz	r0, 8008364 <_vfiprintf_r+0x12c>
 800832c:	06d1      	lsls	r1, r2, #27
 800832e:	bf44      	itt	mi
 8008330:	2320      	movmi	r3, #32
 8008332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008336:	0713      	lsls	r3, r2, #28
 8008338:	bf44      	itt	mi
 800833a:	232b      	movmi	r3, #43	; 0x2b
 800833c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008340:	f89a 3000 	ldrb.w	r3, [sl]
 8008344:	2b2a      	cmp	r3, #42	; 0x2a
 8008346:	d015      	beq.n	8008374 <_vfiprintf_r+0x13c>
 8008348:	9a07      	ldr	r2, [sp, #28]
 800834a:	4654      	mov	r4, sl
 800834c:	2000      	movs	r0, #0
 800834e:	f04f 0c0a 	mov.w	ip, #10
 8008352:	4621      	mov	r1, r4
 8008354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008358:	3b30      	subs	r3, #48	; 0x30
 800835a:	2b09      	cmp	r3, #9
 800835c:	d94e      	bls.n	80083fc <_vfiprintf_r+0x1c4>
 800835e:	b1b0      	cbz	r0, 800838e <_vfiprintf_r+0x156>
 8008360:	9207      	str	r2, [sp, #28]
 8008362:	e014      	b.n	800838e <_vfiprintf_r+0x156>
 8008364:	eba0 0308 	sub.w	r3, r0, r8
 8008368:	fa09 f303 	lsl.w	r3, r9, r3
 800836c:	4313      	orrs	r3, r2
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	46a2      	mov	sl, r4
 8008372:	e7d2      	b.n	800831a <_vfiprintf_r+0xe2>
 8008374:	9b03      	ldr	r3, [sp, #12]
 8008376:	1d19      	adds	r1, r3, #4
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	9103      	str	r1, [sp, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	bfbb      	ittet	lt
 8008380:	425b      	neglt	r3, r3
 8008382:	f042 0202 	orrlt.w	r2, r2, #2
 8008386:	9307      	strge	r3, [sp, #28]
 8008388:	9307      	strlt	r3, [sp, #28]
 800838a:	bfb8      	it	lt
 800838c:	9204      	strlt	r2, [sp, #16]
 800838e:	7823      	ldrb	r3, [r4, #0]
 8008390:	2b2e      	cmp	r3, #46	; 0x2e
 8008392:	d10c      	bne.n	80083ae <_vfiprintf_r+0x176>
 8008394:	7863      	ldrb	r3, [r4, #1]
 8008396:	2b2a      	cmp	r3, #42	; 0x2a
 8008398:	d135      	bne.n	8008406 <_vfiprintf_r+0x1ce>
 800839a:	9b03      	ldr	r3, [sp, #12]
 800839c:	1d1a      	adds	r2, r3, #4
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	9203      	str	r2, [sp, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bfb8      	it	lt
 80083a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80083aa:	3402      	adds	r4, #2
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008494 <_vfiprintf_r+0x25c>
 80083b2:	7821      	ldrb	r1, [r4, #0]
 80083b4:	2203      	movs	r2, #3
 80083b6:	4650      	mov	r0, sl
 80083b8:	f7f7 ff12 	bl	80001e0 <memchr>
 80083bc:	b140      	cbz	r0, 80083d0 <_vfiprintf_r+0x198>
 80083be:	2340      	movs	r3, #64	; 0x40
 80083c0:	eba0 000a 	sub.w	r0, r0, sl
 80083c4:	fa03 f000 	lsl.w	r0, r3, r0
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	4303      	orrs	r3, r0
 80083cc:	3401      	adds	r4, #1
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d4:	482c      	ldr	r0, [pc, #176]	; (8008488 <_vfiprintf_r+0x250>)
 80083d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083da:	2206      	movs	r2, #6
 80083dc:	f7f7 ff00 	bl	80001e0 <memchr>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d03f      	beq.n	8008464 <_vfiprintf_r+0x22c>
 80083e4:	4b29      	ldr	r3, [pc, #164]	; (800848c <_vfiprintf_r+0x254>)
 80083e6:	bb1b      	cbnz	r3, 8008430 <_vfiprintf_r+0x1f8>
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	3307      	adds	r3, #7
 80083ec:	f023 0307 	bic.w	r3, r3, #7
 80083f0:	3308      	adds	r3, #8
 80083f2:	9303      	str	r3, [sp, #12]
 80083f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f6:	443b      	add	r3, r7
 80083f8:	9309      	str	r3, [sp, #36]	; 0x24
 80083fa:	e767      	b.n	80082cc <_vfiprintf_r+0x94>
 80083fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008400:	460c      	mov	r4, r1
 8008402:	2001      	movs	r0, #1
 8008404:	e7a5      	b.n	8008352 <_vfiprintf_r+0x11a>
 8008406:	2300      	movs	r3, #0
 8008408:	3401      	adds	r4, #1
 800840a:	9305      	str	r3, [sp, #20]
 800840c:	4619      	mov	r1, r3
 800840e:	f04f 0c0a 	mov.w	ip, #10
 8008412:	4620      	mov	r0, r4
 8008414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008418:	3a30      	subs	r2, #48	; 0x30
 800841a:	2a09      	cmp	r2, #9
 800841c:	d903      	bls.n	8008426 <_vfiprintf_r+0x1ee>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0c5      	beq.n	80083ae <_vfiprintf_r+0x176>
 8008422:	9105      	str	r1, [sp, #20]
 8008424:	e7c3      	b.n	80083ae <_vfiprintf_r+0x176>
 8008426:	fb0c 2101 	mla	r1, ip, r1, r2
 800842a:	4604      	mov	r4, r0
 800842c:	2301      	movs	r3, #1
 800842e:	e7f0      	b.n	8008412 <_vfiprintf_r+0x1da>
 8008430:	ab03      	add	r3, sp, #12
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	462a      	mov	r2, r5
 8008436:	4b16      	ldr	r3, [pc, #88]	; (8008490 <_vfiprintf_r+0x258>)
 8008438:	a904      	add	r1, sp, #16
 800843a:	4630      	mov	r0, r6
 800843c:	f7fd fa60 	bl	8005900 <_printf_float>
 8008440:	4607      	mov	r7, r0
 8008442:	1c78      	adds	r0, r7, #1
 8008444:	d1d6      	bne.n	80083f4 <_vfiprintf_r+0x1bc>
 8008446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008448:	07d9      	lsls	r1, r3, #31
 800844a:	d405      	bmi.n	8008458 <_vfiprintf_r+0x220>
 800844c:	89ab      	ldrh	r3, [r5, #12]
 800844e:	059a      	lsls	r2, r3, #22
 8008450:	d402      	bmi.n	8008458 <_vfiprintf_r+0x220>
 8008452:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008454:	f7ff f882 	bl	800755c <__retarget_lock_release_recursive>
 8008458:	89ab      	ldrh	r3, [r5, #12]
 800845a:	065b      	lsls	r3, r3, #25
 800845c:	f53f af12 	bmi.w	8008284 <_vfiprintf_r+0x4c>
 8008460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008462:	e711      	b.n	8008288 <_vfiprintf_r+0x50>
 8008464:	ab03      	add	r3, sp, #12
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	462a      	mov	r2, r5
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <_vfiprintf_r+0x258>)
 800846c:	a904      	add	r1, sp, #16
 800846e:	4630      	mov	r0, r6
 8008470:	f7fd fcea 	bl	8005e48 <_printf_i>
 8008474:	e7e4      	b.n	8008440 <_vfiprintf_r+0x208>
 8008476:	bf00      	nop
 8008478:	080091f0 	.word	0x080091f0
 800847c:	08009210 	.word	0x08009210
 8008480:	080091d0 	.word	0x080091d0
 8008484:	0800938c 	.word	0x0800938c
 8008488:	08009396 	.word	0x08009396
 800848c:	08005901 	.word	0x08005901
 8008490:	08008213 	.word	0x08008213
 8008494:	08009392 	.word	0x08009392

08008498 <_sbrk_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4d06      	ldr	r5, [pc, #24]	; (80084b4 <_sbrk_r+0x1c>)
 800849c:	2300      	movs	r3, #0
 800849e:	4604      	mov	r4, r0
 80084a0:	4608      	mov	r0, r1
 80084a2:	602b      	str	r3, [r5, #0]
 80084a4:	f7fd f926 	bl	80056f4 <_sbrk>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d102      	bne.n	80084b2 <_sbrk_r+0x1a>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	b103      	cbz	r3, 80084b2 <_sbrk_r+0x1a>
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	20000f7c 	.word	0x20000f7c

080084b8 <__sread>:
 80084b8:	b510      	push	{r4, lr}
 80084ba:	460c      	mov	r4, r1
 80084bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c0:	f000 f904 	bl	80086cc <_read_r>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	bfab      	itete	ge
 80084c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084ca:	89a3      	ldrhlt	r3, [r4, #12]
 80084cc:	181b      	addge	r3, r3, r0
 80084ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084d2:	bfac      	ite	ge
 80084d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80084d6:	81a3      	strhlt	r3, [r4, #12]
 80084d8:	bd10      	pop	{r4, pc}

080084da <__swrite>:
 80084da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084de:	461f      	mov	r7, r3
 80084e0:	898b      	ldrh	r3, [r1, #12]
 80084e2:	05db      	lsls	r3, r3, #23
 80084e4:	4605      	mov	r5, r0
 80084e6:	460c      	mov	r4, r1
 80084e8:	4616      	mov	r6, r2
 80084ea:	d505      	bpl.n	80084f8 <__swrite+0x1e>
 80084ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f0:	2302      	movs	r3, #2
 80084f2:	2200      	movs	r2, #0
 80084f4:	f000 f870 	bl	80085d8 <_lseek_r>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008502:	81a3      	strh	r3, [r4, #12]
 8008504:	4632      	mov	r2, r6
 8008506:	463b      	mov	r3, r7
 8008508:	4628      	mov	r0, r5
 800850a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800850e:	f000 b817 	b.w	8008540 <_write_r>

08008512 <__sseek>:
 8008512:	b510      	push	{r4, lr}
 8008514:	460c      	mov	r4, r1
 8008516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851a:	f000 f85d 	bl	80085d8 <_lseek_r>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	bf15      	itete	ne
 8008524:	6560      	strne	r0, [r4, #84]	; 0x54
 8008526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800852a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800852e:	81a3      	strheq	r3, [r4, #12]
 8008530:	bf18      	it	ne
 8008532:	81a3      	strhne	r3, [r4, #12]
 8008534:	bd10      	pop	{r4, pc}

08008536 <__sclose>:
 8008536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853a:	f000 b81b 	b.w	8008574 <_close_r>
	...

08008540 <_write_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d07      	ldr	r5, [pc, #28]	; (8008560 <_write_r+0x20>)
 8008544:	4604      	mov	r4, r0
 8008546:	4608      	mov	r0, r1
 8008548:	4611      	mov	r1, r2
 800854a:	2200      	movs	r2, #0
 800854c:	602a      	str	r2, [r5, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	f7fd f8c2 	bl	80056d8 <_write>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_write_r+0x1e>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_write_r+0x1e>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	20000f7c 	.word	0x20000f7c

08008564 <abort>:
 8008564:	b508      	push	{r3, lr}
 8008566:	2006      	movs	r0, #6
 8008568:	f000 f8ea 	bl	8008740 <raise>
 800856c:	2001      	movs	r0, #1
 800856e:	f7fd f8a6 	bl	80056be <_exit>
	...

08008574 <_close_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d06      	ldr	r5, [pc, #24]	; (8008590 <_close_r+0x1c>)
 8008578:	2300      	movs	r3, #0
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	602b      	str	r3, [r5, #0]
 8008580:	f7fd f8d2 	bl	8005728 <_close>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_close_r+0x1a>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_close_r+0x1a>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	20000f7c 	.word	0x20000f7c

08008594 <_fstat_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d07      	ldr	r5, [pc, #28]	; (80085b4 <_fstat_r+0x20>)
 8008598:	2300      	movs	r3, #0
 800859a:	4604      	mov	r4, r0
 800859c:	4608      	mov	r0, r1
 800859e:	4611      	mov	r1, r2
 80085a0:	602b      	str	r3, [r5, #0]
 80085a2:	f7fd f8c4 	bl	800572e <_fstat>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	d102      	bne.n	80085b0 <_fstat_r+0x1c>
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	b103      	cbz	r3, 80085b0 <_fstat_r+0x1c>
 80085ae:	6023      	str	r3, [r4, #0]
 80085b0:	bd38      	pop	{r3, r4, r5, pc}
 80085b2:	bf00      	nop
 80085b4:	20000f7c 	.word	0x20000f7c

080085b8 <_isatty_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d06      	ldr	r5, [pc, #24]	; (80085d4 <_isatty_r+0x1c>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4604      	mov	r4, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	602b      	str	r3, [r5, #0]
 80085c4:	f7fd f8b8 	bl	8005738 <_isatty>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_isatty_r+0x1a>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_isatty_r+0x1a>
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	20000f7c 	.word	0x20000f7c

080085d8 <_lseek_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d07      	ldr	r5, [pc, #28]	; (80085f8 <_lseek_r+0x20>)
 80085dc:	4604      	mov	r4, r0
 80085de:	4608      	mov	r0, r1
 80085e0:	4611      	mov	r1, r2
 80085e2:	2200      	movs	r2, #0
 80085e4:	602a      	str	r2, [r5, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	f7fd f8a8 	bl	800573c <_lseek>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_lseek_r+0x1e>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_lseek_r+0x1e>
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20000f7c 	.word	0x20000f7c

080085fc <__ascii_mbtowc>:
 80085fc:	b082      	sub	sp, #8
 80085fe:	b901      	cbnz	r1, 8008602 <__ascii_mbtowc+0x6>
 8008600:	a901      	add	r1, sp, #4
 8008602:	b142      	cbz	r2, 8008616 <__ascii_mbtowc+0x1a>
 8008604:	b14b      	cbz	r3, 800861a <__ascii_mbtowc+0x1e>
 8008606:	7813      	ldrb	r3, [r2, #0]
 8008608:	600b      	str	r3, [r1, #0]
 800860a:	7812      	ldrb	r2, [r2, #0]
 800860c:	1e10      	subs	r0, r2, #0
 800860e:	bf18      	it	ne
 8008610:	2001      	movne	r0, #1
 8008612:	b002      	add	sp, #8
 8008614:	4770      	bx	lr
 8008616:	4610      	mov	r0, r2
 8008618:	e7fb      	b.n	8008612 <__ascii_mbtowc+0x16>
 800861a:	f06f 0001 	mvn.w	r0, #1
 800861e:	e7f8      	b.n	8008612 <__ascii_mbtowc+0x16>

08008620 <memmove>:
 8008620:	4288      	cmp	r0, r1
 8008622:	b510      	push	{r4, lr}
 8008624:	eb01 0402 	add.w	r4, r1, r2
 8008628:	d902      	bls.n	8008630 <memmove+0x10>
 800862a:	4284      	cmp	r4, r0
 800862c:	4623      	mov	r3, r4
 800862e:	d807      	bhi.n	8008640 <memmove+0x20>
 8008630:	1e43      	subs	r3, r0, #1
 8008632:	42a1      	cmp	r1, r4
 8008634:	d008      	beq.n	8008648 <memmove+0x28>
 8008636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800863a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800863e:	e7f8      	b.n	8008632 <memmove+0x12>
 8008640:	4402      	add	r2, r0
 8008642:	4601      	mov	r1, r0
 8008644:	428a      	cmp	r2, r1
 8008646:	d100      	bne.n	800864a <memmove+0x2a>
 8008648:	bd10      	pop	{r4, pc}
 800864a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800864e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008652:	e7f7      	b.n	8008644 <memmove+0x24>

08008654 <__malloc_lock>:
 8008654:	4801      	ldr	r0, [pc, #4]	; (800865c <__malloc_lock+0x8>)
 8008656:	f7fe bf80 	b.w	800755a <__retarget_lock_acquire_recursive>
 800865a:	bf00      	nop
 800865c:	20000f70 	.word	0x20000f70

08008660 <__malloc_unlock>:
 8008660:	4801      	ldr	r0, [pc, #4]	; (8008668 <__malloc_unlock+0x8>)
 8008662:	f7fe bf7b 	b.w	800755c <__retarget_lock_release_recursive>
 8008666:	bf00      	nop
 8008668:	20000f70 	.word	0x20000f70

0800866c <_realloc_r>:
 800866c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008670:	4680      	mov	r8, r0
 8008672:	4614      	mov	r4, r2
 8008674:	460e      	mov	r6, r1
 8008676:	b921      	cbnz	r1, 8008682 <_realloc_r+0x16>
 8008678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800867c:	4611      	mov	r1, r2
 800867e:	f7ff bbe1 	b.w	8007e44 <_malloc_r>
 8008682:	b92a      	cbnz	r2, 8008690 <_realloc_r+0x24>
 8008684:	f7ff fb72 	bl	8007d6c <_free_r>
 8008688:	4625      	mov	r5, r4
 800868a:	4628      	mov	r0, r5
 800868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008690:	f000 f87f 	bl	8008792 <_malloc_usable_size_r>
 8008694:	4284      	cmp	r4, r0
 8008696:	4607      	mov	r7, r0
 8008698:	d802      	bhi.n	80086a0 <_realloc_r+0x34>
 800869a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800869e:	d812      	bhi.n	80086c6 <_realloc_r+0x5a>
 80086a0:	4621      	mov	r1, r4
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7ff fbce 	bl	8007e44 <_malloc_r>
 80086a8:	4605      	mov	r5, r0
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d0ed      	beq.n	800868a <_realloc_r+0x1e>
 80086ae:	42bc      	cmp	r4, r7
 80086b0:	4622      	mov	r2, r4
 80086b2:	4631      	mov	r1, r6
 80086b4:	bf28      	it	cs
 80086b6:	463a      	movcs	r2, r7
 80086b8:	f7fd f86c 	bl	8005794 <memcpy>
 80086bc:	4631      	mov	r1, r6
 80086be:	4640      	mov	r0, r8
 80086c0:	f7ff fb54 	bl	8007d6c <_free_r>
 80086c4:	e7e1      	b.n	800868a <_realloc_r+0x1e>
 80086c6:	4635      	mov	r5, r6
 80086c8:	e7df      	b.n	800868a <_realloc_r+0x1e>
	...

080086cc <_read_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d07      	ldr	r5, [pc, #28]	; (80086ec <_read_r+0x20>)
 80086d0:	4604      	mov	r4, r0
 80086d2:	4608      	mov	r0, r1
 80086d4:	4611      	mov	r1, r2
 80086d6:	2200      	movs	r2, #0
 80086d8:	602a      	str	r2, [r5, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	f7fc fff5 	bl	80056ca <_read>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_read_r+0x1e>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_read_r+0x1e>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20000f7c 	.word	0x20000f7c

080086f0 <_raise_r>:
 80086f0:	291f      	cmp	r1, #31
 80086f2:	b538      	push	{r3, r4, r5, lr}
 80086f4:	4604      	mov	r4, r0
 80086f6:	460d      	mov	r5, r1
 80086f8:	d904      	bls.n	8008704 <_raise_r+0x14>
 80086fa:	2316      	movs	r3, #22
 80086fc:	6003      	str	r3, [r0, #0]
 80086fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008706:	b112      	cbz	r2, 800870e <_raise_r+0x1e>
 8008708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800870c:	b94b      	cbnz	r3, 8008722 <_raise_r+0x32>
 800870e:	4620      	mov	r0, r4
 8008710:	f000 f830 	bl	8008774 <_getpid_r>
 8008714:	462a      	mov	r2, r5
 8008716:	4601      	mov	r1, r0
 8008718:	4620      	mov	r0, r4
 800871a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800871e:	f000 b817 	b.w	8008750 <_kill_r>
 8008722:	2b01      	cmp	r3, #1
 8008724:	d00a      	beq.n	800873c <_raise_r+0x4c>
 8008726:	1c59      	adds	r1, r3, #1
 8008728:	d103      	bne.n	8008732 <_raise_r+0x42>
 800872a:	2316      	movs	r3, #22
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	2001      	movs	r0, #1
 8008730:	e7e7      	b.n	8008702 <_raise_r+0x12>
 8008732:	2400      	movs	r4, #0
 8008734:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008738:	4628      	mov	r0, r5
 800873a:	4798      	blx	r3
 800873c:	2000      	movs	r0, #0
 800873e:	e7e0      	b.n	8008702 <_raise_r+0x12>

08008740 <raise>:
 8008740:	4b02      	ldr	r3, [pc, #8]	; (800874c <raise+0xc>)
 8008742:	4601      	mov	r1, r0
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	f7ff bfd3 	b.w	80086f0 <_raise_r>
 800874a:	bf00      	nop
 800874c:	200000f8 	.word	0x200000f8

08008750 <_kill_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d07      	ldr	r5, [pc, #28]	; (8008770 <_kill_r+0x20>)
 8008754:	2300      	movs	r3, #0
 8008756:	4604      	mov	r4, r0
 8008758:	4608      	mov	r0, r1
 800875a:	4611      	mov	r1, r2
 800875c:	602b      	str	r3, [r5, #0]
 800875e:	f7fc ffa6 	bl	80056ae <_kill>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	d102      	bne.n	800876c <_kill_r+0x1c>
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	b103      	cbz	r3, 800876c <_kill_r+0x1c>
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	bd38      	pop	{r3, r4, r5, pc}
 800876e:	bf00      	nop
 8008770:	20000f7c 	.word	0x20000f7c

08008774 <_getpid_r>:
 8008774:	f7fc bf99 	b.w	80056aa <_getpid>

08008778 <__ascii_wctomb>:
 8008778:	b149      	cbz	r1, 800878e <__ascii_wctomb+0x16>
 800877a:	2aff      	cmp	r2, #255	; 0xff
 800877c:	bf85      	ittet	hi
 800877e:	238a      	movhi	r3, #138	; 0x8a
 8008780:	6003      	strhi	r3, [r0, #0]
 8008782:	700a      	strbls	r2, [r1, #0]
 8008784:	f04f 30ff 	movhi.w	r0, #4294967295
 8008788:	bf98      	it	ls
 800878a:	2001      	movls	r0, #1
 800878c:	4770      	bx	lr
 800878e:	4608      	mov	r0, r1
 8008790:	4770      	bx	lr

08008792 <_malloc_usable_size_r>:
 8008792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008796:	1f18      	subs	r0, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	bfbc      	itt	lt
 800879c:	580b      	ldrlt	r3, [r1, r0]
 800879e:	18c0      	addlt	r0, r0, r3
 80087a0:	4770      	bx	lr
	...

080087a4 <_init>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	bf00      	nop
 80087a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087aa:	bc08      	pop	{r3}
 80087ac:	469e      	mov	lr, r3
 80087ae:	4770      	bx	lr

080087b0 <_fini>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	bf00      	nop
 80087b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b6:	bc08      	pop	{r3}
 80087b8:	469e      	mov	lr, r3
 80087ba:	4770      	bx	lr
 80087bc:	0000      	movs	r0, r0
	...
